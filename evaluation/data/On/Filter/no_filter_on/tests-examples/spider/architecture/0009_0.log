[     2.389][MainProcess][INFO] Parsing specification...
[     2.395][MainProcess][INFO] File read
[     2.396][MainProcess][DEBUG] Reading input files...
[     2.406][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/architect.csv: ['int64', 'string', 'string', 'string']
[     2.415][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/bridge.csv: ['int64', 'int64', 'string', 'string', 'Float64', 'Float64']
[     2.422][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/0009.csv: ['int64', 'string']
[     2.422][MainProcess][INFO] Parsing sketch...
[     2.423][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child([1], type=Table, var=[]),Child(['n = n()'], type=SummariseCondition, var=[]),Child(['architect_id'], type=Cols, var=[])])
[     2.423][MainProcess][DEBUG] Sketch creation: Line(T2, root=[None], var=[], children=[])
[     2.423][MainProcess][DEBUG] Sketch creation: Line(T3, root=['inner_join'], var=[], children=[Child([0], type=Table, var=[]),Child([1], type=Line, var=[]),Child(['id = architect_id'], type=JoinCondition, var=[])])
[     2.475][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 1384, 'anti_join': 148, 'left_join': 4, 'union': 4, 'intersect': 32, 'semi_join': 4, 'cross_join': 24, 'filter': 12, 'summarise': 74, 'mutate': 2}
[     2.475][MainProcess][DEBUG] {'natural_join': 0.002331002331002331, 'natural_join3': 0.004662004662004662, 'natural_join4': 0.009324009324009324, 'inner_join': 0.8065268065268065, 'anti_join': 0.08624708624708624, 'left_join': 0.002331002331002331, 'union': 0.002331002331002331, 'intersect': 0.018648018648018648, 'semi_join': 0.002331002331002331, 'cross_join': 0.013986013986013986, 'filter': 0.006993006993006993, 'summarise': 0.04312354312354312, 'mutate': 0.0011655011655011655}
[     2.476][MainProcess][DEBUG] {'natural_join': 0.002331002331002331, 'natural_join3': 0.004662004662004662, 'natural_join4': 0.009324009324009324, 'inner_join': 0.8065268065268065, 'anti_join': 0.08624708624708624, 'left_join': 0.002331002331002331, 'union': 0.002331002331002331, 'intersect': 0.018648018648018648, 'semi_join': 0.002331002331002331, 'cross_join': 0.013986013986013986, 'filter': 0.006993006993006993, 'summarise': 0.04312354312354312, 'mutate': 0.0011655011655011655}
[     2.476][MainProcess][INFO] Building synthesizer...
[     2.477][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child([1], type=Table, var=[419]),Child(['n = n()'], type=SummariseCondition, var=[417]),Child(['architect_id'], type=Cols, var=[23]),Child([None], type=None, var=[0])]), Line(T2, root=[None], var=[], children=[]), Line(T3, root=['inner_join'], var=[4], children=[Child([0], type=Table, var=[418]),Child([1], type=Line, var=[422]),Child(['id = architect_id'], type=JoinCondition, var=[359]),Child([None], type=None, var=[0])])]
[     2.937][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 240 constraints
[     2.977][MainProcess][DEBUG] Enumeration time: 0.5008699893951416
[     3.087][MainProcess][DEBUG] Synthesis time: 0.11027789115905762
[     3.087][MainProcess][INFO] Solution found: [summarise(input1, 'n = n()', 'architect_id'), filter(line0, 'n >= 3'), inner_join(input0, line1, 'id = architect_id')]
[     3.090][MainProcess][DEBUG] Solution found using process 0
[     3.090][MainProcess][INFO] Statistics:
[     3.090][MainProcess][INFO] 	Attempted programs: 3 (approx)
[     3.090][MainProcess][INFO] 		Rejected: 2 (approx)
[     3.090][MainProcess][INFO] 		Failed: 0 (approx)
[     3.090][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     3.090][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     3.090][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     3.090][MainProcess][INFO] 	Total time spent in enumerator init: 0.500870 (approx)
[     3.090][MainProcess][INFO] 	Total time spent in enumerator: 0.010613 (approx)
[     3.090][MainProcess][INFO] 		Enumerated 282.666786 programs/s avg. (just enumeration time)
[     3.090][MainProcess][INFO] 		Enumerated 1.258092 programs/s avg. (overall)
[     3.091][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.093712 (approx)
[     3.091][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.004676 (approx)
[     3.091][MainProcess][INFO] Solution found: [summarise(input1, 'n = n()', 'architect_id'), filter(line0, 'n >= 3'), inner_join(input0, line1, 'id = architect_id')]
[     3.091][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_architect <- read_csv("tests-examples/spider/architecture/tables/architect.csv", col_types = cols("id" = col_integer(),"name" = col_character(),"nationality" = col_character(),"gender" = col_character()))
df_architect <- copy_to(con, df_architect)
df_bridge <- read_csv("tests-examples/spider/architecture/tables/bridge.csv", col_types = cols("architect_id" = col_integer(),"id" = col_integer(),"name" = col_character(),"location" = col_character(),"length_meters" = col_double(),"length_feet" = col_double()))
df_bridge <- copy_to(con, df_bridge)
expected_output <- read_csv("tests-examples/spider/architecture/tables/0009.csv", col_types = cols("id" = col_integer(),"name" = col_character()))

df8 <- df_bridge %>% group_by(architect_id) %>% summarise(n = n()) %>% ungroup()
df9 <- df8 %>% filter(n >= 3)
df10 <- inner_join(df_architect, df9, by=c('id' = 'architect_id'), suffix = c('', '.other'), na_matches='never') %>% mutate(architect_id = id)
out <- df10 %>% select(id, name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       name
FROM
  (SELECT id,
          name,
          nationality,
          gender,
          n
   FROM df_architect AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT architect_id,
                COUNT(*) AS n
         FROM df_bridge
         GROUP BY architect_id)
      WHERE (n >= 3.0)) AS RHS ON (LHS.id = RHS.architect_id))
