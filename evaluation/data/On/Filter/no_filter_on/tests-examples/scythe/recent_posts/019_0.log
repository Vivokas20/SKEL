[     2.379][MainProcess][INFO] Parsing specification...
[     2.386][MainProcess][INFO] File read
[     2.387][MainProcess][DEBUG] Reading input files...
[     2.400][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/019.csv: ['int64', 'Float64', 'datetime64[ns]']
[     2.409][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/019_o.csv: ['int64', 'Float64', 'datetime64[ns]']
[     2.409][MainProcess][INFO] Parsing sketch...
[     2.410][MainProcess][DEBUG] Sketch creation: Line(T1, root=[None], var=[], children=[])
[     2.410][MainProcess][DEBUG] Sketch creation: Line(T2, root=['mutate'], var=[], children=[Child([0], type=Line, var=[]),Child(['maxBalance = max(Balance)'], type=SummariseCondition, var=[])])
[     2.410][MainProcess][DEBUG] Sketch creation: Line(T3, root=['cross_join'], var=[], children=[Child([1], type=Line, var=[]),Child([0], type=Table, var=[]),Child(['Balance >= maxBalance & Date < Date.other'], type=CrossJoinCondition, var=[])])
[     2.630][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 26, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 4740, 'filter': 456, 'summarise': 21, 'mutate': 3}
[     2.630][MainProcess][DEBUG] {'natural_join': 0.00019004180919802356, 'natural_join3': 0.00019004180919802356, 'natural_join4': 0.00019004180919802356, 'inner_join': 0.0049410870391486126, 'anti_join': 0.0013302926643861649, 'left_join': 0.00019004180919802356, 'union': 0.00019004180919802356, 'intersect': 0.0005701254275940707, 'semi_join': 0.00019004180919802356, 'cross_join': 0.9007981755986317, 'filter': 0.08665906499429875, 'summarise': 0.003990877993158495, 'mutate': 0.0005701254275940707}
[     2.630][MainProcess][DEBUG] {'natural_join': 0.00019004180919802356, 'natural_join3': 0.00019004180919802356, 'natural_join4': 0.00019004180919802356, 'inner_join': 0.0049410870391486126, 'anti_join': 0.0013302926643861649, 'left_join': 0.00019004180919802356, 'union': 0.00019004180919802356, 'intersect': 0.0005701254275940707, 'semi_join': 0.00019004180919802356, 'cross_join': 0.9007981755986317, 'filter': 0.08665906499429875, 'summarise': 0.003990877993158495, 'mutate': 0.0005701254275940707}
[     2.630][MainProcess][INFO] Building synthesizer...
[     2.632][MainProcess][DEBUG] [Line(T1, root=[None], var=[], children=[]), Line(T2, root=['mutate'], var=[13], children=[Child([0], type=Line, var=[5251]),Child(['maxBalance = max(Balance)'], type=SummariseCondition, var=[5247]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['cross_join'], var=[10], children=[Child([1], type=Line, var=[5252]),Child([0], type=Table, var=[5249]),Child(['Balance >= maxBalance & Date < Date.other'], type=CrossJoinCondition, var=[454]),Child([None], type=None, var=[0])])]
[     6.656][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 214 constraints
[     7.156][MainProcess][DEBUG] Enumeration time: 4.525857925415039
[     7.244][MainProcess][DEBUG] Synthesis time: 0.08729076385498047
[     7.244][MainProcess][INFO] Solution found: [filter(input0, 'Balance > 0'), mutate(line0, 'maxBalance = max(Balance)'), cross_join(line1, input0, 'Balance >= maxBalance & Date < Date.other')]
[     7.259][MainProcess][DEBUG] Solution found using process 0
[     7.259][MainProcess][INFO] Statistics:
[     7.259][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     7.259][MainProcess][INFO] 		Rejected: 0 (approx)
[     7.260][MainProcess][INFO] 		Failed: 0 (approx)
[     7.260][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     7.260][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     7.260][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     7.260][MainProcess][INFO] 	Total time spent in enumerator init: 4.525858 (approx)
[     7.260][MainProcess][INFO] 	Total time spent in enumerator: 0.006245 (approx)
[     7.260][MainProcess][INFO] 		Enumerated 160.118496 programs/s avg. (just enumeration time)
[     7.260][MainProcess][INFO] 		Enumerated 0.152079 programs/s avg. (overall)
[     7.260][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.077461 (approx)
[     7.260][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     7.260][MainProcess][INFO] Solution found: [filter(input0, 'Balance > 0'), mutate(line0, 'maxBalance = max(Balance)'), cross_join(line1, input0, 'Balance >= maxBalance & Date < Date.other')]
[     7.260][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_019 <- read_csv("tests-examples/scythe/recent_posts/tables/019.csv", col_types = cols("CustomerID" = col_integer(),"Balance" = col_double(),"Date" = col_character()))
df_019$Date <- mdy(df_019$Date)
df_019 <- copy_to(con, df_019)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/019_o.csv", col_types = cols("CustomerID" = col_integer(),"Balance" = col_double(),"Date" = col_character()))
expected_output$Date <- mdy(expected_output$Date)

df4 <- df_019 %>% filter(Balance > 0)
df5 <- df4 %>% mutate(maxBalance = max(Balance))
df6 <- full_join(df5, df_019, by=character(), suffix = c("", ".other"), na_matches="never") %>% filter(Balance >= maxBalance & Date < Date.other)
out <- df6 %>% select(CustomerID, Balance = Balance.other, Date = Date.other)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CustomerID,
       Balance_other AS Balance,
       Date_other AS Date
FROM
  (SELECT LHS.CustomerID AS CustomerID,
          LHS.Balance AS Balance,
          LHS.Date AS Date,
          maxBalance,
          RHS.CustomerID AS CustomerID_other,
          RHS.Balance AS Balance_other,
          RHS.Date AS Date_other
   FROM
     (SELECT CustomerID,
             Balance, Date, MAX(Balance) OVER () AS maxBalance
      FROM df_019
      WHERE (Balance > 0.0)) AS LHS
   CROSS JOIN df_019 AS RHS)
WHERE (Balance >= maxBalance
       AND Date < Date_other)
