[     2.795][MainProcess][INFO] Parsing specification...
[     2.801][MainProcess][INFO] File read
[     2.802][MainProcess][DEBUG] Reading input files...
[     2.811][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i005.csv: ['int64', 'string', 'int64']
[     2.817][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o005.csv: ['int64', 'string', 'int64']
[     2.818][MainProcess][INFO] Parsing sketch...
[     2.818][MainProcess][DEBUG] Sketch creation: Line(T1, root=['??'], var=[], children=[Child([0], type=Table, var=[]),Child(['total = max(total)'], type=Unknown, var=[]),Child(['customer'], type=Unknown, var=[])])
[     2.818][MainProcess][DEBUG] Sketch creation: Line(T2, root=['??'], var=[], children=[Child([0], type=Table, var=[]),Child(['id = min(id)'], type=Unknown, var=[]),Child(['customer, total'], type=Unknown, var=[])])
[     2.818][MainProcess][DEBUG] Sketch creation: Line(T3, root=['??'], var=[], children=[Child([0], type=Line, var=[]),Child([1], type=Line, var=[])])
[     7.219][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 486, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 147186, 'filter': 7650, 'summarise': 56, 'mutate': 8}
[     7.219][MainProcess][DEBUG] {'natural_join': 6.4349236174566605e-06, 'natural_join3': 6.4349236174566605e-06, 'natural_join4': 6.4349236174566605e-06, 'inner_join': 0.003127372878083937, 'anti_join': 4.5044465322196625e-05, 'left_join': 6.4349236174566605e-06, 'union': 6.4349236174566605e-06, 'intersect': 1.9304770852369983e-05, 'semi_join': 6.4349236174566605e-06, 'cross_join': 0.9471306675589761, 'filter': 0.04922716567354345, 'summarise': 0.000360355722577573, 'mutate': 5.1479388939653284e-05}
[     7.219][MainProcess][DEBUG] {'natural_join': 6.4349236174566605e-06, 'natural_join3': 6.4349236174566605e-06, 'natural_join4': 6.4349236174566605e-06, 'inner_join': 0.003127372878083937, 'anti_join': 4.5044465322196625e-05, 'left_join': 6.4349236174566605e-06, 'union': 6.4349236174566605e-06, 'intersect': 1.9304770852369983e-05, 'semi_join': 6.4349236174566605e-06, 'cross_join': 0.9471306675589761, 'filter': 0.04922716567354345, 'summarise': 0.000360355722577573, 'mutate': 5.1479388939653284e-05}
[     7.219][MainProcess][INFO] Building synthesizer...
[     7.251][MainProcess][DEBUG] [Line(T1, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([0], type=Table, var=[[155354], [155348], [14, 18, 504]]),Child(['total = max(total)'], type=Unknown, var=[[155354], [155348], [14, 18, 504]]),Child(['customer'], type=Unknown, var=[[155354], [155348], [14, 18, 504]]),Child([None], type=None, var=[0])]), Line(T2, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([0], type=Table, var=[[155354], [155350], [22, 508]]),Child(['id = min(id)'], type=Unknown, var=[[155354], [155350], [22, 508]]),Child(['customer, total'], type=Unknown, var=[[155354], [155350], [22, 508]]),Child([None], type=None, var=[0])]), Line(T3, root=['??'], var=[1, 6, 7, 9], children=[Child([0], type=Line, var=[[155356], [155357]]),Child([1], type=Line, var=[[155356], [155357]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     8.471][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 229 constraints
[     8.485][MainProcess][DEBUG] Enumeration time: 1.265810251235962
[     8.601][MainProcess][DEBUG] Synthesis time: 0.11606407165527344
[     8.602][MainProcess][INFO] Solution found: [summarise(input0, 'total = max(total)', 'customer'), summarise(input0, 'id = min(id)', 'customer,total'), semi_join(line1, line0)]
[     8.627][MainProcess][DEBUG] Solution found using process 0
[     8.628][MainProcess][INFO] Statistics:
[     8.628][MainProcess][INFO] 	Attempted programs: 6 (approx)
[     8.628][MainProcess][INFO] 		Rejected: 5 (approx)
[     8.628][MainProcess][INFO] 		Failed: 0 (approx)
[     8.628][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     8.628][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     8.628][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     8.628][MainProcess][INFO] 	Total time spent in enumerator init: 1.265810 (approx)
[     8.628][MainProcess][INFO] 	Total time spent in enumerator: 0.014542 (approx)
[     8.628][MainProcess][INFO] 		Enumerated 412.588311 programs/s avg. (just enumeration time)
[     8.628][MainProcess][INFO] 		Enumerated 0.770068 programs/s avg. (overall)
[     8.628][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.093284 (approx)
[     8.628][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.006973 (approx)
[     8.629][MainProcess][INFO] Solution found: [summarise(input0, 'total = max(total)', 'customer'), summarise(input0, 'id = min(id)', 'customer,total'), semi_join(line1, line0)]
[     8.629][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i005 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i005.csv", col_types = cols("id" = col_integer(),"customer" = col_character(),"total" = col_integer()))
df_i005 <- copy_to(con, df_i005)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o005.csv", col_types = cols("minid" = col_integer(),"customer" = col_character(),"maxtotal" = col_integer()))

df9 <- df_i005 %>% group_by(customer) %>% summarise(total = max(total)) %>% ungroup()
df10 <- df_i005 %>% group_by(customer,total) %>% summarise(id = min(id)) %>% ungroup()
df11 <- semi_join(df10, df9, na_matches="never")
out <- df11 %>% select(minid = id, customer, maxtotal = total)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id AS minid,
       customer,
       total AS maxtotal
FROM
  (SELECT *
   FROM
     (SELECT customer,
             total,
             MIN(id) AS id
      FROM df_i005
      GROUP BY customer,
               total) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT customer,
                  MAX(total) AS total
           FROM df_i005
           GROUP BY customer) AS RHS
        WHERE (LHS.customer = RHS.customer
               AND LHS.total = RHS.total) ))
