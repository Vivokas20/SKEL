[     2.293][MainProcess][INFO] Parsing specification...
[     2.299][MainProcess][INFO] File read
[     2.301][MainProcess][DEBUG] Reading input files...
[     2.312][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040.csv: ['int64', 'int64', 'string', 'string', 'string']
[     2.320][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040_o.csv: ['int64', 'int64', 'string', 'string', 'string']
[     2.320][MainProcess][INFO] Parsing sketch...
[     2.320][MainProcess][DEBUG] Sketch creation: Line(T1, root=['??'], var=[], children=[Child([0], type=Table, var=[]),Child(['n_distinct = n_distinct(action)'], type=Unknown, var=[]),Child(['first_name, last_name'], type=Unknown, var=[])])
[     2.320][MainProcess][DEBUG] Sketch creation: Line(T2, root=['??'], var=[], children=[Child([0], type=Line, var=[]),Child(['n_distinct >= 2'], type=Unknown, var=[])])
[     2.321][MainProcess][DEBUG] Sketch creation: Line(T3, root=['??'], var=[], children=[Child([0], type=Table, var=[]),Child([1], type=Line, var=[])])
[     2.363][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 123, 'anti_join': 16, 'left_join': 1, 'union': 1, 'intersect': 5, 'semi_join': 1, 'cross_join': 32, 'filter': 6, 'summarise': 16, 'mutate': 1}
[     2.363][MainProcess][DEBUG] {'natural_join': 0.004878048780487805, 'natural_join3': 0.004878048780487805, 'natural_join4': 0.004878048780487805, 'inner_join': 0.6, 'anti_join': 0.07804878048780488, 'left_join': 0.004878048780487805, 'union': 0.004878048780487805, 'intersect': 0.024390243902439025, 'semi_join': 0.004878048780487805, 'cross_join': 0.15609756097560976, 'filter': 0.02926829268292683, 'summarise': 0.07804878048780488, 'mutate': 0.004878048780487805}
[     2.363][MainProcess][DEBUG] {'natural_join': 0.004878048780487805, 'natural_join3': 0.004878048780487805, 'natural_join4': 0.004878048780487805, 'inner_join': 0.6, 'anti_join': 0.07804878048780488, 'left_join': 0.004878048780487805, 'union': 0.004878048780487805, 'intersect': 0.024390243902439025, 'semi_join': 0.004878048780487805, 'cross_join': 0.15609756097560976, 'filter': 0.02926829268292683, 'summarise': 0.07804878048780488, 'mutate': 0.004878048780487805}
[     2.363][MainProcess][INFO] Building synthesizer...
[     2.365][MainProcess][DEBUG] [Line(T1, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([0], type=Table, var=[[197], [196], [30, 153]]),Child(['n_distinct = n_distinct(action)'], type=Unknown, var=[[197], [196], [30, 153]]),Child(['first_name, last_name'], type=Unknown, var=[[197], [196], [30, 153]]),Child([None], type=None, var=[0])]), Line(T2, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([0], type=Line, var=[[199], [193]]),Child(['n_distinct >= 2'], type=Unknown, var=[[199], [193]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['??'], var=[1, 6, 7, 9], children=[Child([0], type=Table, var=[[197], [200]]),Child([1], type=Line, var=[[197], [200]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.535][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 230 constraints
[     2.548][MainProcess][DEBUG] Enumeration time: 0.18434882164001465
[     2.674][MainProcess][DEBUG] Synthesis time: 0.12665867805480957
[     2.675][MainProcess][INFO] Solution found: [summarise(input0, 'n_distinct = n_distinct(action)', 'first_name,last_name'), filter(line0, 'n_distinct >= 2'), natural_join(input0, line1)]
[     2.676][MainProcess][DEBUG] Solution found using process 0
[     2.676][MainProcess][INFO] Statistics:
[     2.676][MainProcess][INFO] 	Attempted programs: 4 (approx)
[     2.676][MainProcess][INFO] 		Rejected: 3 (approx)
[     2.676][MainProcess][INFO] 		Failed: 0 (approx)
[     2.676][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.676][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.677][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.677][MainProcess][INFO] 	Total time spent in enumerator init: 0.184349 (approx)
[     2.677][MainProcess][INFO] 	Total time spent in enumerator: 0.010363 (approx)
[     2.677][MainProcess][INFO] 		Enumerated 386.002577 programs/s avg. (just enumeration time)
[     2.677][MainProcess][INFO] 		Enumerated 2.017938 programs/s avg. (overall)
[     2.677][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.108701 (approx)
[     2.677][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.006243 (approx)
[     2.677][MainProcess][INFO] Solution found: [summarise(input0, 'n_distinct = n_distinct(action)', 'first_name,last_name'), filter(line0, 'n_distinct >= 2'), natural_join(input0, line1)]
[     2.677][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_040 <- read_csv("tests-examples/scythe/recent_posts/tables/040.csv", col_types = cols("id" = col_integer(),"timestamp" = col_integer(),"first_name" = col_character(),"last_name" = col_character(),"action" = col_character()))
df_040 <- copy_to(con, df_040)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/040_o.csv", col_types = cols("id" = col_integer(),"timestamp" = col_integer(),"first_name" = col_character(),"last_name" = col_character(),"action" = col_character()))

df7 <- df_040 %>% group_by(first_name,last_name) %>% summarise(n_distinct = n_distinct(action)) %>% ungroup()
df8 <- df7 %>% filter(n_distinct >= 2)
df9 <- inner_join(df_040, df8, na_matches="never")
out <- df9 %>% select(id, timestamp, first_name, last_name, action)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       TIMESTAMP,
       first_name,
       last_name,
       action
FROM
  (SELECT id,
          TIMESTAMP,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          action,
          n_distinct
   FROM df_040 AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT first_name,
                last_name,
                COUNT(DISTINCT action) AS n_distinct
         FROM df_040
         GROUP BY first_name,
                  last_name)
      WHERE (n_distinct >= 2.0)) AS RHS ON (LHS.first_name = RHS.first_name
                                            AND LHS.last_name = RHS.last_name))
