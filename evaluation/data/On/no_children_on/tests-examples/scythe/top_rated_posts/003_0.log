[     2.369][MainProcess][INFO] Parsing specification...
[     2.374][MainProcess][INFO] File read
[     2.375][MainProcess][DEBUG] Reading input files...
[     2.383][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i003.csv: ['string']
[     2.388][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o003.csv: ['string']
[     2.388][MainProcess][INFO] Parsing sketch...
[     2.388][MainProcess][DEBUG] Sketch creation: Line(T1, root=['mutate'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[])])
[     2.431][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 3, 'anti_join': 2, 'left_join': 1, 'union': 1, 'intersect': 1, 'semi_join': 1, 'cross_join': 130, 'unite': 1, 'summarise': 8, 'mutate': 4}
[     2.431][MainProcess][DEBUG] {'natural_join': 0.0064516129032258064, 'natural_join3': 0.0064516129032258064, 'natural_join4': 0.0064516129032258064, 'inner_join': 0.01935483870967742, 'anti_join': 0.012903225806451613, 'left_join': 0.0064516129032258064, 'union': 0.0064516129032258064, 'intersect': 0.0064516129032258064, 'semi_join': 0.0064516129032258064, 'cross_join': 0.8387096774193549, 'unite': 0.0064516129032258064, 'summarise': 0.05161290322580645, 'mutate': 0.025806451612903226}
[     2.431][MainProcess][DEBUG] {'natural_join': 0.0064516129032258064, 'natural_join3': 0.0064516129032258064, 'natural_join4': 0.0064516129032258064, 'inner_join': 0.01935483870967742, 'anti_join': 0.012903225806451613, 'left_join': 0.0064516129032258064, 'union': 0.0064516129032258064, 'intersect': 0.0064516129032258064, 'semi_join': 0.0064516129032258064, 'cross_join': 0.8387096774193549, 'unite': 0.0064516129032258064, 'summarise': 0.05161290322580645, 'mutate': 0.025806451612903226}
[     2.431][MainProcess][INFO] Building synthesizer...
[     2.433][MainProcess][DEBUG] [Line(T1, root=['mutate'], var=[13], children=[Child(['??'], type=Table, var=[154]),Child(['??'], type=SummariseCondition, var=[150, 151, 152, 153]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.467][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 49 constraints
[     2.470][MainProcess][DEBUG] Enumeration time: 0.038155317306518555
[     2.539][MainProcess][DEBUG] Synthesis time: 0.06957459449768066
[     2.540][MainProcess][INFO] Solution found: [mutate(input0, "concatc = string_agg(c, ', ')")]
[     2.540][MainProcess][DEBUG] Solution found using process 0
[     2.540][MainProcess][INFO] Statistics:
[     2.541][MainProcess][INFO] 	Attempted programs: 4 (approx)
[     2.541][MainProcess][INFO] 		Rejected: 3 (approx)
[     2.541][MainProcess][INFO] 		Failed: 0 (approx)
[     2.541][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.541][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.541][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.541][MainProcess][INFO] 	Total time spent in enumerator init: 0.038155 (approx)
[     2.541][MainProcess][INFO] 	Total time spent in enumerator: 0.003489 (approx)
[     2.541][MainProcess][INFO] 		Enumerated 1146.376221 programs/s avg. (just enumeration time)
[     2.541][MainProcess][INFO] 		Enumerated 2.161663 programs/s avg. (overall)
[     2.541][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.063086 (approx)
[     2.541][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.001878 (approx)
[     2.541][MainProcess][INFO] Solution found: [mutate(input0, "concatc = string_agg(c, ', ')")]
[     2.541][MainProcess][INFO] Solution size: 1

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i003 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i003.csv", col_types = cols("c" = col_character()))
df_i003 <- copy_to(con, df_i003)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o003.csv", col_types = cols("concatc" = col_character()))

string_agg <- function(v,s) {paste0("", Reduce(function(x, y) paste(x, y, sep = s), v))}

df5 <- df_i003 %>% mutate(concatc = string_agg(c, ', '))
out <- df5 %>% select(concatc) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT string_agg(`c`, ', ') AS concatc
FROM df_i003
