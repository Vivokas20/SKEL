[     6.316][MainProcess][INFO] Parsing specification...
[     6.324][MainProcess][INFO] File read
[     6.326][MainProcess][DEBUG] Reading input files...
[     6.342][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/028.csv: ['int64', 'string']
[     6.347][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/028_o.csv: ['int64', 'int64']
[     6.347][MainProcess][INFO] Parsing sketch...
[     6.347][MainProcess][DEBUG] Sketch creation: Line(T1, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     6.348][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     6.348][MainProcess][DEBUG] Sketch creation: Line(T3, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     6.348][MainProcess][DEBUG] Sketch creation: Line(T4, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     6.436][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 7, 'anti_join': 4, 'left_join': 1, 'union': 1, 'intersect': 2, 'semi_join': 1, 'cross_join': 1256, 'filter': 234, 'summarise': 4, 'mutate': 1}
[     6.436][MainProcess][DEBUG] {'natural_join': 0.0006605019815059445, 'natural_join3': 0.0006605019815059445, 'natural_join4': 0.0006605019815059445, 'inner_join': 0.004623513870541612, 'anti_join': 0.002642007926023778, 'left_join': 0.0006605019815059445, 'union': 0.0006605019815059445, 'intersect': 0.001321003963011889, 'semi_join': 0.0006605019815059445, 'cross_join': 0.8295904887714664, 'filter': 0.154557463672391, 'summarise': 0.002642007926023778, 'mutate': 0.0006605019815059445}
[     6.436][MainProcess][DEBUG] {'natural_join': 0.0006605019815059445, 'natural_join3': 0.0006605019815059445, 'natural_join4': 0.0006605019815059445, 'inner_join': 0.004623513870541612, 'anti_join': 0.002642007926023778, 'left_join': 0.0006605019815059445, 'union': 0.0006605019815059445, 'intersect': 0.001321003963011889, 'semi_join': 0.0006605019815059445, 'cross_join': 0.8295904887714664, 'filter': 0.154557463672391, 'summarise': 0.002642007926023778, 'mutate': 0.0006605019815059445}
[     6.436][MainProcess][INFO] Building synthesizer...
[     6.438][MainProcess][DEBUG] [Line(T1, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[1518]),Child(['??'], type=FilterCondition, var=[1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[1518]),Child(['??'], type=FilterCondition, var=[1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[1518]),Child(['??'], type=Table, var=[1518]),Child(['??'], type=JoinCondition, var=[20, 21, 22, 23, 24, 25, 26]),Child([None], type=None, var=[0])]), Line(T4, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[1518]),Child(['??'], type=SummariseCondition, var=[1517]),Child(['??'], type=Cols, var=[16, 17, 18, 19]),Child([None], type=None, var=[0])])]
[     7.151][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 238 constraints
[     7.203][MainProcess][DEBUG] Enumeration time: 0.7669134140014648
[   134.150][MainProcess][DEBUG] Synthesis time: 126.94632601737976
[   134.150][MainProcess][INFO] Solution found: [filter(input0, 'Member == 1'), filter(input0, 'Member != 1'), inner_join(line1, line0, 'Element'), summarise(line2, 'n = n()', 'Member')]
[   134.307][MainProcess][DEBUG] Solution found using process 0
[   134.308][MainProcess][INFO] Statistics:
[   134.308][MainProcess][INFO] 	Attempted programs: 6691 (approx)
[   134.308][MainProcess][INFO] 		Rejected: 6690 (approx)
[   134.308][MainProcess][INFO] 		Failed: 0 (approx)
[   134.308][MainProcess][INFO] 		Empty outputs: 1078 (16.1%) (approx)
[   134.308][MainProcess][INFO] 		Redundant lines: 0 (approx)
[   134.308][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[   134.308][MainProcess][INFO] 	Total time spent in enumerator init: 0.766913 (approx)
[   134.308][MainProcess][INFO] 	Total time spent in enumerator: 75.075757 (approx)
[   134.308][MainProcess][INFO] 		Enumerated 89.123310 programs/s avg. (just enumeration time)
[   134.308][MainProcess][INFO] 		Enumerated 50.475855 programs/s avg. (overall)
[   134.309][MainProcess][INFO] 	Total time spent in evaluation & testing: 44.875264 (approx)
[   134.309][MainProcess][INFO] 	Total time spent blocking cubes/programs: 6.950370 (approx)
[   134.309][MainProcess][INFO] Solution found: [filter(input0, 'Member == 1'), filter(input0, 'Member != 1'), inner_join(line1, line0, 'Element'), summarise(line2, 'n = n()', 'Member')]
[   134.309][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_028 <- read_csv("tests-examples/scythe/recent_posts/tables/028.csv", col_types = cols("Member" = col_integer(),"Element" = col_character()))
df_028 <- copy_to(con, df_028)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/028_o.csv", col_types = cols("c1" = col_integer(),"c2" = col_integer()))

df4420 <- df_028 %>% filter(Member == 1)
df4421 <- df_028 %>% filter(Member != 1)
df4422 <- inner_join(df4421, df4420, by=c('Element'), suffix = c('', '.other'), na_matches='never')
df4423 <- df4422 %>% group_by(Member) %>% summarise(n = n()) %>% ungroup()
out <- df4423 %>% select(c1 = Member, c2 = n) %>% arrange(c2)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Member AS c1,
       n AS c2
FROM
  (SELECT Member,
          COUNT(*) AS n
   FROM
     (SELECT LHS.Member AS Member,
             LHS.Element AS Element,
             RHS.Member AS Member_other
      FROM
        (SELECT *
         FROM df_028
         WHERE (Member != 1.0)) AS LHS
      INNER JOIN
        (SELECT *
         FROM df_028
         WHERE (Member = 1.0)) AS RHS ON (LHS.Element = RHS.Element))
   GROUP BY Member)
ORDER BY c2
