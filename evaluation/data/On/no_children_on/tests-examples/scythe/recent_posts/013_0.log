[     6.215][MainProcess][INFO] Parsing specification...
[     6.221][MainProcess][INFO] File read
[     6.222][MainProcess][DEBUG] Reading input files...
[     6.238][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_1.csv: ['int64', 'string']
[     6.244][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_2.csv: ['int64', 'string']
[     6.251][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_o.csv: ['int64', 'string', 'string', 'int64']
[     6.251][MainProcess][INFO] Parsing sketch...
[     6.251][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     6.251][MainProcess][DEBUG] Sketch creation: Line(T2, root=['cross_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=CrossJoinCondition, var=[])])
[     6.312][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 40, 'anti_join': 28, 'left_join': 4, 'union': 4, 'intersect': 12, 'semi_join': 4, 'cross_join': 1120}
[     6.312][MainProcess][DEBUG] {'natural_join': 0.0032258064516129032, 'natural_join3': 0.0064516129032258064, 'natural_join4': 0.012903225806451613, 'inner_join': 0.03225806451612903, 'anti_join': 0.02258064516129032, 'left_join': 0.0032258064516129032, 'union': 0.0032258064516129032, 'intersect': 0.00967741935483871, 'semi_join': 0.0032258064516129032, 'cross_join': 0.9032258064516129}
[     6.312][MainProcess][DEBUG] {'natural_join': 0.0032258064516129032, 'natural_join3': 0.0064516129032258064, 'natural_join4': 0.012903225806451613, 'inner_join': 0.03225806451612903, 'anti_join': 0.02258064516129032, 'left_join': 0.0032258064516129032, 'union': 0.0032258064516129032, 'intersect': 0.00967741935483871, 'semi_join': 0.0032258064516129032, 'cross_join': 0.9032258064516129}
[     6.312][MainProcess][INFO] Building synthesizer...
[     6.314][MainProcess][DEBUG] [Line(T1, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[311, 312]),Child(['??'], type=Table, var=[311, 312]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['cross_join'], var=[10], children=[Child(['??'], type=Table, var=[311, 312]),Child(['??'], type=Table, var=[311, 312]),Child(['??'], type=CrossJoinCondition, var=[31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310]),Child([None], type=None, var=[0])])]
[     6.524][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 93 constraints
[     6.541][MainProcess][DEBUG] Enumeration time: 0.22893214225769043
[     7.492][MainProcess][DEBUG] Synthesis time: 0.9503834247589111
[     7.492][MainProcess][INFO] Solution found: [natural_join(input0, input1), cross_join(line0, input0, 'ID != ID.other & Company_group == Name.other')]
[     7.494][MainProcess][DEBUG] Solution found using process 0
[     7.494][MainProcess][INFO] Statistics:
[     7.494][MainProcess][INFO] 	Attempted programs: 45 (approx)
[     7.494][MainProcess][INFO] 		Rejected: 44 (approx)
[     7.495][MainProcess][INFO] 		Failed: 0 (approx)
[     7.495][MainProcess][INFO] 		Empty outputs: 6 (13.3%) (approx)
[     7.495][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     7.495][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     7.495][MainProcess][INFO] 	Total time spent in enumerator init: 0.228932 (approx)
[     7.495][MainProcess][INFO] 	Total time spent in enumerator: 0.083329 (approx)
[     7.495][MainProcess][INFO] 		Enumerated 540.025235 programs/s avg. (just enumeration time)
[     7.495][MainProcess][INFO] 		Enumerated 7.809628 programs/s avg. (overall)
[     7.495][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.829428 (approx)
[     7.495][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.036699 (approx)
[     7.495][MainProcess][INFO] Solution found: [natural_join(input0, input1), cross_join(line0, input0, 'ID != ID.other & Company_group == Name.other')]
[     7.495][MainProcess][INFO] Solution size: 2

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_013_1 <- read_csv("tests-examples/scythe/recent_posts/tables/013_1.csv", col_types = cols("ID" = col_integer(),"Name" = col_character()))
df_013_1 <- copy_to(con, df_013_1)
df_013_2 <- read_csv("tests-examples/scythe/recent_posts/tables/013_2.csv", col_types = cols("ID" = col_integer(),"Company_group" = col_character()))
df_013_2 <- copy_to(con, df_013_2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/013_o.csv", col_types = cols("ID" = col_integer(),"Name" = col_character(),"RootName" = col_character(),"RootId" = col_integer()))

df47 <- inner_join(df_013_1, df_013_2, na_matches="never")
df48 <- full_join(df47, df_013_1, by=character(), suffix = c("", ".other"), na_matches="never") %>% filter(ID != ID.other & Company_group == Name.other)
out <- df48 %>% select(ID, Name, RootName = Company_group, RootId = ID.other)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       Name,
       Company_group AS RootName,
       ID_other AS RootId
FROM
  (SELECT LHS.ID AS ID,
          LHS.Name AS Name,
          Company_group,
          RHS.ID AS ID_other,
          RHS.Name AS Name_other
   FROM
     (SELECT LHS.ID AS ID,
             Name,
             Company_group
      FROM df_013_1 AS LHS
      INNER JOIN df_013_2 AS RHS ON (LHS.ID = RHS.ID)) AS LHS
   CROSS JOIN df_013_1 AS RHS)
WHERE (ID != ID_other
       AND Company_group = Name_other)
