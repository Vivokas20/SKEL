[     2.526][MainProcess][INFO] Parsing specification...
[     2.532][MainProcess][INFO] File read
[     2.533][MainProcess][DEBUG] Reading input files...
[     2.542][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-1.txt: ['string', 'string']
[     2.548][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-2.txt: ['string', 'string']
[     2.554][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-3.txt: ['string', 'string']
[     2.559][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20.out: ['string']
[     2.559][MainProcess][INFO] Parsing sketch...
[     2.559][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.559][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.559][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.559][MainProcess][DEBUG] Sketch creation: Line(T4, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.609][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 738, 'anti_join': 99, 'left_join': 9, 'union': 9, 'intersect': 36, 'semi_join': 9, 'cross_join': 18, 'filter': 36}
[     2.609][MainProcess][DEBUG] {'natural_join': 0.008403361344537815, 'natural_join3': 0.025210084033613446, 'natural_join4': 0.07563025210084033, 'inner_join': 0.6890756302521008, 'anti_join': 0.09243697478991597, 'left_join': 0.008403361344537815, 'union': 0.008403361344537815, 'intersect': 0.03361344537815126, 'semi_join': 0.008403361344537815, 'cross_join': 0.01680672268907563, 'filter': 0.03361344537815126}
[     2.609][MainProcess][DEBUG] {'natural_join': 0.008403361344537815, 'natural_join3': 0.025210084033613446, 'natural_join4': 0.07563025210084033, 'inner_join': 0.6890756302521008, 'anti_join': 0.09243697478991597, 'left_join': 0.008403361344537815, 'union': 0.008403361344537815, 'intersect': 0.03361344537815126, 'semi_join': 0.008403361344537815, 'cross_join': 0.01680672268907563, 'filter': 0.03361344537815126}
[     2.609][MainProcess][INFO] Building synthesizer...
[     2.611][MainProcess][DEBUG] [Line(T1, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=FilterCondition, var=[111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=FilterCondition, var=[111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=JoinCondition, var=[27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]),Child([None], type=None, var=[0])])]
[     2.835][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 225 constraints
[     2.849][MainProcess][DEBUG] Enumeration time: 0.23990702629089355
[    60.005][MainProcess][DEBUG] Synthesis time: 57.155219078063965
[    60.005][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "color != 'red'"), filter(line0, "color == 'red' & color != 'green'"), inner_join(line1, line2, 'S_key,S_name')]
[    60.023][MainProcess][DEBUG] Solution found using process 0
[    60.023][MainProcess][INFO] Statistics:
[    60.024][MainProcess][INFO] 	Attempted programs: 3812 (approx)
[    60.024][MainProcess][INFO] 		Rejected: 3811 (approx)
[    60.024][MainProcess][INFO] 		Failed: 0 (approx)
[    60.024][MainProcess][INFO] 		Empty outputs: 3148 (82.6%) (approx)
[    60.024][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    60.024][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    60.024][MainProcess][INFO] 	Total time spent in enumerator init: 0.239907 (approx)
[    60.024][MainProcess][INFO] 	Total time spent in enumerator: 23.726727 (approx)
[    60.024][MainProcess][INFO] 		Enumerated 160.662699 programs/s avg. (just enumeration time)
[    60.024][MainProcess][INFO] 		Enumerated 64.370945 programs/s avg. (overall)
[    60.024][MainProcess][INFO] 	Total time spent in evaluation & testing: 29.485539 (approx)
[    60.024][MainProcess][INFO] 	Total time spent blocking cubes/programs: 3.921942 (approx)
[    60.024][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "color != 'red'"), filter(line0, "color == 'red' & color != 'green'"), inner_join(line1, line2, 'S_key,S_name')]
[    60.025][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_20_1 <- read_csv("tests-examples/textbook/tables/20-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_20_1 <- copy_to(con, df_20_1)
df_20_2 <- read_csv("tests-examples/textbook/tables/20-2.txt", col_types = cols("P_id" = col_character(),"color" = col_character()))
df_20_2 <- copy_to(con, df_20_2)
df_20_3 <- read_csv("tests-examples/textbook/tables/20-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_20_3 <- copy_to(con, df_20_3)
expected_output <- read_csv("tests-examples/textbook/tables/20.out", col_types = cols("S_name" = col_character()))

df3066 <- inner_join(df_20_1, df_20_2, na_matches="never") %>% inner_join(df_20_3, na_matches="never")
df3067 <- df3066 %>% filter(color != 'red')
df3068 <- df3066 %>% filter(color == 'red' & color != 'green')
df3069 <- inner_join(df3067, df3068, by=c('S_key','S_name'), suffix = c('', '.other'), na_matches='never')
out <- df3069 %>% select(S_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_name` AS `S_name`,
          `RHS`.`P_id` AS `P_id_other`,
          `RHS`.`color` AS `color_other`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `P_id`,
                `color`,
                `S_name`
         FROM
           (SELECT `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `color`
            FROM `df_20_1` AS `LHS`
            INNER JOIN `df_20_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
         INNER JOIN `df_20_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`color` != 'red')) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `P_id`,
                `color`,
                `S_name`
         FROM
           (SELECT `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `color`
            FROM `df_20_1` AS `LHS`
            INNER JOIN `df_20_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
         INNER JOIN `df_20_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`color` = 'red'
             AND `color` != 'green')) AS RHS ON (LHS.S_key = RHS.S_key
                                                 AND LHS.S_name = RHS.S_name))
