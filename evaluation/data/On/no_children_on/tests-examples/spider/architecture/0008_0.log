[     2.374][MainProcess][INFO] Parsing specification...
[     2.379][MainProcess][INFO] File read
[     2.380][MainProcess][DEBUG] Reading input files...
[     2.390][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/architect.csv: ['int64', 'string', 'string', 'string']
[     2.397][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/mill.csv: ['int64', 'int64', 'string', 'string', 'string', 'int64', 'string']
[     2.402][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/0008.csv: ['string']
[     2.403][MainProcess][INFO] Parsing sketch...
[     2.403][MainProcess][DEBUG] Sketch creation: Line(T1, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.403][MainProcess][DEBUG] Sketch creation: Line(T2, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.463][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 3276, 'anti_join': 184, 'left_join': 4, 'union': 4, 'intersect': 36, 'semi_join': 4, 'cross_join': 8, 'filter': 24}
[     2.464][MainProcess][DEBUG] {'natural_join': 0.0011210762331838565, 'natural_join3': 0.002242152466367713, 'natural_join4': 0.004484304932735426, 'inner_join': 0.9181614349775785, 'anti_join': 0.0515695067264574, 'left_join': 0.0011210762331838565, 'union': 0.0011210762331838565, 'intersect': 0.010089686098654708, 'semi_join': 0.0011210762331838565, 'cross_join': 0.002242152466367713, 'filter': 0.006726457399103139}
[     2.464][MainProcess][DEBUG] {'natural_join': 0.0011210762331838567, 'natural_join3': 0.0022421524663677134, 'natural_join4': 0.004484304932735427, 'inner_join': 0.9181614349775786, 'anti_join': 0.05156950672645741, 'left_join': 0.0011210762331838567, 'union': 0.0011210762331838567, 'intersect': 0.01008968609865471, 'semi_join': 0.0011210762331838567, 'cross_join': 0.0022421524663677134, 'filter': 0.00672645739910314}
[     2.464][MainProcess][INFO] Building synthesizer...
[     2.466][MainProcess][DEBUG] [Line(T1, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[900, 901]),Child(['??'], type=FilterCondition, var=[888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[900, 901]),Child(['??'], type=Table, var=[900, 901]),Child(['??'], type=JoinCondition, var=[67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885]),Child([None], type=None, var=[0])])]
[     2.895][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 99 constraints
[     2.937][MainProcess][DEBUG] Enumeration time: 0.47351789474487305
[     3.360][MainProcess][DEBUG] Synthesis time: 0.4220407009124756
[     3.360][MainProcess][INFO] Solution found: [filter(input0, "nationality == 'American' & nationality != 'Canadian'"), inner_join(input1, input1, 'id = architect_id,name = name')]
[     3.364][MainProcess][DEBUG] Solution found using process 0
[     3.365][MainProcess][INFO] Statistics:
[     3.365][MainProcess][INFO] 	Attempted programs: 23 (approx)
[     3.365][MainProcess][INFO] 		Rejected: 22 (approx)
[     3.365][MainProcess][INFO] 		Failed: 0 (approx)
[     3.365][MainProcess][INFO] 		Empty outputs: 22 (95.7%) (approx)
[     3.365][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     3.365][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     3.365][MainProcess][INFO] 	Total time spent in enumerator init: 0.473518 (approx)
[     3.365][MainProcess][INFO] 	Total time spent in enumerator: 0.048689 (approx)
[     3.365][MainProcess][INFO] 		Enumerated 472.389354 programs/s avg. (just enumeration time)
[     3.365][MainProcess][INFO] 		Enumerated 8.611914 programs/s avg. (overall)
[     3.365][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.354908 (approx)
[     3.366][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.015843 (approx)
[     3.366][MainProcess][INFO] Solution found: [filter(input0, "nationality == 'American' & nationality != 'Canadian'"), inner_join(input1, input1, 'id = architect_id,name = name')]
[     3.366][MainProcess][INFO] Solution size: 2

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_architect <- read_csv("tests-examples/spider/architecture/tables/architect.csv", col_types = cols("id" = col_integer(),"name" = col_character(),"nationality" = col_character(),"gender" = col_character()))
df_architect <- copy_to(con, df_architect)
df_mill <- read_csv("tests-examples/spider/architecture/tables/mill.csv", col_types = cols("architect_id" = col_integer(),"id" = col_integer(),"location" = col_character(),"name" = col_character(),"type" = col_character(),"built_year" = col_integer(),"notes" = col_character()))
df_mill <- copy_to(con, df_mill)
expected_output <- read_csv("tests-examples/spider/architecture/tables/0008.csv", col_types = cols("type" = col_character()))

df25 <- df_architect %>% filter(nationality == 'American' & nationality != 'Canadian')
df26 <- inner_join(df_mill, df_mill, by=c('id' = 'architect_id','name' = 'name'), suffix = c('', '.other'), na_matches='never') %>% mutate(architect_id = id)
out <- df26 %>% select(type) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT TYPE
FROM
  (SELECT LHS.architect_id AS architect_id,
          LHS.id AS id,
          LHS.location AS LOCATION,
          LHS.name AS name,
          LHS.type AS TYPE,
          LHS.built_year AS built_year,
          LHS.notes AS notes,
          RHS.id AS id_other,
          RHS.location AS location_other,
          RHS.type AS type_other,
          RHS.built_year AS built_year_other,
          RHS.notes AS notes_other
   FROM df_mill AS LHS
   INNER JOIN df_mill AS RHS ON (LHS.id = RHS.architect_id
                                 AND LHS.name = RHS.name))
