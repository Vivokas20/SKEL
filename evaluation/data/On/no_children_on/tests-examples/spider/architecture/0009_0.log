[     2.391][MainProcess][INFO] Parsing specification...
[     2.396][MainProcess][INFO] File read
[     2.397][MainProcess][DEBUG] Reading input files...
[     2.407][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/architect.csv: ['int64', 'string', 'string', 'string']
[     2.416][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/bridge.csv: ['int64', 'int64', 'string', 'string', 'Float64', 'Float64']
[     2.421][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/0009.csv: ['int64', 'string']
[     2.422][MainProcess][INFO] Parsing sketch...
[     2.422][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.422][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.422][MainProcess][DEBUG] Sketch creation: Line(T3, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.473][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 1384, 'anti_join': 148, 'left_join': 4, 'union': 4, 'intersect': 32, 'semi_join': 4, 'cross_join': 24, 'filter': 12, 'summarise': 74, 'mutate': 2}
[     2.473][MainProcess][DEBUG] {'natural_join': 0.002331002331002331, 'natural_join3': 0.004662004662004662, 'natural_join4': 0.009324009324009324, 'inner_join': 0.8065268065268065, 'anti_join': 0.08624708624708624, 'left_join': 0.002331002331002331, 'union': 0.002331002331002331, 'intersect': 0.018648018648018648, 'semi_join': 0.002331002331002331, 'cross_join': 0.013986013986013986, 'filter': 0.006993006993006993, 'summarise': 0.04312354312354312, 'mutate': 0.0011655011655011655}
[     2.473][MainProcess][DEBUG] {'natural_join': 0.002331002331002331, 'natural_join3': 0.004662004662004662, 'natural_join4': 0.009324009324009324, 'inner_join': 0.8065268065268065, 'anti_join': 0.08624708624708624, 'left_join': 0.002331002331002331, 'union': 0.002331002331002331, 'intersect': 0.018648018648018648, 'semi_join': 0.002331002331002331, 'cross_join': 0.013986013986013986, 'filter': 0.006993006993006993, 'summarise': 0.04312354312354312, 'mutate': 0.0011655011655011655}
[     2.473][MainProcess][INFO] Building synthesizer...
[     2.475][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[418, 419]),Child(['??'], type=SummariseCondition, var=[417]),Child(['??'], type=Cols, var=[22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[418, 419]),Child(['??'], type=FilterCondition, var=[411, 412, 413, 414, 415, 416]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[418, 419]),Child(['??'], type=Table, var=[418, 419]),Child(['??'], type=JoinCondition, var=[59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404]),Child([None], type=None, var=[0])])]
[     2.758][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 170 constraints
[     2.781][MainProcess][DEBUG] Enumeration time: 0.3076364994049072
[   433.329][MainProcess][DEBUG] Synthesis time: 430.5481903553009
[   433.329][MainProcess][INFO] Solution found: [summarise(input1, 'n = n()', 'architect_id'), filter(line0, 'n >= 3'), inner_join(input0, line1, 'id = architect_id')]
[   433.500][MainProcess][DEBUG] Solution found using process 0
[   433.501][MainProcess][INFO] Statistics:
[   433.501][MainProcess][INFO] 	Attempted programs: 16246 (approx)
[   433.501][MainProcess][INFO] 		Rejected: 16245 (approx)
[   433.501][MainProcess][INFO] 		Failed: 0 (approx)
[   433.501][MainProcess][INFO] 		Empty outputs: 12729 (78.4%) (approx)
[   433.501][MainProcess][INFO] 		Redundant lines: 0 (approx)
[   433.501][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[   433.501][MainProcess][INFO] 	Total time spent in enumerator init: 0.307636 (approx)
[   433.501][MainProcess][INFO] 	Total time spent in enumerator: 357.984726 (approx)
[   433.502][MainProcess][INFO] 		Enumerated 45.381825 programs/s avg. (just enumeration time)
[   433.502][MainProcess][INFO] 		Enumerated 37.537737 programs/s avg. (overall)
[   433.502][MainProcess][INFO] 	Total time spent in evaluation & testing: 59.482074 (approx)
[   433.502][MainProcess][INFO] 	Total time spent blocking cubes/programs: 12.969884 (approx)
[   433.502][MainProcess][INFO] Solution found: [summarise(input1, 'n = n()', 'architect_id'), filter(line0, 'n >= 3'), inner_join(input0, line1, 'id = architect_id')]
[   433.502][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_architect <- read_csv("tests-examples/spider/architecture/tables/architect.csv", col_types = cols("id" = col_integer(),"name" = col_character(),"nationality" = col_character(),"gender" = col_character()))
df_architect <- copy_to(con, df_architect)
df_bridge <- read_csv("tests-examples/spider/architecture/tables/bridge.csv", col_types = cols("architect_id" = col_integer(),"id" = col_integer(),"name" = col_character(),"location" = col_character(),"length_meters" = col_double(),"length_feet" = col_double()))
df_bridge <- copy_to(con, df_bridge)
expected_output <- read_csv("tests-examples/spider/architecture/tables/0009.csv", col_types = cols("id" = col_integer(),"name" = col_character()))

df2268 <- df_bridge %>% group_by(architect_id) %>% summarise(n = n()) %>% ungroup()
df2269 <- df2268 %>% filter(n >= 3)
df2270 <- inner_join(df_architect, df2269, by=c('id' = 'architect_id'), suffix = c('', '.other'), na_matches='never') %>% mutate(architect_id = id)
out <- df2270 %>% select(id, name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       name
FROM
  (SELECT id,
          name,
          nationality,
          gender,
          n
   FROM df_architect AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT architect_id,
                COUNT(*) AS n
         FROM df_bridge
         GROUP BY architect_id)
      WHERE (n >= 3.0)) AS RHS ON (LHS.id = RHS.architect_id))
