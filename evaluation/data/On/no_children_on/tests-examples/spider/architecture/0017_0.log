[     2.377][MainProcess][INFO] Parsing specification...
[     2.381][MainProcess][INFO] File read
[     2.382][MainProcess][DEBUG] Reading input files...
[     2.392][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/architect.csv: ['int64', 'string', 'string', 'string']
[     2.398][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/bridge.csv: ['int64', 'int64', 'string', 'string', 'Float64', 'Float64']
[     2.403][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/0017.csv: ['string']
[     2.403][MainProcess][INFO] Parsing sketch...
[     2.403][MainProcess][DEBUG] Sketch creation: Line(T1, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.404][MainProcess][DEBUG] Sketch creation: Line(T2, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.447][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 944, 'anti_join': 148, 'left_join': 4, 'union': 4, 'intersect': 32, 'semi_join': 4, 'cross_join': 128, 'filter': 4}
[     2.447][MainProcess][DEBUG] {'natural_join': 0.0030864197530864196, 'natural_join3': 0.006172839506172839, 'natural_join4': 0.012345679012345678, 'inner_join': 0.7283950617283951, 'anti_join': 0.11419753086419752, 'left_join': 0.0030864197530864196, 'union': 0.0030864197530864196, 'intersect': 0.024691358024691357, 'semi_join': 0.0030864197530864196, 'cross_join': 0.09876543209876543, 'filter': 0.0030864197530864196}
[     2.447][MainProcess][DEBUG] {'natural_join': 0.0030864197530864196, 'natural_join3': 0.006172839506172839, 'natural_join4': 0.012345679012345678, 'inner_join': 0.7283950617283951, 'anti_join': 0.11419753086419752, 'left_join': 0.0030864197530864196, 'union': 0.0030864197530864196, 'intersect': 0.024691358024691357, 'semi_join': 0.0030864197530864196, 'cross_join': 0.09876543209876543, 'filter': 0.0030864197530864196}
[     2.447][MainProcess][INFO] Building synthesizer...
[     2.449][MainProcess][DEBUG] [Line(T1, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[327, 328]),Child(['??'], type=FilterCondition, var=[325, 326]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[327, 328]),Child(['??'], type=Table, var=[327, 328]),Child(['??'], type=JoinCondition, var=[57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292]),Child([None], type=None, var=[0])])]
[     2.611][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 98 constraints
[     2.625][MainProcess][DEBUG] Enumeration time: 0.1775963306427002
[     5.191][MainProcess][DEBUG] Synthesis time: 2.5662360191345215
[     5.192][MainProcess][INFO] Solution found: [filter(input0, "nationality == 'American'"), inner_join(line0, input1, 'id = architect_id')]
[     5.196][MainProcess][DEBUG] Solution found using process 0
[     5.196][MainProcess][INFO] Statistics:
[     5.196][MainProcess][INFO] 	Attempted programs: 222 (approx)
[     5.196][MainProcess][INFO] 		Rejected: 221 (approx)
[     5.196][MainProcess][INFO] 		Failed: 0 (approx)
[     5.196][MainProcess][INFO] 		Empty outputs: 191 (86.0%) (approx)
[     5.196][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     5.197][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     5.197][MainProcess][INFO] 	Total time spent in enumerator init: 0.177596 (approx)
[     5.197][MainProcess][INFO] 	Total time spent in enumerator: 0.387795 (approx)
[     5.197][MainProcess][INFO] 		Enumerated 572.467454 programs/s avg. (just enumeration time)
[     5.197][MainProcess][INFO] 		Enumerated 49.369574 programs/s avg. (overall)
[     5.197][MainProcess][INFO] 	Total time spent in evaluation & testing: 2.042953 (approx)
[     5.197][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.133301 (approx)
[     5.197][MainProcess][INFO] Solution found: [filter(input0, "nationality == 'American'"), inner_join(line0, input1, 'id = architect_id')]
[     5.197][MainProcess][INFO] Solution size: 2

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_architect <- read_csv("tests-examples/spider/architecture/tables/architect.csv", col_types = cols("id" = col_integer(),"name" = col_character(),"nationality" = col_character(),"gender" = col_character()))
df_architect <- copy_to(con, df_architect)
df_bridge <- read_csv("tests-examples/spider/architecture/tables/bridge.csv", col_types = cols("architect_id" = col_integer(),"id" = col_integer(),"name" = col_character(),"location" = col_character(),"length_meters" = col_double(),"length_feet" = col_double()))
df_bridge <- copy_to(con, df_bridge)
expected_output <- read_csv("tests-examples/spider/architecture/tables/0017.csv", col_types = cols("name" = col_character()))

df150 <- df_architect %>% filter(nationality == 'American')
df151 <- inner_join(df150, df_bridge, by=c('id' = 'architect_id'), suffix = c('', '.other'), na_matches='never') %>% mutate(architect_id = id)
out <- df151 %>% select(name = name.other)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `name_other` AS `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `nationality`,
          `gender`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name_other`,
          `location`,
          `length_meters`,
          `length_feet`
   FROM
     (SELECT *
      FROM `df_architect`
      WHERE (`nationality` = 'American')) AS LHS
   INNER JOIN df_bridge AS RHS ON (LHS.id = RHS.architect_id))
