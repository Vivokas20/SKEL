[     2.337][MainProcess][INFO] Parsing specification...
[     2.343][MainProcess][INFO] File read
[     2.344][MainProcess][DEBUG] Reading input files...
[     2.354][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i048.csv: ['string', 'int64', 'string']
[     2.360][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o048.csv: ['string', 'int64', 'string']
[     2.360][MainProcess][INFO] Parsing sketch...
[     2.361][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child([0], type=Table, var=[]),Child(['AddressID = min(AddressID)'], type=SummariseCondition, var=[]),Child(['CName'], type=Cols, var=[])])
[     2.361][MainProcess][DEBUG] Sketch creation: Line(T2, root=['natural_join'], var=[], children=[Child([0], type=Table, var=[]),Child([0], type=Line, var=[])])
[     2.430][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 22, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 1110, 'filter': 6, 'summarise': 14, 'mutate': 2}
[     2.430][MainProcess][DEBUG] {'natural_join': 0.0008547008547008547, 'natural_join3': 0.0008547008547008547, 'natural_join4': 0.0008547008547008547, 'inner_join': 0.018803418803418803, 'anti_join': 0.005982905982905983, 'left_join': 0.0008547008547008547, 'union': 0.0008547008547008547, 'intersect': 0.002564102564102564, 'semi_join': 0.0008547008547008547, 'cross_join': 0.9487179487179487, 'filter': 0.005128205128205128, 'summarise': 0.011965811965811967, 'mutate': 0.0017094017094017094}
[     2.430][MainProcess][DEBUG] {'natural_join': 0.0008547008547008548, 'natural_join3': 0.0008547008547008548, 'natural_join4': 0.0008547008547008548, 'inner_join': 0.018803418803418806, 'anti_join': 0.005982905982905984, 'left_join': 0.0008547008547008548, 'union': 0.0008547008547008548, 'intersect': 0.0025641025641025645, 'semi_join': 0.0008547008547008548, 'cross_join': 0.9487179487179488, 'filter': 0.005128205128205129, 'summarise': 0.011965811965811968, 'mutate': 0.0017094017094017096}
[     2.430][MainProcess][INFO] Building synthesizer...
[     2.432][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child([0], type=Table, var=[1164]),Child(['AddressID = min(AddressID)'], type=SummariseCondition, var=[1162]),Child(['CName'], type=Cols, var=[20]),Child([None], type=None, var=[0])]), Line(T2, root=['natural_join'], var=[1], children=[Child([0], type=Table, var=[1164]),Child([0], type=Line, var=[1166]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.505][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 104 constraints
[     2.509][MainProcess][DEBUG] Enumeration time: 0.07848358154296875
[     2.570][MainProcess][DEBUG] Synthesis time: 0.06067943572998047
[     2.570][MainProcess][INFO] Solution found: [summarise(input0, 'AddressID = min(AddressID)', 'CName'), natural_join(input0, line0)]
[     2.571][MainProcess][DEBUG] Solution found using process 0
[     2.571][MainProcess][INFO] Statistics:
[     2.571][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     2.571][MainProcess][INFO] 		Rejected: 0 (approx)
[     2.571][MainProcess][INFO] 		Failed: 0 (approx)
[     2.571][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.571][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.571][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.571][MainProcess][INFO] 	Total time spent in enumerator init: 0.078484 (approx)
[     2.571][MainProcess][INFO] 	Total time spent in enumerator: 0.001075 (approx)
[     2.572][MainProcess][INFO] 		Enumerated 930.413487 programs/s avg. (just enumeration time)
[     2.572][MainProcess][INFO] 		Enumerated 0.526520 programs/s avg. (overall)
[     2.572][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.056605 (approx)
[     2.572][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     2.572][MainProcess][INFO] Solution found: [summarise(input0, 'AddressID = min(AddressID)', 'CName'), natural_join(input0, line0)]
[     2.572][MainProcess][INFO] Solution size: 2

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i048 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i048.csv", col_types = cols("CName" = col_character(),"AddressID" = col_integer(),"AddressLine" = col_character()))
df_i048 <- copy_to(con, df_i048)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o048.csv", col_types = cols("CName" = col_character(),"minAddressID" = col_integer(),"AddressLine" = col_character()))

df3 <- df_i048 %>% group_by(CName) %>% summarise(AddressID = min(AddressID)) %>% ungroup()
df4 <- inner_join(df_i048, df3, na_matches="never")
out <- df4 %>% select(CName, minAddressID = AddressID, AddressLine)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CName,
       AddressID AS minAddressID,
       AddressLine
FROM
  (SELECT LHS.CName AS CName,
          LHS.AddressID AS AddressID,
          AddressLine
   FROM df_i048 AS LHS
   INNER JOIN
     (SELECT CName,
             MIN(AddressID) AS AddressID
      FROM df_i048
      GROUP BY CName) AS RHS ON (LHS.CName = RHS.CName
                                 AND LHS.AddressID = RHS.AddressID))
