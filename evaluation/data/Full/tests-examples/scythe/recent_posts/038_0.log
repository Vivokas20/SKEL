[     2.309][MainProcess][INFO] Parsing specification...
[     2.314][MainProcess][INFO] File read
[     2.315][MainProcess][DEBUG] Reading input files...
[     2.323][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_1.csv: ['Float64', 'int64']
[     2.329][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_2.csv: ['Float64', 'int64']
[     2.335][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_o.csv: ['Float64', 'int64', 'Float64']
[     2.335][MainProcess][INFO] Parsing sketch...
[     2.336][MainProcess][DEBUG] Sketch creation: Line(T1, root=['left_join'], var=[], children=[Child([1], type=Table, var=[]),Child([0], type=Table, var=[])])
[     2.375][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 40, 'anti_join': 28, 'left_join': 4, 'union': 4, 'intersect': 12, 'semi_join': 4, 'cross_join': 0}
[     2.375][MainProcess][DEBUG] {'natural_join': 0.03333333333333333, 'natural_join3': 0.06666666666666667, 'natural_join4': 0.13333333333333333, 'inner_join': 0.3333333333333333, 'anti_join': 0.23333333333333334, 'left_join': 0.03333333333333333, 'union': 0.03333333333333333, 'intersect': 0.1, 'semi_join': 0.03333333333333333, 'cross_join': 0.0}
[     2.375][MainProcess][DEBUG] {'natural_join': 0.03333333333333333, 'natural_join3': 0.06666666666666667, 'natural_join4': 0.13333333333333333, 'inner_join': 0.3333333333333333, 'anti_join': 0.23333333333333334, 'left_join': 0.03333333333333333, 'union': 0.03333333333333333, 'intersect': 0.1, 'semi_join': 0.03333333333333333, 'cross_join': 0.0}
[     2.375][MainProcess][INFO] Building synthesizer...
[     2.377][MainProcess][DEBUG] [Line(T1, root=['left_join'], var=[6], children=[Child([1], type=Table, var=[32]),Child([0], type=Table, var=[31]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.405][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 43 constraints
[     2.407][MainProcess][DEBUG] Enumeration time: 0.0316464900970459
[     2.447][MainProcess][DEBUG] Synthesis time: 0.0395045280456543
[     2.447][MainProcess][INFO] Solution found: [left_join(input1, input0)]
[     2.447][MainProcess][DEBUG] Solution found using process 0
[     2.448][MainProcess][INFO] Statistics:
[     2.448][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     2.448][MainProcess][INFO] 		Rejected: 0 (approx)
[     2.448][MainProcess][INFO] 		Failed: 0 (approx)
[     2.448][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.448][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.448][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.448][MainProcess][INFO] 	Total time spent in enumerator init: 0.031646 (approx)
[     2.448][MainProcess][INFO] 	Total time spent in enumerator: 0.000678 (approx)
[     2.448][MainProcess][INFO] 		Enumerated 1475.828290 programs/s avg. (just enumeration time)
[     2.448][MainProcess][INFO] 		Enumerated 0.556062 programs/s avg. (overall)
[     2.448][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.036996 (approx)
[     2.448][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     2.449][MainProcess][INFO] Solution found: [left_join(input1, input0)]
[     2.449][MainProcess][INFO] Solution size: 1

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_038_1 <- read_csv("tests-examples/scythe/recent_posts/tables/038_1.csv", col_types = cols("Date" = col_double(),"Sold" = col_integer()))
df_038_1 <- copy_to(con, df_038_1)
df_038_2 <- read_csv("tests-examples/scythe/recent_posts/tables/038_2.csv", col_types = cols("Date" = col_double(),"Tapped" = col_integer()))
df_038_2 <- copy_to(con, df_038_2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/038_o.csv", col_types = cols("Date" = col_double(),"Tapped" = col_integer(),"Sold" = col_double()))

df2 <- left_join(df_038_2, df_038_1, na_matches="never")
out <- df2 %>% select(Date, Tapped, Sold)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Date, Tapped,
             Sold
FROM
  (SELECT LHS.Date AS Date,
          Tapped,
          Sold
   FROM df_038_2 AS LHS
   LEFT JOIN df_038_1 AS RHS ON (LHS.Date = RHS.Date))
