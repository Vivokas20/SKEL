[     2.357][MainProcess][INFO] Parsing specification...
[     2.364][MainProcess][INFO] File read
[     2.365][MainProcess][DEBUG] Reading input files...
[     2.375][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/architect.csv: ['int64', 'string', 'string', 'string']
[     2.382][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/bridge.csv: ['int64', 'int64', 'string', 'string', 'Float64', 'Float64']
[     2.390][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/mill.csv: ['int64', 'int64', 'string', 'string', 'string', 'int64', 'string']
[     2.396][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/0011.csv: ['int64', 'string', 'string']
[     2.397][MainProcess][INFO] Parsing sketch...
[     2.397][MainProcess][DEBUG] Sketch creation: Line(T1, root=['inner_join'], var=[], children=[Child([0], type=Table, var=[]),Child([1], type=Table, var=[]),Child(['id = architect_id'], type=JoinCondition, var=[])])
[     2.397][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child([0], type=Line, var=[]),Child(['n = n()'], type=SummariseCondition, var=[]),Child(['id'], type=Cols, var=[])])
[     2.397][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child([1], type=Line, var=[]),Child(['n == 2'], type=FilterCondition, var=[])])
[     2.398][MainProcess][DEBUG] Sketch creation: Line(T4, root=['inner_join'], var=[], children=[Child([0], type=Table, var=[]),Child([2], type=Table, var=[]),Child(['id = architect_id'], type=JoinCondition, var=[])])
[     2.398][MainProcess][DEBUG] Sketch creation: Line(T5, root=['summarise'], var=[], children=[Child([3], type=Line, var=[]),Child(['n = n()'], type=SummariseCondition, var=[]),Child(['id'], type=Cols, var=[])])
[     2.398][MainProcess][DEBUG] Sketch creation: Line(T6, root=['filter'], var=[], children=[Child([4], type=Line, var=[]),Child(['n == 1'], type=FilterCondition, var=[])])
[     2.398][MainProcess][DEBUG] Sketch creation: Line(T7, root=['union'], var=[], children=[Child([2], type=Line, var=[]),Child([5], type=Line, var=[])])
[     2.398][MainProcess][DEBUG] Sketch creation: Line(T8, root=['natural_join'], var=[], children=[Child([0], type=Table, var=[]),Child([6], type=Line, var=[])])
[     2.466][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 11970, 'anti_join': 603, 'left_join': 9, 'union': 9, 'intersect': 99, 'semi_join': 9, 'cross_join': 54, 'filter': 252, 'summarise': 201, 'mutate': 3}
[     2.466][MainProcess][DEBUG] {'natural_join': 0.0006753714542998649, 'natural_join3': 0.002026114362899595, 'natural_join4': 0.006078343088698784, 'inner_join': 0.8982440342188204, 'anti_join': 0.04524988743809095, 'left_join': 0.0006753714542998649, 'union': 0.0006753714542998649, 'intersect': 0.007429085997298514, 'semi_join': 0.0006753714542998649, 'cross_join': 0.00405222872579919, 'filter': 0.01891040072039622, 'summarise': 0.015083295812696983, 'mutate': 0.00022512381809995497}
[     2.466][MainProcess][DEBUG] {'natural_join': 0.0006753714542998649, 'natural_join3': 0.002026114362899595, 'natural_join4': 0.006078343088698784, 'inner_join': 0.8982440342188204, 'anti_join': 0.04524988743809095, 'left_join': 0.0006753714542998649, 'union': 0.0006753714542998649, 'intersect': 0.007429085997298514, 'semi_join': 0.0006753714542998649, 'cross_join': 0.00405222872579919, 'filter': 0.01891040072039622, 'summarise': 0.015083295812696983, 'mutate': 0.00022512381809995497}
[     2.466][MainProcess][INFO] Building synthesizer...
[     2.468][MainProcess][DEBUG] [Line(T1, root=['inner_join'], var=[4], children=[Child([0], type=Table, var=[1513]),Child([1], type=Table, var=[1514]),Child(['id = architect_id'], type=JoinCondition, var=[1334]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child([0], type=Line, var=[1517]),Child(['n = n()'], type=SummariseCondition, var=[1512]),Child(['id'], type=Cols, var=[29]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child([1], type=Line, var=[1518]),Child(['n == 2'], type=FilterCondition, var=[1428]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['inner_join'], var=[4], children=[Child([0], type=Table, var=[1513]),Child([2], type=Table, var=[1515]),Child(['id = architect_id'], type=JoinCondition, var=[1334]),Child([None], type=None, var=[0])]), Line(T5, root=['summarise'], var=[12], children=[Child([3], type=Line, var=[1520]),Child(['n = n()'], type=SummariseCondition, var=[1512]),Child(['id'], type=Cols, var=[29]),Child([None], type=None, var=[0])]), Line(T6, root=['filter'], var=[11], children=[Child([4], type=Line, var=[1521]),Child(['n == 1'], type=FilterCondition, var=[1434]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T7, root=['union'], var=[7], children=[Child([2], type=Line, var=[1519]),Child([5], type=Line, var=[1522]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T8, root=['natural_join'], var=[1], children=[Child([0], type=Table, var=[1513]),Child([6], type=Line, var=[1523]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     3.258][MainProcess][DEBUG] Enumerator for loc 8 constructed using 232 variables and 564 constraints
[     3.305][MainProcess][DEBUG] Enumeration time: 0.838890790939331
[     3.462][MainProcess][DEBUG] Synthesis time: 0.15691280364990234
[     3.462][MainProcess][INFO] Solution found: [inner_join(input0, input1, 'id = architect_id'), summarise(line0, 'n = n()', 'id'), filter(line1, 'n == 2'), inner_join(input0, input2, 'id = architect_id'), summarise(line3, 'n = n()', 'id'), filter(line4, 'n == 1'), union(line2, line5), natural_join(input0, line6)]
[     3.466][MainProcess][DEBUG] Solution found using process 0
[     3.466][MainProcess][INFO] Statistics:
[     3.466][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     3.466][MainProcess][INFO] 		Rejected: 0 (approx)
[     3.467][MainProcess][INFO] 		Failed: 0 (approx)
[     3.467][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     3.467][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     3.467][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     3.467][MainProcess][INFO] 	Total time spent in enumerator init: 0.838891 (approx)
[     3.467][MainProcess][INFO] 	Total time spent in enumerator: 0.003962 (approx)
[     3.467][MainProcess][INFO] 		Enumerated 252.410423 programs/s avg. (just enumeration time)
[     3.467][MainProcess][INFO] 		Enumerated 0.359970 programs/s avg. (overall)
[     3.467][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.143576 (approx)
[     3.467][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     3.467][MainProcess][INFO] Solution found: [inner_join(input0, input1, 'id = architect_id'), summarise(line0, 'n = n()', 'id'), filter(line1, 'n == 2'), inner_join(input0, input2, 'id = architect_id'), summarise(line3, 'n = n()', 'id'), filter(line4, 'n == 1'), union(line2, line5), natural_join(input0, line6)]
[     3.467][MainProcess][INFO] Solution size: 8
[     3.835][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_architect <- read_csv("tests-examples/spider/architecture/tables/architect.csv", col_types = cols("id" = col_integer(),"name" = col_character(),"nationality" = col_character(),"gender" = col_character()))
df_architect <- copy_to(con, df_architect)
df_bridge <- read_csv("tests-examples/spider/architecture/tables/bridge.csv", col_types = cols("architect_id" = col_integer(),"id" = col_integer(),"name" = col_character(),"location" = col_character(),"length_meters" = col_double(),"length_feet" = col_double()))
df_bridge <- copy_to(con, df_bridge)
df_mill <- read_csv("tests-examples/spider/architecture/tables/mill.csv", col_types = cols("architect_id" = col_integer(),"id" = col_integer(),"location" = col_character(),"name" = col_character(),"type" = col_character(),"built_year" = col_integer(),"notes" = col_character()))
df_mill <- copy_to(con, df_mill)
expected_output <- read_csv("tests-examples/spider/architecture/tables/0011.csv", col_types = cols("id" = col_integer(),"name" = col_character(),"gender" = col_character()))

df9 <- inner_join(df_architect, df_bridge, by=c('id' = 'architect_id'), suffix = c('', '.other'), na_matches='never') %>% mutate(architect_id = id)
df10 <- df9 %>% group_by(id) %>% summarise(n = n()) %>% ungroup()
df11 <- df10 %>% filter(n == 2)
df12 <- inner_join(df_architect, df_mill, by=c('id' = 'architect_id'), suffix = c('', '.other'), na_matches='never') %>% mutate(architect_id = id)
df13 <- df12 %>% group_by(id) %>% summarise(n = n()) %>% ungroup()
df14 <- df13 %>% filter(n == 1)
df15 <- bind_rows(df11, df14)
df16 <- inner_join(df_architect, df15, na_matches="never")
out <- df16 %>% select(id, name, gender) %>% distinct() %>% arrange(id)

Failed to generate SQL query
