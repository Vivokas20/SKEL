[     2.375][MainProcess][INFO] Parsing specification...
[     2.380][MainProcess][INFO] File read
[     2.381][MainProcess][DEBUG] Reading input files...
[     2.391][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/architect.csv: ['int64', 'string', 'string', 'string']
[     2.399][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/mill.csv: ['int64', 'int64', 'string', 'string', 'string', 'int64', 'string']
[     2.404][MainProcess][INFO] Inferred data types for table tests-examples/spider/architecture/tables/0008.csv: ['string']
[     2.404][MainProcess][INFO] Parsing sketch...
[     2.405][MainProcess][DEBUG] Sketch creation: Line(T1, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.405][MainProcess][DEBUG] Sketch creation: Line(T2, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.459][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 3276, 'anti_join': 184, 'left_join': 4, 'union': 4, 'intersect': 36, 'semi_join': 4, 'cross_join': 8, 'filter': 24}
[     2.459][MainProcess][DEBUG] {'natural_join': 0.0011210762331838565, 'natural_join3': 0.002242152466367713, 'natural_join4': 0.004484304932735426, 'inner_join': 0.9181614349775785, 'anti_join': 0.0515695067264574, 'left_join': 0.0011210762331838565, 'union': 0.0011210762331838565, 'intersect': 0.010089686098654708, 'semi_join': 0.0011210762331838565, 'cross_join': 0.002242152466367713, 'filter': 0.006726457399103139}
[     2.459][MainProcess][DEBUG] {'natural_join': 0.0011210762331838567, 'natural_join3': 0.0022421524663677134, 'natural_join4': 0.004484304932735427, 'inner_join': 0.9181614349775786, 'anti_join': 0.05156950672645741, 'left_join': 0.0011210762331838567, 'union': 0.0011210762331838567, 'intersect': 0.01008968609865471, 'semi_join': 0.0011210762331838567, 'cross_join': 0.0022421524663677134, 'filter': 0.00672645739910314}
[     2.459][MainProcess][INFO] Building synthesizer...
[     2.460][MainProcess][DEBUG] [Line(T1, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[]),Child([None], type=None, var=[0])])]
[     3.241][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 99 constraints
[     3.328][MainProcess][DEBUG] Enumeration time: 0.8692002296447754
[     3.900][MainProcess][DEBUG] Synthesis time: 0.571934700012207
[     3.901][MainProcess][INFO] Solution found: [filter(input0, "nationality != 'American' | nationality == 'Canadian'"), inner_join(input1, input1, 'architect_id = id,name = name')]
[     3.904][MainProcess][DEBUG] Solution found using process 0
[     3.905][MainProcess][INFO] Statistics:
[     3.905][MainProcess][INFO] 	Attempted programs: 37 (approx)
[     3.905][MainProcess][INFO] 		Rejected: 36 (approx)
[     3.905][MainProcess][INFO] 		Failed: 0 (approx)
[     3.905][MainProcess][INFO] 		Empty outputs: 31 (83.8%) (approx)
[     3.905][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     3.905][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     3.905][MainProcess][INFO] 	Total time spent in enumerator init: 0.869200 (approx)
[     3.905][MainProcess][INFO] 	Total time spent in enumerator: 0.094392 (approx)
[     3.905][MainProcess][INFO] 		Enumerated 391.984097 programs/s avg. (just enumeration time)
[     3.905][MainProcess][INFO] 		Enumerated 11.533610 programs/s avg. (overall)
[     3.905][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.451522 (approx)
[     3.905][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.024948 (approx)
[     3.906][MainProcess][INFO] Solution found: [filter(input0, "nationality != 'American' | nationality == 'Canadian'"), inner_join(input1, input1, 'architect_id = id,name = name')]
[     3.906][MainProcess][INFO] Solution size: 2

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_architect <- read_csv("tests-examples/spider/architecture/tables/architect.csv", col_types = cols("id" = col_integer(),"name" = col_character(),"nationality" = col_character(),"gender" = col_character()))
df_architect <- copy_to(con, df_architect)
df_mill <- read_csv("tests-examples/spider/architecture/tables/mill.csv", col_types = cols("architect_id" = col_integer(),"id" = col_integer(),"location" = col_character(),"name" = col_character(),"type" = col_character(),"built_year" = col_integer(),"notes" = col_character()))
df_mill <- copy_to(con, df_mill)
expected_output <- read_csv("tests-examples/spider/architecture/tables/0008.csv", col_types = cols("type" = col_character()))

df31 <- df_architect %>% filter(nationality != 'American' | nationality == 'Canadian')
df32 <- inner_join(df_mill, df_mill, by=c('architect_id' = 'id','name' = 'name'), suffix = c('', '.other'), na_matches='never') %>% mutate(id = architect_id)
out <- df32 %>% select(type) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT TYPE
FROM
  (SELECT LHS.architect_id AS architect_id,
          LHS.id AS id,
          LHS.location AS LOCATION,
          LHS.name AS name,
          LHS.type AS TYPE,
          LHS.built_year AS built_year,
          LHS.notes AS notes,
          RHS.architect_id AS architect_id_other,
          RHS.location AS location_other,
          RHS.type AS type_other,
          RHS.built_year AS built_year_other,
          RHS.notes AS notes_other
   FROM df_mill AS LHS
   INNER JOIN df_mill AS RHS ON (LHS.architect_id = RHS.id
                                 AND LHS.name = RHS.name))
