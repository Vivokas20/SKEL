[     2.435][MainProcess][INFO] Parsing specification...
[     2.441][MainProcess][INFO] File read
[     2.442][MainProcess][DEBUG] Reading input files...
[     2.449][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     2.455][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'Float64']
[     2.461][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/34.out: ['string', 'Float64']
[     2.461][MainProcess][INFO] Parsing sketch...
[     2.461][MainProcess][DEBUG] Sketch creation: Line(T1, root=['??'], var=[], children=[Child([1], type=Table, var=[]),Child(['meansalary = mean(salary)'], type=Unknown, var=[])])
[     2.462][MainProcess][DEBUG] Sketch creation: Line(T2, root=['??'], var=[], children=[Child([1], type=Table, var=[]),Child([0], type=Table, var=[]),Child(["''"], type=Unknown, var=[])])
[     2.462][MainProcess][DEBUG] Sketch creation: Line(T3, root=['??'], var=[], children=[Child([0], type=Line, var=[]),Child([1], type=Line, var=[]),Child(['meansalary <= salary.other'], type=Unknown, var=[])])
[     2.536][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 120, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 4440, 'filter': 12, 'summarise': 22, 'mutate': 2}
[     2.536][MainProcess][DEBUG] {'natural_join': 0.0008517887563884157, 'natural_join3': 0.0017035775127768314, 'natural_join4': 0.0034071550255536627, 'inner_join': 0.02555366269165247, 'anti_join': 0.009369676320272573, 'left_join': 0.0008517887563884157, 'union': 0.0008517887563884157, 'intersect': 0.0034071550255536627, 'semi_join': 0.0008517887563884157, 'cross_join': 0.9454855195911414, 'filter': 0.002555366269165247, 'summarise': 0.004684838160136286, 'mutate': 0.00042589437819420784}
[     2.536][MainProcess][DEBUG] {'natural_join': 0.0008517887563884158, 'natural_join3': 0.0017035775127768316, 'natural_join4': 0.003407155025553663, 'inner_join': 0.025553662691652473, 'anti_join': 0.009369676320272574, 'left_join': 0.0008517887563884158, 'union': 0.0008517887563884158, 'intersect': 0.003407155025553663, 'semi_join': 0.0008517887563884158, 'cross_join': 0.9454855195911415, 'filter': 0.0025553662691652473, 'summarise': 0.004684838160136287, 'mutate': 0.0004258943781942079}
[     2.536][MainProcess][INFO] Building synthesizer...
[     2.538][MainProcess][DEBUG] [Line(T1, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([1], type=Table, var=[[1177], [1175]]),Child(['meansalary = mean(salary)'], type=Unknown, var=[[1177], [1175]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([1], type=Table, var=[[1177], [1176], [18]]),Child([0], type=Table, var=[[1177], [1176], [18]]),Child(["''"], type=Unknown, var=[[1177], [1176], [18]]),Child([None], type=None, var=[0])]), Line(T3, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([0], type=Line, var=[[1179], [1180], [1153]]),Child([1], type=Line, var=[[1179], [1180], [1153]]),Child(['meansalary <= salary.other'], type=Unknown, var=[[1179], [1180], [1153]]),Child([None], type=None, var=[0])])]
[     2.688][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 236 constraints
[     2.699][MainProcess][DEBUG] Enumeration time: 0.16269612312316895
[     2.807][MainProcess][DEBUG] Synthesis time: 0.10753464698791504
[     2.807][MainProcess][INFO] Solution found: [mutate(input1, 'meansalary = mean(salary)'), anti_join(input1, input0, ''), cross_join(line0, line1, 'meansalary <= salary.other')]
[     2.809][MainProcess][DEBUG] Solution found using process 0
[     2.809][MainProcess][INFO] Statistics:
[     2.809][MainProcess][INFO] 	Attempted programs: 3 (approx)
[     2.809][MainProcess][INFO] 		Rejected: 2 (approx)
[     2.809][MainProcess][INFO] 		Failed: 0 (approx)
[     2.810][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.810][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.810][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.810][MainProcess][INFO] 	Total time spent in enumerator init: 0.162696 (approx)
[     2.810][MainProcess][INFO] 	Total time spent in enumerator: 0.007500 (approx)
[     2.810][MainProcess][INFO] 		Enumerated 400.016277 programs/s avg. (just enumeration time)
[     2.810][MainProcess][INFO] 		Enumerated 1.460606 programs/s avg. (overall)
[     2.810][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.094396 (approx)
[     2.810][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.004652 (approx)
[     2.810][MainProcess][INFO] Solution found: [mutate(input1, 'meansalary = mean(salary)'), anti_join(input1, input0, ''), cross_join(line0, line1, 'meansalary <= salary.other')]
[     2.810][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_certified <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols("eid" = col_integer(),"aid" = col_integer()))
df_certified <- copy_to(con, df_certified)
df_employees <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols("eid" = col_integer(),"ename" = col_character(),"salary" = col_double()))
df_employees <- copy_to(con, df_employees)
expected_output <- read_csv("tests-examples/textbook/tables/34.out", col_types = cols("ename" = col_character(),"salary" = col_double()))

df6 <- df_employees %>% mutate(meansalary = mean(salary))
df7 <- anti_join(df_employees, df_certified, by=c(), na_matches="never")
df8 <- full_join(df6, df7, by=character(), suffix = c("", ".other"), na_matches="never") %>% filter(meansalary <= salary.other)
out <- df8 %>% select(ename = ename.other, salary = salary.other) %>% distinct() %>% arrange(ename)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT ename_other AS ename,
                salary_other AS salary
FROM
  (SELECT LHS.eid AS eid,
          LHS.ename AS ename,
          LHS.salary AS salary,
          meansalary,
          RHS.eid AS eid_other,
          RHS.ename AS ename_other,
          RHS.salary AS salary_other
   FROM
     (SELECT eid,
             ename,
             salary,
             AVG(salary) OVER () AS meansalary
      FROM df_employees) AS LHS
   CROSS JOIN
     (SELECT *
      FROM df_employees AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_certified AS RHS
           WHERE (LHS.eid = RHS.eid) )) AS RHS)
WHERE (meansalary <= salary_other)
ORDER BY ename
