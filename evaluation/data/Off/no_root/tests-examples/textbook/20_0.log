[     2.377][MainProcess][INFO] Parsing specification...
[     2.382][MainProcess][INFO] File read
[     2.383][MainProcess][DEBUG] Reading input files...
[     2.392][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-1.txt: ['string', 'string']
[     2.397][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-2.txt: ['string', 'string']
[     2.403][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-3.txt: ['string', 'string']
[     2.408][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20.out: ['string']
[     2.408][MainProcess][INFO] Parsing sketch...
[     2.408][MainProcess][DEBUG] Sketch creation: Line(T1, root=['??'], var=[], children=[Child([0], type=Table, var=[]),Child([1], type=Table, var=[]),Child([2], type=Table, var=[])])
[     2.408][MainProcess][DEBUG] Sketch creation: Line(T2, root=['??'], var=[], children=[Child([0], type=Line, var=[]),Child(["color == 'red'"], type=Unknown, var=[])])
[     2.408][MainProcess][DEBUG] Sketch creation: Line(T3, root=['??'], var=[], children=[Child([0], type=Line, var=[]),Child(["color == 'green'"], type=Unknown, var=[])])
[     2.409][MainProcess][DEBUG] Sketch creation: Line(T4, root=['??'], var=[], children=[Child([1], type=Line, var=[]),Child([2], type=Line, var=[]),Child(['S_name'], type=Unknown, var=[])])
[     2.450][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 738, 'anti_join': 99, 'left_join': 9, 'union': 9, 'intersect': 36, 'semi_join': 9, 'cross_join': 18, 'filter': 36}
[     2.450][MainProcess][DEBUG] {'natural_join': 0.008403361344537815, 'natural_join3': 0.025210084033613446, 'natural_join4': 0.07563025210084033, 'inner_join': 0.6890756302521008, 'anti_join': 0.09243697478991597, 'left_join': 0.008403361344537815, 'union': 0.008403361344537815, 'intersect': 0.03361344537815126, 'semi_join': 0.008403361344537815, 'cross_join': 0.01680672268907563, 'filter': 0.03361344537815126}
[     2.450][MainProcess][DEBUG] {'natural_join': 0.008403361344537815, 'natural_join3': 0.025210084033613446, 'natural_join4': 0.07563025210084033, 'inner_join': 0.6890756302521008, 'anti_join': 0.09243697478991597, 'left_join': 0.008403361344537815, 'union': 0.008403361344537815, 'intersect': 0.03361344537815126, 'semi_join': 0.008403361344537815, 'cross_join': 0.01680672268907563, 'filter': 0.03361344537815126}
[     2.450][MainProcess][INFO] Building synthesizer...
[     2.452][MainProcess][DEBUG] [Line(T1, root=['??'], var=[2, 4, 5, 8, 10], children=[Child([0], type=Table, var=[[123], [124], [125]]),Child([1], type=Table, var=[[123], [124], [125]]),Child([2], type=Table, var=[[123], [124], [125]]),Child([None], type=None, var=[0])]), Line(T2, root=['??'], var=[1, 6, 7, 9, 11], children=[Child([0], type=Line, var=[[127], [111]]),Child(["color == 'red'"], type=Unknown, var=[[127], [111]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['??'], var=[1, 6, 7, 9, 11], children=[Child([0], type=Line, var=[[127], [113]]),Child(["color == 'green'"], type=Unknown, var=[[127], [113]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['??'], var=[2, 4, 5, 8, 10], children=[Child([1], type=Line, var=[[128], [129], [14, 19, 101]]),Child([2], type=Line, var=[[128], [129], [14, 19, 101]]),Child(['S_name'], type=Unknown, var=[[128], [129], [14, 19, 101]]),Child([None], type=None, var=[0])])]
[     2.678][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 315 constraints
[     2.693][MainProcess][DEBUG] Enumeration time: 0.24251413345336914
[     2.755][MainProcess][DEBUG] Synthesis time: 0.06152796745300293
[     2.755][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "color == 'red'"), filter(line0, "color == 'green'"), intersect(line2, line1, 'S_name')]
[     2.756][MainProcess][DEBUG] Solution found using process 0
[     2.756][MainProcess][INFO] Statistics:
[     2.757][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     2.757][MainProcess][INFO] 		Rejected: 0 (approx)
[     2.757][MainProcess][INFO] 		Failed: 0 (approx)
[     2.757][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.757][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.757][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.757][MainProcess][INFO] 	Total time spent in enumerator init: 0.242514 (approx)
[     2.757][MainProcess][INFO] 	Total time spent in enumerator: 0.002093 (approx)
[     2.757][MainProcess][INFO] 		Enumerated 477.874445 programs/s avg. (just enumeration time)
[     2.757][MainProcess][INFO] 		Enumerated 0.486846 programs/s avg. (overall)
[     2.757][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.054437 (approx)
[     2.757][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     2.757][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "color == 'red'"), filter(line0, "color == 'green'"), intersect(line2, line1, 'S_name')]
[     2.757][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_20_1 <- read_csv("tests-examples/textbook/tables/20-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_20_1 <- copy_to(con, df_20_1)
df_20_2 <- read_csv("tests-examples/textbook/tables/20-2.txt", col_types = cols("P_id" = col_character(),"color" = col_character()))
df_20_2 <- copy_to(con, df_20_2)
df_20_3 <- read_csv("tests-examples/textbook/tables/20-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_20_3 <- copy_to(con, df_20_3)
expected_output <- read_csv("tests-examples/textbook/tables/20.out", col_types = cols("S_name" = col_character()))

df5 <- inner_join(df_20_1, df_20_2, na_matches="never") %>% inner_join(df_20_3, na_matches="never")
df6 <- df5 %>% filter(color == 'red')
df7 <- df5 %>% filter(color == 'green')
df8 <- intersect(select(df7,S_name), select(df6, S_name))
out <- df8 %>% select(S_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `S_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `P_id`,
             `color`,
             `S_name`
      FROM
        (SELECT `S_key`,
                `LHS`.`P_id` AS `P_id`,
                `color`
         FROM `df_20_1` AS `LHS`
         INNER JOIN `df_20_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
      INNER JOIN `df_20_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
   WHERE (`color` = 'green') INTERSECT
     SELECT `S_name`
     FROM
       (SELECT `LHS`.`S_key` AS `S_key`,
               `P_id`,
               `color`,
               `S_name`
        FROM
          (SELECT `S_key`,
                  `LHS`.`P_id` AS `P_id`,
                  `color`
           FROM `df_20_1` AS `LHS`
           INNER JOIN `df_20_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
        INNER JOIN `df_20_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) WHERE (`color` = 'red'))
