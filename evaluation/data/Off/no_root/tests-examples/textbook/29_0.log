[     2.388][MainProcess][INFO] Parsing specification...
[     2.393][MainProcess][INFO] File read
[     2.394][MainProcess][DEBUG] Reading input files...
[     2.401][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     2.412][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/flights.txt: ['int64', 'string', 'string', 'int64', 'datetime64[ns]', 'datetime64[ns]', 'int64']
[     2.417][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/29.out: ['int64']
[     2.417][MainProcess][INFO] Parsing sketch...
[     2.417][MainProcess][DEBUG] Sketch creation: Line(T1, root=['??'], var=[], children=[Child([1], type=Table, var=[]),Child(["origin == 'Los Angeles' & destination == 'Chicago'"], type=Unknown, var=[])])
[     2.417][MainProcess][DEBUG] Sketch creation: Line(T2, root=['??'], var=[], children=[Child([0], type=Line, var=[]),Child(['distance = min(distance)'], type=Unknown, var=[]),Child(["''"], type=Unknown, var=[])])
[     2.417][MainProcess][DEBUG] Sketch creation: Line(T3, root=['??'], var=[], children=[Child([0], type=Table, var=[]),Child([1], type=Line, var=[])])
[     2.418][MainProcess][DEBUG] Sketch creation: Line(T4, root=['??'], var=[], children=[Child([2], type=Line, var=[]),Child(['crusingrange > distance'], type=Unknown, var=[])])
[     3.490][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 6356, 'anti_join': 224, 'left_join': 4, 'union': 4, 'intersect': 40, 'semi_join': 4, 'cross_join': 121144, 'filter': 3496, 'summarise': 448, 'mutate': 8}
[     3.490][MainProcess][DEBUG] {'natural_join': 3.0359148729469626e-05, 'natural_join3': 6.071829745893925e-05, 'natural_join4': 0.0001214365949178785, 'inner_join': 0.048240687331127234, 'anti_join': 0.0017001123288502991, 'left_join': 3.0359148729469626e-05, 'union': 3.0359148729469626e-05, 'intersect': 0.00030359148729469627, 'semi_join': 3.0359148729469626e-05, 'cross_join': 0.9194571784207171, 'filter': 0.026533895989556452, 'summarise': 0.0034002246577005983, 'mutate': 6.071829745893925e-05}
[     3.490][MainProcess][DEBUG] {'natural_join': 3.0359148729469626e-05, 'natural_join3': 6.071829745893925e-05, 'natural_join4': 0.0001214365949178785, 'inner_join': 0.048240687331127234, 'anti_join': 0.0017001123288502991, 'left_join': 3.0359148729469626e-05, 'union': 3.0359148729469626e-05, 'intersect': 0.00030359148729469627, 'semi_join': 3.0359148729469626e-05, 'cross_join': 0.9194571784207171, 'filter': 0.026533895989556452, 'summarise': 0.0034002246577005983, 'mutate': 6.071829745893925e-05}
[     3.491][MainProcess][INFO] Building synthesizer...
[     3.500][MainProcess][DEBUG] [Line(T1, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([1], type=Table, var=[[33708], [32015]]),Child(["origin == 'Los Angeles' & destination == 'Chicago'"], type=Unknown, var=[[33708], [32015]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([0], type=Line, var=[[33710], [33705], [24]]),Child(['distance = min(distance)'], type=Unknown, var=[[33710], [33705], [24]]),Child(["''"], type=Unknown, var=[[33710], [33705], [24]]),Child([None], type=None, var=[0])]), Line(T3, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([0], type=Table, var=[[33707], [33711]]),Child([1], type=Line, var=[[33707], [33711]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([2], type=Line, var=[[33712], [31965]]),Child(['crusingrange > distance'], type=Unknown, var=[[33712], [31965]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     4.915][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 333 constraints
[     5.069][MainProcess][DEBUG] Enumeration time: 1.57806396484375
[     5.180][MainProcess][DEBUG] Synthesis time: 0.11117434501647949
[     5.180][MainProcess][INFO] Solution found: [filter(input1, "origin == 'Los Angeles' & destination == 'Chicago'"), summarise(line0, 'distance = min(distance)', ''), natural_join(input0, line1), filter(line2, 'distance <= crusingrange')]
[     5.192][MainProcess][DEBUG] Solution found using process 0
[     5.192][MainProcess][INFO] Statistics:
[     5.192][MainProcess][INFO] 	Attempted programs: 2 (approx)
[     5.192][MainProcess][INFO] 		Rejected: 1 (approx)
[     5.192][MainProcess][INFO] 		Failed: 0 (approx)
[     5.192][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     5.192][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     5.192][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     5.192][MainProcess][INFO] 	Total time spent in enumerator init: 1.578064 (approx)
[     5.193][MainProcess][INFO] 	Total time spent in enumerator: 0.008388 (approx)
[     5.193][MainProcess][INFO] 		Enumerated 238.441431 programs/s avg. (just enumeration time)
[     5.193][MainProcess][INFO] 		Enumerated 0.445888 programs/s avg. (overall)
[     5.193][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.096896 (approx)
[     5.193][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.004552 (approx)
[     5.193][MainProcess][INFO] Solution found: [filter(input1, "origin == 'Los Angeles' & destination == 'Chicago'"), summarise(line0, 'distance = min(distance)', ''), natural_join(input0, line1), filter(line2, 'distance <= crusingrange')]
[     5.193][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_aircraft <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols("aid" = col_integer(),"aname" = col_character(),"crusingrange" = col_integer()))
df_aircraft <- copy_to(con, df_aircraft)
df_flights <- read_csv("tests-examples/textbook/tables/flights.txt", col_types = cols("flno" = col_integer(),"origin" = col_character(),"destination" = col_character(),"distance" = col_integer(),"departs" = col_character(),"arrives" = col_character(),"price" = col_integer()))
df_flights$departs <- parse_datetime(df_flights$departs)
df_flights$arrives <- parse_datetime(df_flights$arrives)
df_flights <- copy_to(con, df_flights)
expected_output <- read_csv("tests-examples/textbook/tables/29.out", col_types = cols("aid" = col_integer()))

df7 <- df_flights %>% filter(origin == 'Los Angeles' & destination == 'Chicago')
df8 <- df7 %>% group_by() %>% summarise(distance = min(distance)) %>% ungroup()
df9 <- full_join(df_aircraft, df8, by=character(), na_matches="never")
df10 <- df9 %>% filter(distance <= crusingrange)
out <- df10 %>% select(aid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `aid`
FROM
  (SELECT `aid`,
          `aname`,
          `crusingrange`,
          `distance`
   FROM `df_aircraft` AS `LHS`
   CROSS JOIN
     (SELECT MIN(`distance`) AS `distance`
      FROM `df_flights`
      WHERE (`origin` = 'Los Angeles'
             AND `destination` = 'Chicago')) AS RHS)
WHERE (distance <= crusingrange)
