[     2.419][MainProcess][INFO] Parsing specification...
[     2.424][MainProcess][INFO] File read
[     2.425][MainProcess][DEBUG] Reading input files...
[     2.435][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_1.csv: ['Float64', 'int64']
[     2.442][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_2.csv: ['Float64', 'int64']
[     2.449][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_o.csv: ['Float64', 'int64', 'Float64']
[     2.449][MainProcess][INFO] Parsing sketch...
[     2.449][MainProcess][DEBUG] Sketch creation: Line(T1, root=['??'], var=[], children=[Child([1], type=Table, var=[]),Child([0], type=Table, var=[])])
[     2.493][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 40, 'anti_join': 28, 'left_join': 4, 'union': 4, 'intersect': 12, 'semi_join': 4, 'cross_join': 0}
[     2.494][MainProcess][DEBUG] {'natural_join': 0.03333333333333333, 'natural_join3': 0.06666666666666667, 'natural_join4': 0.13333333333333333, 'inner_join': 0.3333333333333333, 'anti_join': 0.23333333333333334, 'left_join': 0.03333333333333333, 'union': 0.03333333333333333, 'intersect': 0.1, 'semi_join': 0.03333333333333333, 'cross_join': 0.0}
[     2.494][MainProcess][DEBUG] {'natural_join': 0.03333333333333333, 'natural_join3': 0.06666666666666667, 'natural_join4': 0.13333333333333333, 'inner_join': 0.3333333333333333, 'anti_join': 0.23333333333333334, 'left_join': 0.03333333333333333, 'union': 0.03333333333333333, 'intersect': 0.1, 'semi_join': 0.03333333333333333, 'cross_join': 0.0}
[     2.494][MainProcess][INFO] Building synthesizer...
[     2.495][MainProcess][DEBUG] [Line(T1, root=['??'], var=[1, 6, 7, 9], children=[Child([1], type=Table, var=[[32], [31]]),Child([0], type=Table, var=[[32], [31]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.540][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 55 constraints
[     2.543][MainProcess][DEBUG] Enumeration time: 0.04931282997131348
[     2.654][MainProcess][DEBUG] Synthesis time: 0.11050677299499512
[     2.654][MainProcess][INFO] Solution found: [left_join(input1, input0)]
[     2.655][MainProcess][DEBUG] Solution found using process 0
[     2.655][MainProcess][INFO] Statistics:
[     2.655][MainProcess][INFO] 	Attempted programs: 6 (approx)
[     2.655][MainProcess][INFO] 		Rejected: 5 (approx)
[     2.655][MainProcess][INFO] 		Failed: 0 (approx)
[     2.656][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.656][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.656][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.656][MainProcess][INFO] 	Total time spent in enumerator init: 0.049313 (approx)
[     2.656][MainProcess][INFO] 	Total time spent in enumerator: 0.006797 (approx)
[     2.656][MainProcess][INFO] 		Enumerated 882.794542 programs/s avg. (just enumeration time)
[     2.656][MainProcess][INFO] 		Enumerated 3.104491 programs/s avg. (overall)
[     2.656][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.099437 (approx)
[     2.656][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.003610 (approx)
[     2.656][MainProcess][INFO] Solution found: [left_join(input1, input0)]
[     2.656][MainProcess][INFO] Solution size: 1

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_038_1 <- read_csv("tests-examples/scythe/recent_posts/tables/038_1.csv", col_types = cols("Date" = col_double(),"Sold" = col_integer()))
df_038_1 <- copy_to(con, df_038_1)
df_038_2 <- read_csv("tests-examples/scythe/recent_posts/tables/038_2.csv", col_types = cols("Date" = col_double(),"Tapped" = col_integer()))
df_038_2 <- copy_to(con, df_038_2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/038_o.csv", col_types = cols("Date" = col_double(),"Tapped" = col_integer(),"Sold" = col_double()))

df7 <- left_join(df_038_2, df_038_1, na_matches="never")
out <- df7 %>% select(Date, Tapped, Sold)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Date, Tapped,
             Sold
FROM
  (SELECT LHS.Date AS Date,
          Tapped,
          Sold
   FROM df_038_2 AS LHS
   LEFT JOIN df_038_1 AS RHS ON (LHS.Date = RHS.Date))
