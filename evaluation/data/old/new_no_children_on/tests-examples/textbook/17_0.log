[     2.344][MainProcess][INFO] Parsing specification...
[     2.350][MainProcess][INFO] File read
[     2.351][MainProcess][DEBUG] Reading input files...
[     2.362][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/17-1.txt: ['string', 'string', 'int64']
[     2.368][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/17-3.txt: ['string', 'string']
[     2.374][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/17.out: ['string', 'string']
[     2.375][MainProcess][INFO] Parsing sketch...
[     2.375][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.375][MainProcess][DEBUG] Sketch creation: Line(T2, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.375][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.421][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 160, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 336, 'filter': 12, 'summarise': 22, 'mutate': 2}
[     2.421][MainProcess][DEBUG] {'natural_join': 0.006329113924050633, 'natural_join3': 0.012658227848101266, 'natural_join4': 0.02531645569620253, 'inner_join': 0.25316455696202533, 'anti_join': 0.06962025316455696, 'left_join': 0.006329113924050633, 'union': 0.006329113924050633, 'intersect': 0.02531645569620253, 'semi_join': 0.006329113924050633, 'cross_join': 0.5316455696202531, 'filter': 0.0189873417721519, 'summarise': 0.03481012658227848, 'mutate': 0.0031645569620253164}
[     2.421][MainProcess][DEBUG] {'natural_join': 0.006329113924050634, 'natural_join3': 0.012658227848101267, 'natural_join4': 0.025316455696202535, 'inner_join': 0.2531645569620254, 'anti_join': 0.06962025316455697, 'left_join': 0.006329113924050634, 'union': 0.006329113924050634, 'intersect': 0.025316455696202535, 'semi_join': 0.006329113924050634, 'cross_join': 0.5316455696202532, 'filter': 0.018987341772151903, 'summarise': 0.034810126582278486, 'mutate': 0.003164556962025317}
[     2.421][MainProcess][INFO] Building synthesizer...
[     2.423][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[160, 161]),Child(['??'], type=SummariseCondition, var=[159]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])]), Line(T2, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[160, 161]),Child(['??'], type=Table, var=[160, 161]),Child(['??'], type=Table, var=[160, 161]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[160, 161]),Child(['??'], type=FilterCondition, var=[153, 154, 155, 156, 157, 158]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.592][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 166 constraints
[     2.598][MainProcess][DEBUG] Enumeration time: 0.17688846588134766
[     2.947][MainProcess][DEBUG] Synthesis time: 0.3486511707305908
[     2.947][MainProcess][INFO] Solution found: [summarise(input0, 'meancost = mean(cost)', 'P_id'), natural_join3(input0, input1, line0), filter(line1, 'meancost < cost')]
[     2.948][MainProcess][DEBUG] Solution found using process 0
[     2.949][MainProcess][INFO] Statistics:
[     2.949][MainProcess][INFO] 	Attempted programs: 22 (approx)
[     2.949][MainProcess][INFO] 		Rejected: 21 (approx)
[     2.949][MainProcess][INFO] 		Failed: 0 (approx)
[     2.949][MainProcess][INFO] 		Empty outputs: 14 (63.6%) (approx)
[     2.949][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.949][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.949][MainProcess][INFO] 	Total time spent in enumerator init: 0.176888 (approx)
[     2.949][MainProcess][INFO] 	Total time spent in enumerator: 0.042376 (approx)
[     2.949][MainProcess][INFO] 		Enumerated 519.164203 programs/s avg. (just enumeration time)
[     2.949][MainProcess][INFO] 		Enumerated 9.655615 programs/s avg. (overall)
[     2.949][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.284921 (approx)
[     2.949][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.019864 (approx)
[     2.950][MainProcess][INFO] Solution found: [summarise(input0, 'meancost = mean(cost)', 'P_id'), natural_join3(input0, input1, line0), filter(line1, 'meancost < cost')]
[     2.950][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 5))
(declare-fun bv_1_0_a () (_ BitVec 5))
(declare-fun bv_1_1_b () (_ BitVec 5))
(declare-fun bv_1_1_a () (_ BitVec 5))
(declare-fun bv_1_2_b () (_ BitVec 5))
(declare-fun bv_1_2_a () (_ BitVec 5))
(declare-fun bv_1_3_b () (_ BitVec 5))
(declare-fun bv_1_3_a () (_ BitVec 5))
(declare-fun bv_2_0_b () (_ BitVec 5))
(declare-fun bv_1 () (_ BitVec 5))
(declare-fun bv_2_0_a () (_ BitVec 5))
(declare-fun bv_2_1_b () (_ BitVec 5))
(declare-fun bv_2_1_a () (_ BitVec 5))
(declare-fun bv_2_2_b () (_ BitVec 5))
(declare-fun bv_2_2_a () (_ BitVec 5))
(declare-fun bv_2_3_b () (_ BitVec 5))
(declare-fun bv_2_3_a () (_ BitVec 5))
(declare-fun bv_3_0_b () (_ BitVec 5))
(declare-fun bv_2 () (_ BitVec 5))
(declare-fun bv_3_0_a () (_ BitVec 5))
(declare-fun bv_3_1_b () (_ BitVec 5))
(declare-fun bv_3_1_a () (_ BitVec 5))
(declare-fun bv_3_2_b () (_ BitVec 5))
(declare-fun bv_3_2_a () (_ BitVec 5))
(declare-fun bv_3_3_b () (_ BitVec 5))
(declare-fun bv_3_3_a () (_ BitVec 5))
(declare-fun bv_3 () (_ BitVec 5))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 160) (= leaf_1_0 161)))
(assert (<= leaf_1_0 161))
(assert (>= leaf_1_0 160))
(assert (or (= leaf_1_1 159)))
(assert (<= leaf_1_1 159))
(assert (>= leaf_1_1 159))
(assert (or (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)
    (= leaf_1_2 26)
    (= leaf_1_2 27)
    (= leaf_1_2 28)))
(assert (<= leaf_1_2 28))
(assert (>= leaf_1_2 18))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 2)))
(assert (or (= leaf_2_0 160) (= leaf_2_0 161) (= leaf_2_0 163)))
(assert (<= leaf_2_0 163))
(assert (>= leaf_2_0 160))
(assert (or (= leaf_2_1 160) (= leaf_2_1 161) (= leaf_2_1 163)))
(assert (<= leaf_2_1 163))
(assert (>= leaf_2_1 160))
(assert (or (= leaf_2_2 160) (= leaf_2_2 161) (= leaf_2_2 163)))
(assert (<= leaf_2_2 163))
(assert (>= leaf_2_2 160))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 11)))
(assert (or (= leaf_3_0 160) (= leaf_3_0 161) (= leaf_3_0 163) (= leaf_3_0 164)))
(assert (<= leaf_3_0 164))
(assert (>= leaf_3_0 160))
(assert (or (= leaf_3_1 153)
    (= leaf_3_1 154)
    (= leaf_3_1 155)
    (= leaf_3_1 156)
    (= leaf_3_1 157)
    (= leaf_3_1 158)))
(assert (<= leaf_3_1 158))
(assert (>= leaf_3_1 153))
(assert (or (= leaf_3_2 0)))
(assert (<= leaf_3_2 0))
(assert (>= leaf_3_2 0))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 160)
    (= leaf_1_1 160)
    (= leaf_1_2 160)
    (= leaf_1_3 160)
    (= leaf_2_0 160)
    (= leaf_2_1 160)
    (= leaf_2_2 160)
    (= leaf_2_3 160)
    (= leaf_3_0 160)
    (= leaf_3_1 160)
    (= leaf_3_2 160)
    (= leaf_3_3 160)))
(assert (or (= leaf_1_0 161)
    (= leaf_1_1 161)
    (= leaf_1_2 161)
    (= leaf_1_3 161)
    (= leaf_2_0 161)
    (= leaf_2_1 161)
    (= leaf_2_2 161)
    (= leaf_2_3 161)
    (= leaf_3_0 161)
    (= leaf_3_1 161)
    (= leaf_3_2 161)
    (= leaf_3_3 161)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 160) (= #b01011 bv_1_0_a) (= #b00000 bv_1_0_b))
        (and (= leaf_1_0 161) (= #b00110 bv_1_0_a) (= #b00000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 159) (= #b01000 bv_1_1_a) (= #b10000 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 18) (= #b00000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b00001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 20) (= #b00010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b00100 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b01000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b00011 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 24) (= #b00101 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 25) (= #b01001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 26) (= #b00110 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 27) (= #b01010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 28) (= #b01100 bv_1_2_a) (= #b00000 bv_1_2_b)))))
(assert (=> (= root_1 12)
    (and (= leaf_1_3 0) (= #b00000 bv_1_3_a) (= #b00000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 163)))
(assert (=> (= root_2 2)
    (or (and (= leaf_2_0 160) (= #b01011 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 161) (= #b00110 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 163) (= bv_2_0_a bv_1) (= #b00000 bv_2_0_b)))))
(assert (= leaf_2_1_is_line_1 (= leaf_2_1 163)))
(assert (=> (= root_2 2)
    (or (and (= leaf_2_1 160) (= #b01011 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 161) (= #b00110 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 163) (= bv_2_1_a bv_1) (= #b00000 bv_2_1_b)))))
(assert (= leaf_2_2_is_line_1 (= leaf_2_2 163)))
(assert (=> (= root_2 2)
    (or (and (= leaf_2_2 160) (= #b01011 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 161) (= #b00110 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 163) (= bv_2_2_a bv_1) (= #b00000 bv_2_2_b)))))
(assert (=> (= root_2 2) (and (= leaf_2_3 0) (= #b00000 bv_2_3_a) (= #b00000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 163)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 164)))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_0 160) (= #b01011 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 161) (= #b00110 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 163) (= bv_3_0_a bv_1) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 164) (= bv_3_0_a bv_2) (= #b00000 bv_3_0_b)))))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_1 153) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 154) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 155) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 156) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 157) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 158) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b)))))
(assert (=> (= root_3 11)
    (and (= leaf_3_2 0) (= #b00000 bv_3_2_a) (= #b00000 bv_3_2_b))))
(assert (=> (= root_3 11)
    (and (= leaf_3_3 0) (= #b00000 bv_3_3_a) (= #b00000 bv_3_3_b))))
(assert (or (= leaf_1_0 159)
    (= leaf_1_1 159)
    (= leaf_1_2 159)
    (= leaf_1_3 159)
    (= leaf_2_0 159)
    (= leaf_2_1 159)
    (= leaf_2_2 159)
    (= leaf_2_3 159)
    (= leaf_3_0 159)
    (= leaf_3_1 159)
    (= leaf_3_2 159)
    (= leaf_3_3 159)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00000 bv_1_2_a)
                    (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b00000 bv_2_2_a)
                    (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b00000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b00000 bv_3_2_a)
                    (distinct #b00000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b00000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b00000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #b00000 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_17_1 <- read_csv("tests-examples/textbook/tables/17-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character(),"cost" = col_integer()))
df_17_1 <- copy_to(con, df_17_1)
df_17_3 <- read_csv("tests-examples/textbook/tables/17-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_17_3 <- copy_to(con, df_17_3)
expected_output <- read_csv("tests-examples/textbook/tables/17.out", col_types = cols("P_id" = col_character(),"S_name" = col_character()))

df33 <- df_17_1 %>% group_by(P_id) %>% summarise(meancost = mean(cost)) %>% ungroup()
df34 <- inner_join(df_17_1, df_17_3, na_matches="never") %>% inner_join(df33, na_matches="never")
df35 <- df34 %>% filter(meancost < cost)
out <- df35 %>% select(P_id, S_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT P_id,
                S_name
FROM
  (SELECT S_key,
          LHS.P_id AS P_id,
          cost,
          S_name,
          meancost
   FROM
     (SELECT LHS.S_key AS S_key,
             P_id,
             cost,
             S_name
      FROM df_17_1 AS LHS
      INNER JOIN df_17_3 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             AVG(cost) AS meancost
      FROM df_17_1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
WHERE (meancost < cost)
