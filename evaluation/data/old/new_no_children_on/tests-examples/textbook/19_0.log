[     2.362][MainProcess][INFO] Parsing specification...
[     2.367][MainProcess][INFO] File read
[     2.368][MainProcess][DEBUG] Reading input files...
[     2.376][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-1.txt: ['string', 'string']
[     2.382][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-2.txt: ['string', 'string']
[     2.387][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-3.txt: ['string', 'string']
[     2.392][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19.out: ['string']
[     2.393][MainProcess][INFO] Parsing sketch...
[     2.393][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.393][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.393][MainProcess][DEBUG] Sketch creation: Line(T3, root=['anti_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Cols, var=[])])
[     2.393][MainProcess][DEBUG] Sketch creation: Line(T4, root=['left_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.434][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 738, 'anti_join': 99, 'left_join': 9, 'union': 9, 'intersect': 36, 'semi_join': 9, 'cross_join': 18, 'filter': 6}
[     2.434][MainProcess][DEBUG] {'natural_join': 0.008645533141210375, 'natural_join3': 0.025936599423631124, 'natural_join4': 0.07780979827089338, 'inner_join': 0.7089337175792507, 'anti_join': 0.09510086455331412, 'left_join': 0.008645533141210375, 'union': 0.008645533141210375, 'intersect': 0.0345821325648415, 'semi_join': 0.008645533141210375, 'cross_join': 0.01729106628242075, 'filter': 0.005763688760806916}
[     2.434][MainProcess][DEBUG] {'natural_join': 0.008645533141210374, 'natural_join3': 0.025936599423631117, 'natural_join4': 0.07780979827089336, 'inner_join': 0.7089337175792506, 'anti_join': 0.0951008645533141, 'left_join': 0.008645533141210374, 'union': 0.008645533141210374, 'intersect': 0.034582132564841495, 'semi_join': 0.008645533141210374, 'cross_join': 0.017291066282420747, 'filter': 0.005763688760806915}
[     2.434][MainProcess][INFO] Building synthesizer...
[     2.436][MainProcess][DEBUG] [Line(T1, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[113, 114, 115]),Child(['??'], type=Table, var=[113, 114, 115]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[113, 114, 115]),Child(['??'], type=FilterCondition, var=[111, 112]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['anti_join'], var=[5], children=[Child(['??'], type=Table, var=[113, 114, 115]),Child(['??'], type=Table, var=[113, 114, 115]),Child(['??'], type=Cols, var=[16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]),Child([None], type=None, var=[0])]), Line(T4, root=['left_join'], var=[6], children=[Child(['??'], type=Table, var=[113, 114, 115]),Child(['??'], type=Table, var=[113, 114, 115]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.637][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 222 constraints
[     2.646][MainProcess][DEBUG] Enumeration time: 0.2115325927734375
[    10.465][MainProcess][DEBUG] Synthesis time: 7.818703889846802
[    10.465][MainProcess][INFO] Solution found: [natural_join(input0, input1), filter(line0, "color != 'red'"), anti_join(input2, line1, 'S_key'), left_join(line2, line0)]
[    10.472][MainProcess][DEBUG] Solution found using process 0
[    10.472][MainProcess][INFO] Statistics:
[    10.473][MainProcess][INFO] 	Attempted programs: 741 (approx)
[    10.473][MainProcess][INFO] 		Rejected: 740 (approx)
[    10.473][MainProcess][INFO] 		Failed: 0 (approx)
[    10.473][MainProcess][INFO] 		Empty outputs: 52 (7.0%) (approx)
[    10.473][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    10.473][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    10.473][MainProcess][INFO] 	Total time spent in enumerator init: 0.211533 (approx)
[    10.473][MainProcess][INFO] 	Total time spent in enumerator: 2.345701 (approx)
[    10.473][MainProcess][INFO] 		Enumerated 315.897106 programs/s avg. (just enumeration time)
[    10.473][MainProcess][INFO] 		Enumerated 75.686836 programs/s avg. (overall)
[    10.473][MainProcess][INFO] 	Total time spent in evaluation & testing: 4.659090 (approx)
[    10.473][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.809572 (approx)
[    10.473][MainProcess][INFO] Solution found: [natural_join(input0, input1), filter(line0, "color != 'red'"), anti_join(input2, line1, 'S_key'), left_join(line2, line0)]
[    10.474][MainProcess][INFO] Solution size: 4
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun type_4 () Int)
(declare-fun root_4 () Int)
(declare-fun leaf_4_0 () Int)
(declare-fun leaf_4_1 () Int)
(declare-fun leaf_4_2 () Int)
(declare-fun leaf_4_3 () Int)
(declare-fun leaf_4_3_is_line_1 () Bool)
(declare-fun leaf_4_2_is_line_1 () Bool)
(declare-fun leaf_4_1_is_line_1 () Bool)
(declare-fun leaf_4_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_4_3_is_line_2 () Bool)
(declare-fun leaf_4_2_is_line_2 () Bool)
(declare-fun leaf_4_1_is_line_2 () Bool)
(declare-fun leaf_4_0_is_line_2 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun leaf_4_3_is_line_3 () Bool)
(declare-fun leaf_4_2_is_line_3 () Bool)
(declare-fun leaf_4_1_is_line_3 () Bool)
(declare-fun leaf_4_0_is_line_3 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_2_0_b () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(declare-fun bv_2_0_a () (_ BitVec 4))
(declare-fun bv_2_1_b () (_ BitVec 4))
(declare-fun bv_2_1_a () (_ BitVec 4))
(declare-fun bv_2_2_b () (_ BitVec 4))
(declare-fun bv_2_2_a () (_ BitVec 4))
(declare-fun bv_2_3_b () (_ BitVec 4))
(declare-fun bv_2_3_a () (_ BitVec 4))
(declare-fun bv_3_0_b () (_ BitVec 4))
(declare-fun bv_2 () (_ BitVec 4))
(declare-fun bv_3_0_a () (_ BitVec 4))
(declare-fun bv_3_1_b () (_ BitVec 4))
(declare-fun bv_3_1_a () (_ BitVec 4))
(declare-fun bv_3_2_b () (_ BitVec 4))
(declare-fun bv_3_2_a () (_ BitVec 4))
(declare-fun bv_3_3_b () (_ BitVec 4))
(declare-fun bv_3_3_a () (_ BitVec 4))
(declare-fun bv_4_0_b () (_ BitVec 4))
(declare-fun bv_3 () (_ BitVec 4))
(declare-fun bv_4_0_a () (_ BitVec 4))
(declare-fun bv_4_1_b () (_ BitVec 4))
(declare-fun bv_4_1_a () (_ BitVec 4))
(declare-fun bv_4_2_b () (_ BitVec 4))
(declare-fun bv_4_2_a () (_ BitVec 4))
(declare-fun bv_4_3_b () (_ BitVec 4))
(declare-fun bv_4_3_a () (_ BitVec 4))
(declare-fun bv_4 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 1)))
(assert (or (= leaf_1_0 113) (= leaf_1_0 114) (= leaf_1_0 115)))
(assert (<= leaf_1_0 115))
(assert (>= leaf_1_0 113))
(assert (or (= leaf_1_1 113) (= leaf_1_1 114) (= leaf_1_1 115)))
(assert (<= leaf_1_1 115))
(assert (>= leaf_1_1 113))
(assert (or (= leaf_1_2 0)))
(assert (<= leaf_1_2 0))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 113) (= leaf_2_0 114) (= leaf_2_0 115) (= leaf_2_0 117)))
(assert (<= leaf_2_0 117))
(assert (>= leaf_2_0 113))
(assert (or (= leaf_2_1 111) (= leaf_2_1 112)))
(assert (<= leaf_2_1 112))
(assert (>= leaf_2_1 111))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 5)))
(assert (or (= leaf_3_0 113)
    (= leaf_3_0 114)
    (= leaf_3_0 115)
    (= leaf_3_0 117)
    (= leaf_3_0 118)))
(assert (<= leaf_3_0 118))
(assert (>= leaf_3_0 113))
(assert (or (= leaf_3_1 113)
    (= leaf_3_1 114)
    (= leaf_3_1 115)
    (= leaf_3_1 117)
    (= leaf_3_1 118)))
(assert (<= leaf_3_1 118))
(assert (>= leaf_3_1 113))
(assert (or (= leaf_3_2 16)
    (= leaf_3_2 17)
    (= leaf_3_2 18)
    (= leaf_3_2 19)
    (= leaf_3_2 20)
    (= leaf_3_2 21)
    (= leaf_3_2 22)
    (= leaf_3_2 23)
    (= leaf_3_2 24)
    (= leaf_3_2 25)
    (= leaf_3_2 26)))
(assert (<= leaf_3_2 26))
(assert (>= leaf_3_2 16))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (< type_4 1))
(assert (>= type_4 0))
(assert (or (= root_4 6)))
(assert (or (= leaf_4_0 113)
    (= leaf_4_0 114)
    (= leaf_4_0 115)
    (= leaf_4_0 117)
    (= leaf_4_0 118)
    (= leaf_4_0 119)))
(assert (<= leaf_4_0 119))
(assert (>= leaf_4_0 113))
(assert (or (= leaf_4_1 113)
    (= leaf_4_1 114)
    (= leaf_4_1 115)
    (= leaf_4_1 117)
    (= leaf_4_1 118)
    (= leaf_4_1 119)))
(assert (<= leaf_4_1 119))
(assert (>= leaf_4_1 113))
(assert (or (= leaf_4_2 0)))
(assert (<= leaf_4_2 0))
(assert (>= leaf_4_2 0))
(assert (or (= leaf_4_3 0)))
(assert (<= leaf_4_3 0))
(assert (>= leaf_4_3 0))
(assert (or (= leaf_1_0 113)
    (= leaf_1_1 113)
    (= leaf_1_2 113)
    (= leaf_1_3 113)
    (= leaf_2_0 113)
    (= leaf_2_1 113)
    (= leaf_2_2 113)
    (= leaf_2_3 113)
    (= leaf_3_0 113)
    (= leaf_3_1 113)
    (= leaf_3_2 113)
    (= leaf_3_3 113)
    (= leaf_4_0 113)
    (= leaf_4_1 113)
    (= leaf_4_2 113)
    (= leaf_4_3 113)))
(assert (or (= leaf_1_0 114)
    (= leaf_1_1 114)
    (= leaf_1_2 114)
    (= leaf_1_3 114)
    (= leaf_2_0 114)
    (= leaf_2_1 114)
    (= leaf_2_2 114)
    (= leaf_2_3 114)
    (= leaf_3_0 114)
    (= leaf_3_1 114)
    (= leaf_3_2 114)
    (= leaf_3_3 114)
    (= leaf_4_0 114)
    (= leaf_4_1 114)
    (= leaf_4_2 114)
    (= leaf_4_3 114)))
(assert (or (= leaf_1_0 115)
    (= leaf_1_1 115)
    (= leaf_1_2 115)
    (= leaf_1_3 115)
    (= leaf_2_0 115)
    (= leaf_2_1 115)
    (= leaf_2_2 115)
    (= leaf_2_3 115)
    (= leaf_3_0 115)
    (= leaf_3_1 115)
    (= leaf_3_2 115)
    (= leaf_3_3 115)
    (= leaf_4_0 115)
    (= leaf_4_1 115)
    (= leaf_4_2 115)
    (= leaf_4_3 115)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1
    leaf_4_0_is_line_1
    leaf_4_1_is_line_1
    leaf_4_2_is_line_1
    leaf_4_3_is_line_1))
(assert (or leaf_3_0_is_line_2
    leaf_3_1_is_line_2
    leaf_3_2_is_line_2
    leaf_3_3_is_line_2
    leaf_4_0_is_line_2
    leaf_4_1_is_line_2
    leaf_4_2_is_line_2
    leaf_4_3_is_line_2))
(assert (or leaf_4_0_is_line_3 leaf_4_1_is_line_3 leaf_4_2_is_line_3 leaf_4_3_is_line_3))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_4 1) (= type_4 0)))
(assert (=> (= root_4 2) (= type_4 0)))
(assert (=> (= root_4 3) (= type_4 0)))
(assert (=> (= root_4 4) (= type_4 0)))
(assert (=> (= root_4 5) (= type_4 0)))
(assert (=> (= root_4 6) (= type_4 0)))
(assert (=> (= root_4 7) (= type_4 0)))
(assert (=> (= root_4 8) (= type_4 0)))
(assert (=> (= root_4 9) (= type_4 0)))
(assert (=> (= root_4 10) (= type_4 0)))
(assert (=> (= root_4 11) (= type_4 0)))
(assert (=> (= root_1 1)
    (or (and (= leaf_1_0 113) (= #x3 bv_1_0_a) (= #x0 bv_1_0_b))
        (and (= leaf_1_0 114) (= #x9 bv_1_0_a) (= #x0 bv_1_0_b))
        (and (= leaf_1_0 115) (= #x6 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 1)
    (or (and (= leaf_1_1 113) (= #x3 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 114) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 115) (= #x6 bv_1_1_a) (= #x0 bv_1_1_b)))))
(assert (=> (= root_1 1) (and (= leaf_1_2 0) (= #x0 bv_1_2_a) (= #x0 bv_1_2_b))))
(assert (=> (= root_1 1) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 117)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 113) (= #x3 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 114) (= #x9 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 115) (= #x6 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 117) (= bv_2_0_a bv_1) (= #x0 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 111) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 112) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b)))))
(assert (=> (= root_2 11) (and (= leaf_2_2 0) (= #x0 bv_2_2_a) (= #x0 bv_2_2_b))))
(assert (=> (= root_2 11) (and (= leaf_2_3 0) (= #x0 bv_2_3_a) (= #x0 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 117)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 118)))
(assert (=> (= root_3 5)
    (or (and (= leaf_3_0 113) (= #x3 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 114) (= #x9 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 115) (= #x6 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 117) (= bv_3_0_a bv_1) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 118) (= bv_3_0_a bv_2) (= #x0 bv_3_0_b)))))
(assert (= leaf_3_1_is_line_1 (= leaf_3_1 117)))
(assert (= leaf_3_1_is_line_2 (= leaf_3_1 118)))
(assert (=> (= root_3 5)
    (or (and (= leaf_3_1 113) (= #x3 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 114) (= #x9 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 115) (= #x6 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 117) (= bv_3_1_a bv_1) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 118) (= bv_3_1_a bv_2) (= #x0 bv_3_1_b)))))
(assert (=> (= root_3 5)
    (or (and (= leaf_3_2 16) (= #x0 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 17) (= #x1 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 18) (= #x2 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 19) (= #x4 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 20) (= #x8 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 21) (= #x3 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 22) (= #x5 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 23) (= #x9 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 24) (= #x6 bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 25) (= #xa bv_3_2_a) (= #x0 bv_3_2_b))
        (and (= leaf_3_2 26) (= #xc bv_3_2_a) (= #x0 bv_3_2_b)))))
(assert (=> (= root_3 5) (and (= leaf_3_3 0) (= #x0 bv_3_3_a) (= #x0 bv_3_3_b))))
(assert (= leaf_4_0_is_line_1 (= leaf_4_0 117)))
(assert (= leaf_4_0_is_line_2 (= leaf_4_0 118)))
(assert (= leaf_4_0_is_line_3 (= leaf_4_0 119)))
(assert (=> (= root_4 6)
    (or (and (= leaf_4_0 113) (= #x3 bv_4_0_a) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 114) (= #x9 bv_4_0_a) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 115) (= #x6 bv_4_0_a) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 117) (= bv_4_0_a bv_1) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 118) (= bv_4_0_a bv_2) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 119) (= bv_4_0_a bv_3) (= #x0 bv_4_0_b)))))
(assert (= leaf_4_1_is_line_1 (= leaf_4_1 117)))
(assert (= leaf_4_1_is_line_2 (= leaf_4_1 118)))
(assert (= leaf_4_1_is_line_3 (= leaf_4_1 119)))
(assert (=> (= root_4 6)
    (or (and (= leaf_4_1 113) (= #x3 bv_4_1_a) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 114) (= #x9 bv_4_1_a) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 115) (= #x6 bv_4_1_a) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 117) (= bv_4_1_a bv_1) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 118) (= bv_4_1_a bv_2) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 119) (= bv_4_1_a bv_3) (= #x0 bv_4_1_b)))))
(assert (=> (= root_4 6) (and (= leaf_4_2 0) (= #x0 bv_4_2_a) (= #x0 bv_4_2_b))))
(assert (=> (= root_4 6) (and (= leaf_4_3 0) (= #x0 bv_4_3_a) (= #x0 bv_4_3_b))))
(assert (or (= leaf_1_0 111)
    (= leaf_1_1 111)
    (= leaf_1_2 111)
    (= leaf_1_3 111)
    (= leaf_2_0 111)
    (= leaf_2_1 111)
    (= leaf_2_2 111)
    (= leaf_2_3 111)
    (= leaf_3_0 111)
    (= leaf_3_1 111)
    (= leaf_3_2 111)
    (= leaf_3_3 111)
    (= leaf_4_0 111)
    (= leaf_4_1 111)
    (= leaf_4_2 111)
    (= leaf_4_3 111)
    (= leaf_1_0 112)
    (= leaf_1_1 112)
    (= leaf_1_2 112)
    (= leaf_1_3 112)
    (= leaf_2_0 112)
    (= leaf_2_1 112)
    (= leaf_2_2 112)
    (= leaf_2_3 112)
    (= leaf_3_0 112)
    (= leaf_3_1 112)
    (= leaf_3_2 112)
    (= leaf_3_3 112)
    (= leaf_4_0 112)
    (= leaf_4_1 112)
    (= leaf_4_2 112)
    (= leaf_4_3 112)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 5))
    (distinct root_4 5)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 5))
    (distinct root_4 5)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 5))
    (distinct root_4 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #x0 bv_2_2_a) (distinct #x0 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #x0 bv_3_2_a) (distinct #x0 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #x0 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #x0 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_4 1) (and (< leaf_4_0 leaf_4_1) (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 2)
    (and (< leaf_4_0 leaf_4_1)
         (< leaf_4_1 leaf_4_2)
         (= (bvor bv_4_0_a bv_4_1_a bv_4_2_a) bv_4))))
(assert (=> (= root_4 3)
    (and (< leaf_4_0 leaf_4_1)
         (< leaf_4_1 leaf_4_2)
         (< leaf_4_2 leaf_4_3)
         (= (bvor bv_4_0_a bv_4_1_a bv_4_2_a bv_4_3_a) bv_4))))
(assert (=> (= root_4 4)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_1_a bv_4_2_b) bv_4_2_b)
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (let ((a!1 (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
                (= (bvand bv_4_1_a bv_4_2_a) bv_4_2_a)
                (=> (= #x0 bv_4_2_a) (distinct #x0 (bvand bv_4_0_a bv_4_1_a)))
                (= bv_4_0_a bv_4))))
  (=> (= root_4 5) a!1)))
(assert (=> (= root_4 6)
    (and (distinct #x0 (bvand bv_4_0_a bv_4_1_a))
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 7) (= (bvor bv_4_0_a bv_4_1_a) bv_4)))
(assert (=> (= root_4 8)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_1_a bv_4_2_a) bv_4_2_a)
         (= bv_4_2_a bv_4))))
(assert (=> (= root_4 9)
    (and (distinct #x0 (bvand bv_4_0_a bv_4_1_a)) (= bv_4_0_a bv_4))))
(assert (=> (= root_4 10)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_0_a bv_4_1_a bv_4_2_b) bv_4_2_b)
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 11)
    (and (= (bvand bv_4_0_a bv_4_1_a) bv_4_1_a) (= bv_4_0_a bv_4))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_19_1 <- read_csv("tests-examples/textbook/tables/19-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_19_1 <- copy_to(con, df_19_1)
df_19_2 <- read_csv("tests-examples/textbook/tables/19-2.txt", col_types = cols("P_id" = col_character(),"color" = col_character()))
df_19_2 <- copy_to(con, df_19_2)
df_19_3 <- read_csv("tests-examples/textbook/tables/19-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_19_3 <- copy_to(con, df_19_3)
expected_output <- read_csv("tests-examples/textbook/tables/19.out", col_types = cols("S_name" = col_character()))

df417 <- inner_join(df_19_1, df_19_2, na_matches="never")
df418 <- df417 %>% filter(color != 'red')
df419 <- anti_join(df_19_3, df418, by=c('S_key'), na_matches="never")
df420 <- left_join(df419, df417, na_matches="never")
out <- df420 %>% select(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `S_name`,
          `P_id`,
          `color`
   FROM
     (SELECT *
      FROM `df_19_3` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM
                (SELECT `S_key`,
                        `LHS`.`P_id` AS `P_id`,
                        `color`
                 FROM `df_19_1` AS `LHS`
                 INNER JOIN `df_19_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
              WHERE (`color` != 'red')) AS RHS
           WHERE (LHS.S_key = RHS.S_key) )) AS LHS
   LEFT JOIN
     (SELECT S_key,
             LHS.P_id AS P_id,
             color
      FROM df_19_1 AS LHS
      INNER JOIN df_19_2 AS RHS ON (LHS.P_id = RHS.P_id)) AS RHS ON (LHS.S_key = RHS.S_key))
