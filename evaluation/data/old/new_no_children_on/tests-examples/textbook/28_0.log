[     6.043][MainProcess][INFO] Parsing specification...
[     6.049][MainProcess][INFO] File read
[     6.051][MainProcess][DEBUG] Reading input files...
[     6.066][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'Float64']
[     6.073][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     6.078][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     6.083][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/28.out: ['string']
[     6.083][MainProcess][INFO] Parsing sketch...
[     6.084][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     6.084][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     6.143][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 711, 'anti_join': 198, 'left_join': 9, 'union': 9, 'intersect': 54, 'semi_join': 9, 'cross_join': 18, 'filter': 6}
[     6.143][MainProcess][DEBUG] {'natural_join': 0.007957559681697613, 'natural_join3': 0.023872679045092837, 'natural_join4': 0.07161803713527852, 'inner_join': 0.6286472148541115, 'anti_join': 0.17506631299734748, 'left_join': 0.007957559681697613, 'union': 0.007957559681697613, 'intersect': 0.04774535809018567, 'semi_join': 0.007957559681697613, 'cross_join': 0.015915119363395226, 'filter': 0.005305039787798408}
[     6.143][MainProcess][DEBUG] {'natural_join': 0.007957559681697613, 'natural_join3': 0.023872679045092837, 'natural_join4': 0.07161803713527852, 'inner_join': 0.6286472148541115, 'anti_join': 0.17506631299734748, 'left_join': 0.007957559681697613, 'union': 0.007957559681697613, 'intersect': 0.04774535809018567, 'semi_join': 0.007957559681697613, 'cross_join': 0.015915119363395226, 'filter': 0.005305039787798408}
[     6.143][MainProcess][INFO] Building synthesizer...
[     6.145][MainProcess][DEBUG] [Line(T1, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=FilterCondition, var=[121, 122]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     6.242][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 96 constraints
[     6.248][MainProcess][DEBUG] Enumeration time: 0.10455775260925293
[     6.336][MainProcess][DEBUG] Synthesis time: 0.08722424507141113
[     6.336][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "str_detect(aname, 'Boeing')")]
[     6.337][MainProcess][DEBUG] Solution found using process 0
[     6.337][MainProcess][INFO] Statistics:
[     6.337][MainProcess][INFO] 	Attempted programs: 3 (approx)
[     6.337][MainProcess][INFO] 		Rejected: 2 (approx)
[     6.337][MainProcess][INFO] 		Failed: 0 (approx)
[     6.337][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     6.337][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     6.337][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     6.337][MainProcess][INFO] 	Total time spent in enumerator init: 0.104558 (approx)
[     6.338][MainProcess][INFO] 	Total time spent in enumerator: 0.004942 (approx)
[     6.338][MainProcess][INFO] 		Enumerated 607.078304 programs/s avg. (just enumeration time)
[     6.338][MainProcess][INFO] 		Enumerated 0.644338 programs/s avg. (overall)
[     6.338][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.077636 (approx)
[     6.338][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.003774 (approx)
[     6.338][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "str_detect(aname, 'Boeing')")]
[     6.338][MainProcess][INFO] Solution size: 2
[     6.755][MainProcess][ERROR] Error while trying to convert R code to SQL.
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 6))
(declare-fun bv_1_0_a () (_ BitVec 6))
(declare-fun bv_1_1_b () (_ BitVec 6))
(declare-fun bv_1_1_a () (_ BitVec 6))
(declare-fun bv_1_2_b () (_ BitVec 6))
(declare-fun bv_1_2_a () (_ BitVec 6))
(declare-fun bv_1_3_b () (_ BitVec 6))
(declare-fun bv_1_3_a () (_ BitVec 6))
(declare-fun bv_2_0_b () (_ BitVec 6))
(declare-fun bv_1 () (_ BitVec 6))
(declare-fun bv_2_0_a () (_ BitVec 6))
(declare-fun bv_2_1_b () (_ BitVec 6))
(declare-fun bv_2_1_a () (_ BitVec 6))
(declare-fun bv_2_2_b () (_ BitVec 6))
(declare-fun bv_2_2_a () (_ BitVec 6))
(declare-fun bv_2_3_b () (_ BitVec 6))
(declare-fun bv_2_3_a () (_ BitVec 6))
(declare-fun bv_2 () (_ BitVec 6))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 2)))
(assert (or (= leaf_1_0 123) (= leaf_1_0 124) (= leaf_1_0 125)))
(assert (<= leaf_1_0 125))
(assert (>= leaf_1_0 123))
(assert (or (= leaf_1_1 123) (= leaf_1_1 124) (= leaf_1_1 125)))
(assert (<= leaf_1_1 125))
(assert (>= leaf_1_1 123))
(assert (or (= leaf_1_2 123) (= leaf_1_2 124) (= leaf_1_2 125)))
(assert (<= leaf_1_2 125))
(assert (>= leaf_1_2 123))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 123) (= leaf_2_0 124) (= leaf_2_0 125) (= leaf_2_0 127)))
(assert (<= leaf_2_0 127))
(assert (>= leaf_2_0 123))
(assert (or (= leaf_2_1 121) (= leaf_2_1 122)))
(assert (<= leaf_2_1 122))
(assert (>= leaf_2_1 121))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 123)
    (= leaf_1_1 123)
    (= leaf_1_2 123)
    (= leaf_1_3 123)
    (= leaf_2_0 123)
    (= leaf_2_1 123)
    (= leaf_2_2 123)
    (= leaf_2_3 123)))
(assert (or (= leaf_1_0 124)
    (= leaf_1_1 124)
    (= leaf_1_2 124)
    (= leaf_1_3 124)
    (= leaf_2_0 124)
    (= leaf_2_1 124)
    (= leaf_2_2 124)
    (= leaf_2_3 124)))
(assert (or (= leaf_1_0 125)
    (= leaf_1_1 125)
    (= leaf_1_2 125)
    (= leaf_1_3 125)
    (= leaf_2_0 125)
    (= leaf_2_1 125)
    (= leaf_2_2 125)
    (= leaf_2_3 125)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_0 123) (= #b111000 bv_1_0_a) (= #b000000 bv_1_0_b))
        (and (= leaf_1_0 124) (= #b000111 bv_1_0_a) (= #b000000 bv_1_0_b))
        (and (= leaf_1_0 125) (= #b001001 bv_1_0_a) (= #b000000 bv_1_0_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_1 123) (= #b111000 bv_1_1_a) (= #b000000 bv_1_1_b))
        (and (= leaf_1_1 124) (= #b000111 bv_1_1_a) (= #b000000 bv_1_1_b))
        (and (= leaf_1_1 125) (= #b001001 bv_1_1_a) (= #b000000 bv_1_1_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_2 123) (= #b111000 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 124) (= #b000111 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 125) (= #b001001 bv_1_2_a) (= #b000000 bv_1_2_b)))))
(assert (=> (= root_1 2)
    (and (= leaf_1_3 0) (= #b000000 bv_1_3_a) (= #b000000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 127)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 123) (= #b111000 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 124) (= #b000111 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 125) (= #b001001 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 127) (= bv_2_0_a bv_1) (= #b000000 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 121) (= #b000010 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 122) (= #b000010 bv_2_1_a) (= #b000000 bv_2_1_b)))))
(assert (=> (= root_2 11)
    (and (= leaf_2_2 0) (= #b000000 bv_2_2_a) (= #b000000 bv_2_2_b))))
(assert (=> (= root_2 11)
    (and (= leaf_2_3 0) (= #b000000 bv_2_3_a) (= #b000000 bv_2_3_b))))
(assert (or (= leaf_1_0 121)
    (= leaf_1_1 121)
    (= leaf_1_2 121)
    (= leaf_1_3 121)
    (= leaf_2_0 121)
    (= leaf_2_1 121)
    (= leaf_2_2 121)
    (= leaf_2_3 121)
    (= leaf_1_0 122)
    (= leaf_1_1 122)
    (= leaf_1_2 122)
    (= leaf_1_3 122)
    (= leaf_2_0 122)
    (= leaf_2_1 122)
    (= leaf_2_2 122)
    (= leaf_2_3 122)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000000 bv_1_2_a)
                    (distinct #b000000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b000000 bv_2_2_a)
                    (distinct #b000000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b000000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b000000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_employees <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols("eid" = col_integer(),"ename" = col_character(),"salary" = col_double()))
df_employees <- copy_to(con, df_employees)
df_aircraft <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols("aid" = col_integer(),"aname" = col_character(),"crusingrange" = col_integer()))
df_aircraft <- copy_to(con, df_aircraft)
df_certified <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols("eid" = col_integer(),"aid" = col_integer()))
df_certified <- copy_to(con, df_certified)
expected_output <- read_csv("tests-examples/textbook/tables/28.out", col_types = cols("ename" = col_character()))

df5 <- full_join(df_employees, df_aircraft, by=character(), na_matches="never") %>% inner_join(df_certified, na_matches="never")
df6 <- df5 %>% filter(str_detect(aname, 'Boeing'))
out <- df6 %>% select(ename) %>% distinct()

Failed to generate SQL query
