[     5.797][MainProcess][INFO] Parsing specification...
[     5.804][MainProcess][INFO] File read
[     5.804][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     5.804][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     5.804][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     5.806][MainProcess][DEBUG] Reading input files...
[     5.822][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-1.txt: ['string', 'string']
[     5.828][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-2.txt: ['string', 'string']
[     5.834][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3.out: ['string']
[     5.834][MainProcess][INFO] Parsing sketch...
[     5.834][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     5.835][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     5.835][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     5.891][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 120, 'anti_join': 28, 'left_join': 4, 'union': 4, 'intersect': 12, 'semi_join': 4, 'cross_join': 128, 'filter': 64, 'summarise': 14, 'mutate': 2}
[     5.891][MainProcess][DEBUG] {'natural_join': 0.00980392156862745, 'natural_join3': 0.0196078431372549, 'natural_join4': 0.0392156862745098, 'inner_join': 0.29411764705882354, 'anti_join': 0.06862745098039216, 'left_join': 0.00980392156862745, 'union': 0.00980392156862745, 'intersect': 0.029411764705882353, 'semi_join': 0.00980392156862745, 'cross_join': 0.3137254901960784, 'filter': 0.1568627450980392, 'summarise': 0.03431372549019608, 'mutate': 0.004901960784313725}
[     5.891][MainProcess][DEBUG] {'natural_join': 0.00980392156862745, 'natural_join3': 0.0196078431372549, 'natural_join4': 0.0392156862745098, 'inner_join': 0.29411764705882354, 'anti_join': 0.06862745098039216, 'left_join': 0.00980392156862745, 'union': 0.00980392156862745, 'intersect': 0.029411764705882353, 'semi_join': 0.00980392156862745, 'cross_join': 0.3137254901960784, 'filter': 0.1568627450980392, 'summarise': 0.03431372549019608, 'mutate': 0.004901960784313725}
[     5.891][MainProcess][INFO] Building synthesizer...
[     5.893][MainProcess][DEBUG] [Line(T1, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[119, 120]),Child(['??'], type=Table, var=[119, 120]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[119, 120]),Child(['??'], type=SummariseCondition, var=[118]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[119, 120]),Child(['??'], type=FilterCondition, var=[86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     6.252][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 166 constraints
[     6.262][MainProcess][DEBUG] Enumeration time: 0.3706507682800293
[     6.997][MainProcess][DEBUG] Synthesis time: 0.7350945472717285
[     6.998][MainProcess][INFO] Solution found: [natural_join(input0, input1), summarise(line0, 'n = n()', 'ID_key,Room'), filter(line1, "Room == 'R128' | n > 4")]
[     6.999][MainProcess][DEBUG] Solution found using process 0
[     6.999][MainProcess][INFO] Statistics:
[     6.999][MainProcess][INFO] 	Attempted programs: 77 (approx)
[     6.999][MainProcess][INFO] 		Rejected: 76 (approx)
[     6.999][MainProcess][INFO] 		Failed: 0 (approx)
[     7.000][MainProcess][INFO] 		Empty outputs: 20 (26.0%) (approx)
[     7.000][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     7.000][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     7.000][MainProcess][INFO] 	Total time spent in enumerator init: 0.370651 (approx)
[     7.000][MainProcess][INFO] 	Total time spent in enumerator: 0.150423 (approx)
[     7.000][MainProcess][INFO] 		Enumerated 511.889634 programs/s avg. (just enumeration time)
[     7.000][MainProcess][INFO] 		Enumerated 14.167282 programs/s avg. (overall)
[     7.000][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.517040 (approx)
[     7.000][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.066352 (approx)
[     7.000][MainProcess][INFO] Solution found: [natural_join(input0, input1), summarise(line0, 'n = n()', 'ID_key,Room'), filter(line1, "Room == 'R128' | n > 4")]
[     7.000][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_2_0_b () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(declare-fun bv_2_0_a () (_ BitVec 4))
(declare-fun bv_2_1_b () (_ BitVec 4))
(declare-fun bv_2_1_a () (_ BitVec 4))
(declare-fun bv_2_2_b () (_ BitVec 4))
(declare-fun bv_2_2_a () (_ BitVec 4))
(declare-fun bv_2_3_b () (_ BitVec 4))
(declare-fun bv_2_3_a () (_ BitVec 4))
(declare-fun bv_3_0_b () (_ BitVec 4))
(declare-fun bv_2 () (_ BitVec 4))
(declare-fun bv_3_0_a () (_ BitVec 4))
(declare-fun bv_3_1_b () (_ BitVec 4))
(declare-fun bv_3_1_a () (_ BitVec 4))
(declare-fun bv_3_2_b () (_ BitVec 4))
(declare-fun bv_3_2_a () (_ BitVec 4))
(declare-fun bv_3_3_b () (_ BitVec 4))
(declare-fun bv_3_3_a () (_ BitVec 4))
(declare-fun bv_3 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 1)))
(assert (or (= leaf_1_0 119) (= leaf_1_0 120)))
(assert (<= leaf_1_0 120))
(assert (>= leaf_1_0 119))
(assert (or (= leaf_1_1 119) (= leaf_1_1 120)))
(assert (<= leaf_1_1 120))
(assert (>= leaf_1_1 119))
(assert (or (= leaf_1_2 0)))
(assert (<= leaf_1_2 0))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 12)))
(assert (or (= leaf_2_0 119) (= leaf_2_0 120) (= leaf_2_0 122)))
(assert (<= leaf_2_0 122))
(assert (>= leaf_2_0 119))
(assert (or (= leaf_2_1 118)))
(assert (<= leaf_2_1 118))
(assert (>= leaf_2_1 118))
(assert (or (= leaf_2_2 17)
    (= leaf_2_2 18)
    (= leaf_2_2 19)
    (= leaf_2_2 20)
    (= leaf_2_2 21)
    (= leaf_2_2 22)
    (= leaf_2_2 23)))
(assert (<= leaf_2_2 23))
(assert (>= leaf_2_2 17))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 11)))
(assert (or (= leaf_3_0 119) (= leaf_3_0 120) (= leaf_3_0 122) (= leaf_3_0 123)))
(assert (<= leaf_3_0 123))
(assert (>= leaf_3_0 119))
(assert (or (= leaf_3_1 86)
    (= leaf_3_1 87)
    (= leaf_3_1 88)
    (= leaf_3_1 89)
    (= leaf_3_1 90)
    (= leaf_3_1 91)
    (= leaf_3_1 92)
    (= leaf_3_1 93)
    (= leaf_3_1 94)
    (= leaf_3_1 95)
    (= leaf_3_1 96)
    (= leaf_3_1 97)
    (= leaf_3_1 98)
    (= leaf_3_1 99)
    (= leaf_3_1 100)
    (= leaf_3_1 101)
    (= leaf_3_1 102)
    (= leaf_3_1 103)
    (= leaf_3_1 104)
    (= leaf_3_1 105)
    (= leaf_3_1 106)
    (= leaf_3_1 107)
    (= leaf_3_1 108)
    (= leaf_3_1 109)
    (= leaf_3_1 110)
    (= leaf_3_1 111)
    (= leaf_3_1 112)
    (= leaf_3_1 113)
    (= leaf_3_1 114)
    (= leaf_3_1 115)
    (= leaf_3_1 116)
    (= leaf_3_1 117)))
(assert (<= leaf_3_1 117))
(assert (>= leaf_3_1 86))
(assert (or (= leaf_3_2 0)))
(assert (<= leaf_3_2 0))
(assert (>= leaf_3_2 0))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 119)
    (= leaf_1_1 119)
    (= leaf_1_2 119)
    (= leaf_1_3 119)
    (= leaf_2_0 119)
    (= leaf_2_1 119)
    (= leaf_2_2 119)
    (= leaf_2_3 119)
    (= leaf_3_0 119)
    (= leaf_3_1 119)
    (= leaf_3_2 119)
    (= leaf_3_3 119)))
(assert (or (= leaf_1_0 120)
    (= leaf_1_1 120)
    (= leaf_1_2 120)
    (= leaf_1_3 120)
    (= leaf_2_0 120)
    (= leaf_2_1 120)
    (= leaf_2_2 120)
    (= leaf_2_3 120)
    (= leaf_3_0 120)
    (= leaf_3_1 120)
    (= leaf_3_2 120)
    (= leaf_3_3 120)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_1 1)
    (or (and (= leaf_1_0 119) (= #x5 bv_1_0_a) (= #x0 bv_1_0_b))
        (and (= leaf_1_0 120) (= #x3 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 1)
    (or (and (= leaf_1_1 119) (= #x5 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 120) (= #x3 bv_1_1_a) (= #x0 bv_1_1_b)))))
(assert (=> (= root_1 1) (and (= leaf_1_2 0) (= #x0 bv_1_2_a) (= #x0 bv_1_2_b))))
(assert (=> (= root_1 1) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 122)))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_0 119) (= #x5 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 120) (= #x3 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 122) (= bv_2_0_a bv_1) (= #x0 bv_2_0_b)))))
(assert (=> (= root_2 12) (or (and (= leaf_2_1 118) (= #x0 bv_2_1_a) (= #x8 bv_2_1_b)))))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_2 17) (= #x0 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 18) (= #x1 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 19) (= #x2 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 20) (= #x4 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 21) (= #x3 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 22) (= #x5 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 23) (= #x6 bv_2_2_a) (= #x0 bv_2_2_b)))))
(assert (=> (= root_2 12) (and (= leaf_2_3 0) (= #x0 bv_2_3_a) (= #x0 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 122)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 123)))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_0 119) (= #x5 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 120) (= #x3 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 122) (= bv_3_0_a bv_1) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 123) (= bv_3_0_a bv_2) (= #x0 bv_3_0_b)))))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_1 86) (= #x4 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 87) (= #x4 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 88) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 89) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 90) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 91) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 92) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 93) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 94) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 95) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 96) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 97) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 98) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 99) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 100) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 101) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 102) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 103) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 104) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 105) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 106) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 107) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 108) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 109) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 110) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 111) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 112) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 113) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 114) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 115) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 116) (= #xc bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 117) (= #xc bv_3_1_a) (= #x0 bv_3_1_b)))))
(assert (=> (= root_3 11) (and (= leaf_3_2 0) (= #x0 bv_3_2_a) (= #x0 bv_3_2_b))))
(assert (=> (= root_3 11) (and (= leaf_3_3 0) (= #x0 bv_3_3_a) (= #x0 bv_3_3_b))))
(assert (or (= leaf_1_0 118)
    (= leaf_1_1 118)
    (= leaf_1_2 118)
    (= leaf_1_3 118)
    (= leaf_2_0 118)
    (= leaf_2_1 118)
    (= leaf_2_2 118)
    (= leaf_2_3 118)
    (= leaf_3_0 118)
    (= leaf_3_1 118)
    (= leaf_3_2 118)
    (= leaf_3_3 118)))
(assert (or (= leaf_1_0 86)
    (= leaf_1_1 86)
    (= leaf_1_2 86)
    (= leaf_1_3 86)
    (= leaf_2_0 86)
    (= leaf_2_1 86)
    (= leaf_2_2 86)
    (= leaf_2_3 86)
    (= leaf_3_0 86)
    (= leaf_3_1 86)
    (= leaf_3_2 86)
    (= leaf_3_3 86)
    (= leaf_1_0 87)
    (= leaf_1_1 87)
    (= leaf_1_2 87)
    (= leaf_1_3 87)
    (= leaf_2_0 87)
    (= leaf_2_1 87)
    (= leaf_2_2 87)
    (= leaf_2_3 87)
    (= leaf_3_0 87)
    (= leaf_3_1 87)
    (= leaf_3_2 87)
    (= leaf_3_3 87)
    (= leaf_1_0 95)
    (= leaf_1_1 95)
    (= leaf_1_2 95)
    (= leaf_1_3 95)
    (= leaf_2_0 95)
    (= leaf_2_1 95)
    (= leaf_2_2 95)
    (= leaf_2_3 95)
    (= leaf_3_0 95)
    (= leaf_3_1 95)
    (= leaf_3_2 95)
    (= leaf_3_3 95)
    (= leaf_1_0 94)
    (= leaf_1_1 94)
    (= leaf_1_2 94)
    (= leaf_1_3 94)
    (= leaf_2_0 94)
    (= leaf_2_1 94)
    (= leaf_2_2 94)
    (= leaf_2_3 94)
    (= leaf_3_0 94)
    (= leaf_3_1 94)
    (= leaf_3_2 94)
    (= leaf_3_3 94)
    (= leaf_1_0 97)
    (= leaf_1_1 97)
    (= leaf_1_2 97)
    (= leaf_1_3 97)
    (= leaf_2_0 97)
    (= leaf_2_1 97)
    (= leaf_2_2 97)
    (= leaf_2_3 97)
    (= leaf_3_0 97)
    (= leaf_3_1 97)
    (= leaf_3_2 97)
    (= leaf_3_3 97)
    (= leaf_1_0 96)
    (= leaf_1_1 96)
    (= leaf_1_2 96)
    (= leaf_1_3 96)
    (= leaf_2_0 96)
    (= leaf_2_1 96)
    (= leaf_2_2 96)
    (= leaf_2_3 96)
    (= leaf_3_0 96)
    (= leaf_3_1 96)
    (= leaf_3_2 96)
    (= leaf_3_3 96)
    (= leaf_1_0 99)
    (= leaf_1_1 99)
    (= leaf_1_2 99)
    (= leaf_1_3 99)
    (= leaf_2_0 99)
    (= leaf_2_1 99)
    (= leaf_2_2 99)
    (= leaf_2_3 99)
    (= leaf_3_0 99)
    (= leaf_3_1 99)
    (= leaf_3_2 99)
    (= leaf_3_3 99)
    (= leaf_1_0 98)
    (= leaf_1_1 98)
    (= leaf_1_2 98)
    (= leaf_1_3 98)
    (= leaf_2_0 98)
    (= leaf_2_1 98)
    (= leaf_2_2 98)
    (= leaf_2_3 98)
    (= leaf_3_0 98)
    (= leaf_3_1 98)
    (= leaf_3_2 98)
    (= leaf_3_3 98)
    (= leaf_1_0 101)
    (= leaf_1_1 101)
    (= leaf_1_2 101)
    (= leaf_1_3 101)
    (= leaf_2_0 101)
    (= leaf_2_1 101)
    (= leaf_2_2 101)
    (= leaf_2_3 101)
    (= leaf_3_0 101)
    (= leaf_3_1 101)
    (= leaf_3_2 101)
    (= leaf_3_3 101)
    (= leaf_1_0 100)
    (= leaf_1_1 100)
    (= leaf_1_2 100)
    (= leaf_1_3 100)
    (= leaf_2_0 100)
    (= leaf_2_1 100)
    (= leaf_2_2 100)
    (= leaf_2_3 100)
    (= leaf_3_0 100)
    (= leaf_3_1 100)
    (= leaf_3_2 100)
    (= leaf_3_3 100)
    (= leaf_1_0 103)
    (= leaf_1_1 103)
    (= leaf_1_2 103)
    (= leaf_1_3 103)
    (= leaf_2_0 103)
    (= leaf_2_1 103)
    (= leaf_2_2 103)
    (= leaf_2_3 103)
    (= leaf_3_0 103)
    (= leaf_3_1 103)
    (= leaf_3_2 103)
    (= leaf_3_3 103)
    (= leaf_1_0 102)
    (= leaf_1_1 102)
    (= leaf_1_2 102)
    (= leaf_1_3 102)
    (= leaf_2_0 102)
    (= leaf_2_1 102)
    (= leaf_2_2 102)
    (= leaf_2_3 102)
    (= leaf_3_0 102)
    (= leaf_3_1 102)
    (= leaf_3_2 102)
    (= leaf_3_3 102)
    (= leaf_1_0 105)
    (= leaf_1_1 105)
    (= leaf_1_2 105)
    (= leaf_1_3 105)
    (= leaf_2_0 105)
    (= leaf_2_1 105)
    (= leaf_2_2 105)
    (= leaf_2_3 105)
    (= leaf_3_0 105)
    (= leaf_3_1 105)
    (= leaf_3_2 105)
    (= leaf_3_3 105)
    (= leaf_1_0 104)
    (= leaf_1_1 104)
    (= leaf_1_2 104)
    (= leaf_1_3 104)
    (= leaf_2_0 104)
    (= leaf_2_1 104)
    (= leaf_2_2 104)
    (= leaf_2_3 104)
    (= leaf_3_0 104)
    (= leaf_3_1 104)
    (= leaf_3_2 104)
    (= leaf_3_3 104)
    (= leaf_1_0 107)
    (= leaf_1_1 107)
    (= leaf_1_2 107)
    (= leaf_1_3 107)
    (= leaf_2_0 107)
    (= leaf_2_1 107)
    (= leaf_2_2 107)
    (= leaf_2_3 107)
    (= leaf_3_0 107)
    (= leaf_3_1 107)
    (= leaf_3_2 107)
    (= leaf_3_3 107)
    (= leaf_1_0 106)
    (= leaf_1_1 106)
    (= leaf_1_2 106)
    (= leaf_1_3 106)
    (= leaf_2_0 106)
    (= leaf_2_1 106)
    (= leaf_2_2 106)
    (= leaf_2_3 106)
    (= leaf_3_0 106)
    (= leaf_3_1 106)
    (= leaf_3_2 106)
    (= leaf_3_3 106)
    (= leaf_1_0 109)
    (= leaf_1_1 109)
    (= leaf_1_2 109)
    (= leaf_1_3 109)
    (= leaf_2_0 109)
    (= leaf_2_1 109)
    (= leaf_2_2 109)
    (= leaf_2_3 109)
    (= leaf_3_0 109)
    (= leaf_3_1 109)
    (= leaf_3_2 109)
    (= leaf_3_3 109)
    (= leaf_1_0 108)
    (= leaf_1_1 108)
    (= leaf_1_2 108)
    (= leaf_1_3 108)
    (= leaf_2_0 108)
    (= leaf_2_1 108)
    (= leaf_2_2 108)
    (= leaf_2_3 108)
    (= leaf_3_0 108)
    (= leaf_3_1 108)
    (= leaf_3_2 108)
    (= leaf_3_3 108)
    (= leaf_1_0 111)
    (= leaf_1_1 111)
    (= leaf_1_2 111)
    (= leaf_1_3 111)
    (= leaf_2_0 111)
    (= leaf_2_1 111)
    (= leaf_2_2 111)
    (= leaf_2_3 111)
    (= leaf_3_0 111)
    (= leaf_3_1 111)
    (= leaf_3_2 111)
    (= leaf_3_3 111)
    (= leaf_1_0 110)
    (= leaf_1_1 110)
    (= leaf_1_2 110)
    (= leaf_1_3 110)
    (= leaf_2_0 110)
    (= leaf_2_1 110)
    (= leaf_2_2 110)
    (= leaf_2_3 110)
    (= leaf_3_0 110)
    (= leaf_3_1 110)
    (= leaf_3_2 110)
    (= leaf_3_3 110)
    (= leaf_1_0 113)
    (= leaf_1_1 113)
    (= leaf_1_2 113)
    (= leaf_1_3 113)
    (= leaf_2_0 113)
    (= leaf_2_1 113)
    (= leaf_2_2 113)
    (= leaf_2_3 113)
    (= leaf_3_0 113)
    (= leaf_3_1 113)
    (= leaf_3_2 113)
    (= leaf_3_3 113)
    (= leaf_1_0 112)
    (= leaf_1_1 112)
    (= leaf_1_2 112)
    (= leaf_1_3 112)
    (= leaf_2_0 112)
    (= leaf_2_1 112)
    (= leaf_2_2 112)
    (= leaf_2_3 112)
    (= leaf_3_0 112)
    (= leaf_3_1 112)
    (= leaf_3_2 112)
    (= leaf_3_3 112)
    (= leaf_1_0 115)
    (= leaf_1_1 115)
    (= leaf_1_2 115)
    (= leaf_1_3 115)
    (= leaf_2_0 115)
    (= leaf_2_1 115)
    (= leaf_2_2 115)
    (= leaf_2_3 115)
    (= leaf_3_0 115)
    (= leaf_3_1 115)
    (= leaf_3_2 115)
    (= leaf_3_3 115)
    (= leaf_1_0 114)
    (= leaf_1_1 114)
    (= leaf_1_2 114)
    (= leaf_1_3 114)
    (= leaf_2_0 114)
    (= leaf_2_1 114)
    (= leaf_2_2 114)
    (= leaf_2_3 114)
    (= leaf_3_0 114)
    (= leaf_3_1 114)
    (= leaf_3_2 114)
    (= leaf_3_3 114)
    (= leaf_1_0 117)
    (= leaf_1_1 117)
    (= leaf_1_2 117)
    (= leaf_1_3 117)
    (= leaf_2_0 117)
    (= leaf_2_1 117)
    (= leaf_2_2 117)
    (= leaf_2_3 117)
    (= leaf_3_0 117)
    (= leaf_3_1 117)
    (= leaf_3_2 117)
    (= leaf_3_3 117)
    (= leaf_1_0 116)
    (= leaf_1_1 116)
    (= leaf_1_2 116)
    (= leaf_1_3 116)
    (= leaf_2_0 116)
    (= leaf_2_1 116)
    (= leaf_2_2 116)
    (= leaf_2_3 116)
    (= leaf_3_0 116)
    (= leaf_3_1 116)
    (= leaf_3_2 116)
    (= leaf_3_3 116)))
(assert (or (= leaf_1_0 88)
    (= leaf_1_1 88)
    (= leaf_1_2 88)
    (= leaf_1_3 88)
    (= leaf_2_0 88)
    (= leaf_2_1 88)
    (= leaf_2_2 88)
    (= leaf_2_3 88)
    (= leaf_3_0 88)
    (= leaf_3_1 88)
    (= leaf_3_2 88)
    (= leaf_3_3 88)
    (= leaf_1_0 89)
    (= leaf_1_1 89)
    (= leaf_1_2 89)
    (= leaf_1_3 89)
    (= leaf_2_0 89)
    (= leaf_2_1 89)
    (= leaf_2_2 89)
    (= leaf_2_3 89)
    (= leaf_3_0 89)
    (= leaf_3_1 89)
    (= leaf_3_2 89)
    (= leaf_3_3 89)
    (= leaf_1_0 90)
    (= leaf_1_1 90)
    (= leaf_1_2 90)
    (= leaf_1_3 90)
    (= leaf_2_0 90)
    (= leaf_2_1 90)
    (= leaf_2_2 90)
    (= leaf_2_3 90)
    (= leaf_3_0 90)
    (= leaf_3_1 90)
    (= leaf_3_2 90)
    (= leaf_3_3 90)
    (= leaf_1_0 91)
    (= leaf_1_1 91)
    (= leaf_1_2 91)
    (= leaf_1_3 91)
    (= leaf_2_0 91)
    (= leaf_2_1 91)
    (= leaf_2_2 91)
    (= leaf_2_3 91)
    (= leaf_3_0 91)
    (= leaf_3_1 91)
    (= leaf_3_2 91)
    (= leaf_3_3 91)
    (= leaf_1_0 92)
    (= leaf_1_1 92)
    (= leaf_1_2 92)
    (= leaf_1_3 92)
    (= leaf_2_0 92)
    (= leaf_2_1 92)
    (= leaf_2_2 92)
    (= leaf_2_3 92)
    (= leaf_3_0 92)
    (= leaf_3_1 92)
    (= leaf_3_2 92)
    (= leaf_3_3 92)
    (= leaf_1_0 93)
    (= leaf_1_1 93)
    (= leaf_1_2 93)
    (= leaf_1_3 93)
    (= leaf_2_0 93)
    (= leaf_2_1 93)
    (= leaf_2_2 93)
    (= leaf_2_3 93)
    (= leaf_3_0 93)
    (= leaf_3_1 93)
    (= leaf_3_2 93)
    (= leaf_3_3 93)
    (= leaf_1_0 95)
    (= leaf_1_1 95)
    (= leaf_1_2 95)
    (= leaf_1_3 95)
    (= leaf_2_0 95)
    (= leaf_2_1 95)
    (= leaf_2_2 95)
    (= leaf_2_3 95)
    (= leaf_3_0 95)
    (= leaf_3_1 95)
    (= leaf_3_2 95)
    (= leaf_3_3 95)
    (= leaf_1_0 94)
    (= leaf_1_1 94)
    (= leaf_1_2 94)
    (= leaf_1_3 94)
    (= leaf_2_0 94)
    (= leaf_2_1 94)
    (= leaf_2_2 94)
    (= leaf_2_3 94)
    (= leaf_3_0 94)
    (= leaf_3_1 94)
    (= leaf_3_2 94)
    (= leaf_3_3 94)
    (= leaf_1_0 97)
    (= leaf_1_1 97)
    (= leaf_1_2 97)
    (= leaf_1_3 97)
    (= leaf_2_0 97)
    (= leaf_2_1 97)
    (= leaf_2_2 97)
    (= leaf_2_3 97)
    (= leaf_3_0 97)
    (= leaf_3_1 97)
    (= leaf_3_2 97)
    (= leaf_3_3 97)
    (= leaf_1_0 96)
    (= leaf_1_1 96)
    (= leaf_1_2 96)
    (= leaf_1_3 96)
    (= leaf_2_0 96)
    (= leaf_2_1 96)
    (= leaf_2_2 96)
    (= leaf_2_3 96)
    (= leaf_3_0 96)
    (= leaf_3_1 96)
    (= leaf_3_2 96)
    (= leaf_3_3 96)
    (= leaf_1_0 99)
    (= leaf_1_1 99)
    (= leaf_1_2 99)
    (= leaf_1_3 99)
    (= leaf_2_0 99)
    (= leaf_2_1 99)
    (= leaf_2_2 99)
    (= leaf_2_3 99)
    (= leaf_3_0 99)
    (= leaf_3_1 99)
    (= leaf_3_2 99)
    (= leaf_3_3 99)
    (= leaf_1_0 98)
    (= leaf_1_1 98)
    (= leaf_1_2 98)
    (= leaf_1_3 98)
    (= leaf_2_0 98)
    (= leaf_2_1 98)
    (= leaf_2_2 98)
    (= leaf_2_3 98)
    (= leaf_3_0 98)
    (= leaf_3_1 98)
    (= leaf_3_2 98)
    (= leaf_3_3 98)
    (= leaf_1_0 101)
    (= leaf_1_1 101)
    (= leaf_1_2 101)
    (= leaf_1_3 101)
    (= leaf_2_0 101)
    (= leaf_2_1 101)
    (= leaf_2_2 101)
    (= leaf_2_3 101)
    (= leaf_3_0 101)
    (= leaf_3_1 101)
    (= leaf_3_2 101)
    (= leaf_3_3 101)
    (= leaf_1_0 100)
    (= leaf_1_1 100)
    (= leaf_1_2 100)
    (= leaf_1_3 100)
    (= leaf_2_0 100)
    (= leaf_2_1 100)
    (= leaf_2_2 100)
    (= leaf_2_3 100)
    (= leaf_3_0 100)
    (= leaf_3_1 100)
    (= leaf_3_2 100)
    (= leaf_3_3 100)
    (= leaf_1_0 103)
    (= leaf_1_1 103)
    (= leaf_1_2 103)
    (= leaf_1_3 103)
    (= leaf_2_0 103)
    (= leaf_2_1 103)
    (= leaf_2_2 103)
    (= leaf_2_3 103)
    (= leaf_3_0 103)
    (= leaf_3_1 103)
    (= leaf_3_2 103)
    (= leaf_3_3 103)
    (= leaf_1_0 102)
    (= leaf_1_1 102)
    (= leaf_1_2 102)
    (= leaf_1_3 102)
    (= leaf_2_0 102)
    (= leaf_2_1 102)
    (= leaf_2_2 102)
    (= leaf_2_3 102)
    (= leaf_3_0 102)
    (= leaf_3_1 102)
    (= leaf_3_2 102)
    (= leaf_3_3 102)
    (= leaf_1_0 105)
    (= leaf_1_1 105)
    (= leaf_1_2 105)
    (= leaf_1_3 105)
    (= leaf_2_0 105)
    (= leaf_2_1 105)
    (= leaf_2_2 105)
    (= leaf_2_3 105)
    (= leaf_3_0 105)
    (= leaf_3_1 105)
    (= leaf_3_2 105)
    (= leaf_3_3 105)
    (= leaf_1_0 104)
    (= leaf_1_1 104)
    (= leaf_1_2 104)
    (= leaf_1_3 104)
    (= leaf_2_0 104)
    (= leaf_2_1 104)
    (= leaf_2_2 104)
    (= leaf_2_3 104)
    (= leaf_3_0 104)
    (= leaf_3_1 104)
    (= leaf_3_2 104)
    (= leaf_3_3 104)
    (= leaf_1_0 107)
    (= leaf_1_1 107)
    (= leaf_1_2 107)
    (= leaf_1_3 107)
    (= leaf_2_0 107)
    (= leaf_2_1 107)
    (= leaf_2_2 107)
    (= leaf_2_3 107)
    (= leaf_3_0 107)
    (= leaf_3_1 107)
    (= leaf_3_2 107)
    (= leaf_3_3 107)
    (= leaf_1_0 106)
    (= leaf_1_1 106)
    (= leaf_1_2 106)
    (= leaf_1_3 106)
    (= leaf_2_0 106)
    (= leaf_2_1 106)
    (= leaf_2_2 106)
    (= leaf_2_3 106)
    (= leaf_3_0 106)
    (= leaf_3_1 106)
    (= leaf_3_2 106)
    (= leaf_3_3 106)
    (= leaf_1_0 109)
    (= leaf_1_1 109)
    (= leaf_1_2 109)
    (= leaf_1_3 109)
    (= leaf_2_0 109)
    (= leaf_2_1 109)
    (= leaf_2_2 109)
    (= leaf_2_3 109)
    (= leaf_3_0 109)
    (= leaf_3_1 109)
    (= leaf_3_2 109)
    (= leaf_3_3 109)
    (= leaf_1_0 108)
    (= leaf_1_1 108)
    (= leaf_1_2 108)
    (= leaf_1_3 108)
    (= leaf_2_0 108)
    (= leaf_2_1 108)
    (= leaf_2_2 108)
    (= leaf_2_3 108)
    (= leaf_3_0 108)
    (= leaf_3_1 108)
    (= leaf_3_2 108)
    (= leaf_3_3 108)
    (= leaf_1_0 111)
    (= leaf_1_1 111)
    (= leaf_1_2 111)
    (= leaf_1_3 111)
    (= leaf_2_0 111)
    (= leaf_2_1 111)
    (= leaf_2_2 111)
    (= leaf_2_3 111)
    (= leaf_3_0 111)
    (= leaf_3_1 111)
    (= leaf_3_2 111)
    (= leaf_3_3 111)
    (= leaf_1_0 110)
    (= leaf_1_1 110)
    (= leaf_1_2 110)
    (= leaf_1_3 110)
    (= leaf_2_0 110)
    (= leaf_2_1 110)
    (= leaf_2_2 110)
    (= leaf_2_3 110)
    (= leaf_3_0 110)
    (= leaf_3_1 110)
    (= leaf_3_2 110)
    (= leaf_3_3 110)
    (= leaf_1_0 113)
    (= leaf_1_1 113)
    (= leaf_1_2 113)
    (= leaf_1_3 113)
    (= leaf_2_0 113)
    (= leaf_2_1 113)
    (= leaf_2_2 113)
    (= leaf_2_3 113)
    (= leaf_3_0 113)
    (= leaf_3_1 113)
    (= leaf_3_2 113)
    (= leaf_3_3 113)
    (= leaf_1_0 112)
    (= leaf_1_1 112)
    (= leaf_1_2 112)
    (= leaf_1_3 112)
    (= leaf_2_0 112)
    (= leaf_2_1 112)
    (= leaf_2_2 112)
    (= leaf_2_3 112)
    (= leaf_3_0 112)
    (= leaf_3_1 112)
    (= leaf_3_2 112)
    (= leaf_3_3 112)
    (= leaf_1_0 115)
    (= leaf_1_1 115)
    (= leaf_1_2 115)
    (= leaf_1_3 115)
    (= leaf_2_0 115)
    (= leaf_2_1 115)
    (= leaf_2_2 115)
    (= leaf_2_3 115)
    (= leaf_3_0 115)
    (= leaf_3_1 115)
    (= leaf_3_2 115)
    (= leaf_3_3 115)
    (= leaf_1_0 114)
    (= leaf_1_1 114)
    (= leaf_1_2 114)
    (= leaf_1_3 114)
    (= leaf_2_0 114)
    (= leaf_2_1 114)
    (= leaf_2_2 114)
    (= leaf_2_3 114)
    (= leaf_3_0 114)
    (= leaf_3_1 114)
    (= leaf_3_2 114)
    (= leaf_3_3 114)
    (= leaf_1_0 117)
    (= leaf_1_1 117)
    (= leaf_1_2 117)
    (= leaf_1_3 117)
    (= leaf_2_0 117)
    (= leaf_2_1 117)
    (= leaf_2_2 117)
    (= leaf_2_3 117)
    (= leaf_3_0 117)
    (= leaf_3_1 117)
    (= leaf_3_2 117)
    (= leaf_3_3 117)
    (= leaf_1_0 116)
    (= leaf_1_1 116)
    (= leaf_1_2 116)
    (= leaf_1_3 116)
    (= leaf_2_0 116)
    (= leaf_2_1 116)
    (= leaf_2_2 116)
    (= leaf_2_3 116)
    (= leaf_3_0 116)
    (= leaf_3_1 116)
    (= leaf_3_2 116)
    (= leaf_3_3 116)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #x0 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #x0 bv_2_2_a) (distinct #x0 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #x0 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #x0 bv_3_2_a) (distinct #x0 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #x0 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #x0 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #x0 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_3_1 <- read_csv("tests-examples/textbook/tables/3-1.txt", col_types = cols("ID_key" = col_character(),"Room" = col_character()))
df_3_1 <- copy_to(con, df_3_1)
df_3_2 <- read_csv("tests-examples/textbook/tables/3-2.txt", col_types = cols("ID_key_student" = col_character(),"ID_key" = col_character()))
df_3_2 <- copy_to(con, df_3_2)
expected_output <- read_csv("tests-examples/textbook/tables/3.out", col_types = cols("ID_key" = col_character()))

df84 <- inner_join(df_3_1, df_3_2, na_matches="never")
df85 <- df84 %>% group_by(ID_key,Room) %>% summarise(n = n()) %>% ungroup()
df86 <- df85 %>% filter(Room == 'R128' | n > 4)
out <- df86 %>% select(ID_key) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `ID_key`
FROM
  (SELECT `ID_key`,
          `Room`,
          COUNT(*) AS `n`
   FROM
     (SELECT `LHS`.`ID_key` AS `ID_key`,
             `Room`,
             `ID_key_student`
      FROM `df_3_1` AS `LHS`
      INNER JOIN `df_3_2` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
   GROUP BY `ID_key`,
            `Room`)
WHERE (`Room` = 'R128'
       OR n > 4.0)
