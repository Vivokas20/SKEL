[     2.366][MainProcess][INFO] Parsing specification...
[     2.372][MainProcess][INFO] File read
[     2.372][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.372][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     2.373][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     2.374][MainProcess][DEBUG] Reading input files...
[     2.383][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-1.txt: ['string', 'string']
[     2.389][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-2.txt: ['string', 'string']
[     2.396][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-3.txt: ['string', 'string']
[     2.402][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-4.txt: ['string', 'string', 'int64']
[     2.407][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2.out: ['int64']
[     2.407][MainProcess][INFO] Parsing sketch...
[     2.408][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join4'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.408][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.408][MainProcess][DEBUG] Sketch creation: Line(T3, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.526][MainProcess][DEBUG] {'natural_join': 16, 'natural_join3': 64, 'natural_join4': 256, 'inner_join': 5008, 'anti_join': 352, 'left_join': 16, 'union': 16, 'intersect': 96, 'semi_join': 16, 'cross_join': 33280, 'filter': 264, 'summarise': 176, 'mutate': 8}
[     2.526][MainProcess][DEBUG] {'natural_join': 0.0004043671653861706, 'natural_join3': 0.0016174686615446825, 'natural_join4': 0.00646987464617873, 'inner_join': 0.12656692276587142, 'anti_join': 0.008896077638495753, 'left_join': 0.0004043671653861706, 'union': 0.0004043671653861706, 'intersect': 0.002426202992317024, 'semi_join': 0.0004043671653861706, 'cross_join': 0.841083704003235, 'filter': 0.006672058228871815, 'summarise': 0.004448038819247877, 'mutate': 0.0002021835826930853}
[     2.526][MainProcess][DEBUG] {'natural_join': 0.0004043671653861706, 'natural_join3': 0.0016174686615446825, 'natural_join4': 0.00646987464617873, 'inner_join': 0.12656692276587142, 'anti_join': 0.008896077638495753, 'left_join': 0.0004043671653861706, 'union': 0.0004043671653861706, 'intersect': 0.002426202992317024, 'semi_join': 0.0004043671653861706, 'cross_join': 0.841083704003235, 'filter': 0.006672058228871815, 'summarise': 0.004448038819247877, 'mutate': 0.0002021835826930853}
[     2.526][MainProcess][INFO] Building synthesizer...
[     2.528][MainProcess][DEBUG] [Line(T1, root=['natural_join4'], var=[3], children=[Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=Table, var=[2503, 2504, 2505, 2506])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=FilterCondition, var=[2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=SummariseCondition, var=[2501, 2502]),Child(['??'], type=Cols, var=[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]),Child([None], type=None, var=[0])])]
[     3.245][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 168 constraints
[     3.264][MainProcess][DEBUG] Enumeration time: 0.7375853061676025
[     4.202][MainProcess][DEBUG] Synthesis time: 0.9381740093231201
[     4.202][MainProcess][INFO] Solution found: [natural_join4(input0, input1, input2, input3), filter(line0, "F_name == 'faculty1' | major == 'History'"), summarise(line1, 'maxage = max(age)', '')]
[     4.205][MainProcess][DEBUG] Solution found using process 0
[     4.205][MainProcess][INFO] Statistics:
[     4.205][MainProcess][INFO] 	Attempted programs: 39 (approx)
[     4.205][MainProcess][INFO] 		Rejected: 38 (approx)
[     4.205][MainProcess][INFO] 		Failed: 0 (approx)
[     4.206][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     4.206][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     4.206][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     4.206][MainProcess][INFO] 	Total time spent in enumerator init: 0.737585 (approx)
[     4.206][MainProcess][INFO] 	Total time spent in enumerator: 0.090268 (approx)
[     4.206][MainProcess][INFO] 		Enumerated 432.046148 programs/s avg. (just enumeration time)
[     4.206][MainProcess][INFO] 		Enumerated 11.037726 programs/s avg. (overall)
[     4.206][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.807315 (approx)
[     4.206][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.039378 (approx)
[     4.206][MainProcess][INFO] Solution found: [natural_join4(input0, input1, input2, input3), filter(line0, "F_name == 'faculty1' | major == 'History'"), summarise(line1, 'maxage = max(age)', '')]
[     4.206][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 7))
(declare-fun bv_1_0_a () (_ BitVec 7))
(declare-fun bv_1_1_b () (_ BitVec 7))
(declare-fun bv_1_1_a () (_ BitVec 7))
(declare-fun bv_1_2_b () (_ BitVec 7))
(declare-fun bv_1_2_a () (_ BitVec 7))
(declare-fun bv_1_3_b () (_ BitVec 7))
(declare-fun bv_1_3_a () (_ BitVec 7))
(declare-fun bv_2_0_b () (_ BitVec 7))
(declare-fun bv_1 () (_ BitVec 7))
(declare-fun bv_2_0_a () (_ BitVec 7))
(declare-fun bv_2_1_b () (_ BitVec 7))
(declare-fun bv_2_1_a () (_ BitVec 7))
(declare-fun bv_2_2_b () (_ BitVec 7))
(declare-fun bv_2_2_a () (_ BitVec 7))
(declare-fun bv_2_3_b () (_ BitVec 7))
(declare-fun bv_2_3_a () (_ BitVec 7))
(declare-fun bv_3_0_b () (_ BitVec 7))
(declare-fun bv_2 () (_ BitVec 7))
(declare-fun bv_3_0_a () (_ BitVec 7))
(declare-fun bv_3_1_b () (_ BitVec 7))
(declare-fun bv_3_1_a () (_ BitVec 7))
(declare-fun bv_3_2_b () (_ BitVec 7))
(declare-fun bv_3_2_a () (_ BitVec 7))
(declare-fun bv_3_3_b () (_ BitVec 7))
(declare-fun bv_3_3_a () (_ BitVec 7))
(declare-fun bv_3 () (_ BitVec 7))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 3)))
(assert (or (= leaf_1_0 2503) (= leaf_1_0 2504) (= leaf_1_0 2505) (= leaf_1_0 2506)))
(assert (<= leaf_1_0 2506))
(assert (>= leaf_1_0 2503))
(assert (or (= leaf_1_1 2503) (= leaf_1_1 2504) (= leaf_1_1 2505) (= leaf_1_1 2506)))
(assert (<= leaf_1_1 2506))
(assert (>= leaf_1_1 2503))
(assert (or (= leaf_1_2 2503) (= leaf_1_2 2504) (= leaf_1_2 2505) (= leaf_1_2 2506)))
(assert (<= leaf_1_2 2506))
(assert (>= leaf_1_2 2503))
(assert (or (= leaf_1_3 2503) (= leaf_1_3 2504) (= leaf_1_3 2505) (= leaf_1_3 2506)))
(assert (<= leaf_1_3 2506))
(assert (>= leaf_1_3 2503))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 2503)
    (= leaf_2_0 2504)
    (= leaf_2_0 2505)
    (= leaf_2_0 2506)
    (= leaf_2_0 2508)))
(assert (<= leaf_2_0 2508))
(assert (>= leaf_2_0 2503))
(assert (or (= leaf_2_1 2435)
    (= leaf_2_1 2436)
    (= leaf_2_1 2437)
    (= leaf_2_1 2438)
    (= leaf_2_1 2439)
    (= leaf_2_1 2440)
    (= leaf_2_1 2441)
    (= leaf_2_1 2442)
    (= leaf_2_1 2443)
    (= leaf_2_1 2444)
    (= leaf_2_1 2445)
    (= leaf_2_1 2446)
    (= leaf_2_1 2447)
    (= leaf_2_1 2448)
    (= leaf_2_1 2449)
    (= leaf_2_1 2450)
    (= leaf_2_1 2451)
    (= leaf_2_1 2452)
    (= leaf_2_1 2453)
    (= leaf_2_1 2454)
    (= leaf_2_1 2455)
    (= leaf_2_1 2456)
    (= leaf_2_1 2457)
    (= leaf_2_1 2458)
    (= leaf_2_1 2459)
    (= leaf_2_1 2460)
    (= leaf_2_1 2461)
    (= leaf_2_1 2462)
    (= leaf_2_1 2463)
    (= leaf_2_1 2464)
    (= leaf_2_1 2465)
    (= leaf_2_1 2466)
    (= leaf_2_1 2467)
    (= leaf_2_1 2468)
    (= leaf_2_1 2469)
    (= leaf_2_1 2470)
    (= leaf_2_1 2471)
    (= leaf_2_1 2472)
    (= leaf_2_1 2473)
    (= leaf_2_1 2474)
    (= leaf_2_1 2475)
    (= leaf_2_1 2476)
    (= leaf_2_1 2477)
    (= leaf_2_1 2478)
    (= leaf_2_1 2479)
    (= leaf_2_1 2480)
    (= leaf_2_1 2481)
    (= leaf_2_1 2482)
    (= leaf_2_1 2483)
    (= leaf_2_1 2484)
    (= leaf_2_1 2485)
    (= leaf_2_1 2486)
    (= leaf_2_1 2487)
    (= leaf_2_1 2488)
    (= leaf_2_1 2489)
    (= leaf_2_1 2490)
    (= leaf_2_1 2491)
    (= leaf_2_1 2492)
    (= leaf_2_1 2493)
    (= leaf_2_1 2494)
    (= leaf_2_1 2495)
    (= leaf_2_1 2496)
    (= leaf_2_1 2497)
    (= leaf_2_1 2498)
    (= leaf_2_1 2499)
    (= leaf_2_1 2500)))
(assert (<= leaf_2_1 2500))
(assert (>= leaf_2_1 2435))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 12)))
(assert (or (= leaf_3_0 2503)
    (= leaf_3_0 2504)
    (= leaf_3_0 2505)
    (= leaf_3_0 2506)
    (= leaf_3_0 2508)
    (= leaf_3_0 2509)))
(assert (<= leaf_3_0 2509))
(assert (>= leaf_3_0 2503))
(assert (or (= leaf_3_1 2501) (= leaf_3_1 2502)))
(assert (<= leaf_3_1 2502))
(assert (>= leaf_3_1 2501))
(assert (or (= leaf_3_2 20)
    (= leaf_3_2 21)
    (= leaf_3_2 22)
    (= leaf_3_2 23)
    (= leaf_3_2 24)
    (= leaf_3_2 25)
    (= leaf_3_2 26)
    (= leaf_3_2 27)
    (= leaf_3_2 28)
    (= leaf_3_2 29)
    (= leaf_3_2 30)
    (= leaf_3_2 31)
    (= leaf_3_2 32)
    (= leaf_3_2 33)
    (= leaf_3_2 34)
    (= leaf_3_2 35)
    (= leaf_3_2 36)
    (= leaf_3_2 37)
    (= leaf_3_2 38)
    (= leaf_3_2 39)
    (= leaf_3_2 40)
    (= leaf_3_2 41)))
(assert (<= leaf_3_2 41))
(assert (>= leaf_3_2 20))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 2503)
    (= leaf_1_1 2503)
    (= leaf_1_2 2503)
    (= leaf_1_3 2503)
    (= leaf_2_0 2503)
    (= leaf_2_1 2503)
    (= leaf_2_2 2503)
    (= leaf_2_3 2503)
    (= leaf_3_0 2503)
    (= leaf_3_1 2503)
    (= leaf_3_2 2503)
    (= leaf_3_3 2503)))
(assert (or (= leaf_1_0 2504)
    (= leaf_1_1 2504)
    (= leaf_1_2 2504)
    (= leaf_1_3 2504)
    (= leaf_2_0 2504)
    (= leaf_2_1 2504)
    (= leaf_2_2 2504)
    (= leaf_2_3 2504)
    (= leaf_3_0 2504)
    (= leaf_3_1 2504)
    (= leaf_3_2 2504)
    (= leaf_3_3 2504)))
(assert (or (= leaf_1_0 2505)
    (= leaf_1_1 2505)
    (= leaf_1_2 2505)
    (= leaf_1_3 2505)
    (= leaf_2_0 2505)
    (= leaf_2_1 2505)
    (= leaf_2_2 2505)
    (= leaf_2_3 2505)
    (= leaf_3_0 2505)
    (= leaf_3_1 2505)
    (= leaf_3_2 2505)
    (= leaf_3_3 2505)))
(assert (or (= leaf_1_0 2506)
    (= leaf_1_1 2506)
    (= leaf_1_2 2506)
    (= leaf_1_3 2506)
    (= leaf_2_0 2506)
    (= leaf_2_1 2506)
    (= leaf_2_2 2506)
    (= leaf_2_3 2506)
    (= leaf_3_0 2506)
    (= leaf_3_1 2506)
    (= leaf_3_2 2506)
    (= leaf_3_3 2506)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_0 2503) (= #b0000011 bv_1_0_a) (= #b0000000 bv_1_0_b))
        (and (= leaf_1_0 2504) (= #b0001001 bv_1_0_a) (= #b0000000 bv_1_0_b))
        (and (= leaf_1_0 2505) (= #b0000110 bv_1_0_a) (= #b0000000 bv_1_0_b))
        (and (= leaf_1_0 2506) (= #b0111000 bv_1_0_a) (= #b0000000 bv_1_0_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_1 2503) (= #b0000011 bv_1_1_a) (= #b0000000 bv_1_1_b))
        (and (= leaf_1_1 2504) (= #b0001001 bv_1_1_a) (= #b0000000 bv_1_1_b))
        (and (= leaf_1_1 2505) (= #b0000110 bv_1_1_a) (= #b0000000 bv_1_1_b))
        (and (= leaf_1_1 2506) (= #b0111000 bv_1_1_a) (= #b0000000 bv_1_1_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_2 2503) (= #b0000011 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 2504) (= #b0001001 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 2505) (= #b0000110 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 2506) (= #b0111000 bv_1_2_a) (= #b0000000 bv_1_2_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_3 2503) (= #b0000011 bv_1_3_a) (= #b0000000 bv_1_3_b))
        (and (= leaf_1_3 2504) (= #b0001001 bv_1_3_a) (= #b0000000 bv_1_3_b))
        (and (= leaf_1_3 2505) (= #b0000110 bv_1_3_a) (= #b0000000 bv_1_3_b))
        (and (= leaf_1_3 2506) (= #b0111000 bv_1_3_a) (= #b0000000 bv_1_3_b)))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 2508)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 2503) (= #b0000011 bv_2_0_a) (= #b0000000 bv_2_0_b))
        (and (= leaf_2_0 2504) (= #b0001001 bv_2_0_a) (= #b0000000 bv_2_0_b))
        (and (= leaf_2_0 2505) (= #b0000110 bv_2_0_a) (= #b0000000 bv_2_0_b))
        (and (= leaf_2_0 2506) (= #b0111000 bv_2_0_a) (= #b0000000 bv_2_0_b))
        (and (= leaf_2_0 2508) (= bv_2_0_a bv_1) (= #b0000000 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 2435) (= #b0000100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2436) (= #b0000100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2437) (= #b0100000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2438) (= #b0100000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2439) (= #b1010000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2440) (= #b1010000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2441) (= #b1010000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2442) (= #b1010000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2443) (= #b1010000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2444) (= #b1010000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2445) (= #b0100100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2446) (= #b0100100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2447) (= #b0100100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2448) (= #b0100100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2449) (= #b0100100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2450) (= #b0100100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2451) (= #b0100100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2452) (= #b0100100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2453) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2454) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2455) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2456) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2457) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2458) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2459) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2460) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2461) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2462) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2463) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2464) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2465) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2466) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2467) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2468) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2469) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2470) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2471) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2472) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2473) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2474) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2475) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2476) (= #b1010100 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2477) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2478) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2479) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2480) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2481) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2482) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2483) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2484) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2485) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2486) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2487) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2488) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2489) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2490) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2491) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2492) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2493) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2494) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2495) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2496) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2497) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2498) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2499) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b))
        (and (= leaf_2_1 2500) (= #b1110000 bv_2_1_a) (= #b0000000 bv_2_1_b)))))
(assert (=> (= root_2 11)
    (and (= leaf_2_2 0) (= #b0000000 bv_2_2_a) (= #b0000000 bv_2_2_b))))
(assert (=> (= root_2 11)
    (and (= leaf_2_3 0) (= #b0000000 bv_2_3_a) (= #b0000000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 2508)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 2509)))
(assert (=> (= root_3 12)
    (or (and (= leaf_3_0 2503) (= #b0000011 bv_3_0_a) (= #b0000000 bv_3_0_b))
        (and (= leaf_3_0 2504) (= #b0001001 bv_3_0_a) (= #b0000000 bv_3_0_b))
        (and (= leaf_3_0 2505) (= #b0000110 bv_3_0_a) (= #b0000000 bv_3_0_b))
        (and (= leaf_3_0 2506) (= #b0111000 bv_3_0_a) (= #b0000000 bv_3_0_b))
        (and (= leaf_3_0 2508) (= bv_3_0_a bv_1) (= #b0000000 bv_3_0_b))
        (and (= leaf_3_0 2509) (= bv_3_0_a bv_2) (= #b0000000 bv_3_0_b)))))
(assert (=> (= root_3 12)
    (or (and (= leaf_3_1 2501) (= #b0010000 bv_3_1_a) (= #b0010000 bv_3_1_b))
        (and (= leaf_3_1 2502) (= #b0010000 bv_3_1_a) (= #b1000000 bv_3_1_b)))))
(assert (=> (= root_3 12)
    (or (and (= leaf_3_2 20) (= #b0000000 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 21) (= #b0000001 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 22) (= #b0000010 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 23) (= #b0000100 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 24) (= #b0001000 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 25) (= #b0010000 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 26) (= #b0100000 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 27) (= #b0000011 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 28) (= #b0000101 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 29) (= #b0001001 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 30) (= #b0010001 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 31) (= #b0100001 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 32) (= #b0000110 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 33) (= #b0001010 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 34) (= #b0010010 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 35) (= #b0100010 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 36) (= #b0001100 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 37) (= #b0010100 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 38) (= #b0100100 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 39) (= #b0011000 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 40) (= #b0101000 bv_3_2_a) (= #b0000000 bv_3_2_b))
        (and (= leaf_3_2 41) (= #b0110000 bv_3_2_a) (= #b0000000 bv_3_2_b)))))
(assert (=> (= root_3 12)
    (and (= leaf_3_3 0) (= #b0000000 bv_3_3_a) (= #b0000000 bv_3_3_b))))
(assert (or (= leaf_1_0 2501)
    (= leaf_1_1 2501)
    (= leaf_1_2 2501)
    (= leaf_1_3 2501)
    (= leaf_2_0 2501)
    (= leaf_2_1 2501)
    (= leaf_2_2 2501)
    (= leaf_2_3 2501)
    (= leaf_3_0 2501)
    (= leaf_3_1 2501)
    (= leaf_3_2 2501)
    (= leaf_3_3 2501)
    (= leaf_1_0 2502)
    (= leaf_1_1 2502)
    (= leaf_1_2 2502)
    (= leaf_1_3 2502)
    (= leaf_2_0 2502)
    (= leaf_2_1 2502)
    (= leaf_2_2 2502)
    (= leaf_2_3 2502)
    (= leaf_3_0 2502)
    (= leaf_3_1 2502)
    (= leaf_3_2 2502)
    (= leaf_3_3 2502)))
(assert (or (= leaf_1_0 2435)
    (= leaf_1_1 2435)
    (= leaf_1_2 2435)
    (= leaf_1_3 2435)
    (= leaf_2_0 2435)
    (= leaf_2_1 2435)
    (= leaf_2_2 2435)
    (= leaf_2_3 2435)
    (= leaf_3_0 2435)
    (= leaf_3_1 2435)
    (= leaf_3_2 2435)
    (= leaf_3_3 2435)
    (= leaf_1_0 2436)
    (= leaf_1_1 2436)
    (= leaf_1_2 2436)
    (= leaf_1_3 2436)
    (= leaf_2_0 2436)
    (= leaf_2_1 2436)
    (= leaf_2_2 2436)
    (= leaf_2_3 2436)
    (= leaf_3_0 2436)
    (= leaf_3_1 2436)
    (= leaf_3_2 2436)
    (= leaf_3_3 2436)
    (= leaf_1_0 2446)
    (= leaf_1_1 2446)
    (= leaf_1_2 2446)
    (= leaf_1_3 2446)
    (= leaf_2_0 2446)
    (= leaf_2_1 2446)
    (= leaf_2_2 2446)
    (= leaf_2_3 2446)
    (= leaf_3_0 2446)
    (= leaf_3_1 2446)
    (= leaf_3_2 2446)
    (= leaf_3_3 2446)
    (= leaf_1_0 2445)
    (= leaf_1_1 2445)
    (= leaf_1_2 2445)
    (= leaf_1_3 2445)
    (= leaf_2_0 2445)
    (= leaf_2_1 2445)
    (= leaf_2_2 2445)
    (= leaf_2_3 2445)
    (= leaf_3_0 2445)
    (= leaf_3_1 2445)
    (= leaf_3_2 2445)
    (= leaf_3_3 2445)
    (= leaf_1_0 2448)
    (= leaf_1_1 2448)
    (= leaf_1_2 2448)
    (= leaf_1_3 2448)
    (= leaf_2_0 2448)
    (= leaf_2_1 2448)
    (= leaf_2_2 2448)
    (= leaf_2_3 2448)
    (= leaf_3_0 2448)
    (= leaf_3_1 2448)
    (= leaf_3_2 2448)
    (= leaf_3_3 2448)
    (= leaf_1_0 2447)
    (= leaf_1_1 2447)
    (= leaf_1_2 2447)
    (= leaf_1_3 2447)
    (= leaf_2_0 2447)
    (= leaf_2_1 2447)
    (= leaf_2_2 2447)
    (= leaf_2_3 2447)
    (= leaf_3_0 2447)
    (= leaf_3_1 2447)
    (= leaf_3_2 2447)
    (= leaf_3_3 2447)
    (= leaf_1_0 2450)
    (= leaf_1_1 2450)
    (= leaf_1_2 2450)
    (= leaf_1_3 2450)
    (= leaf_2_0 2450)
    (= leaf_2_1 2450)
    (= leaf_2_2 2450)
    (= leaf_2_3 2450)
    (= leaf_3_0 2450)
    (= leaf_3_1 2450)
    (= leaf_3_2 2450)
    (= leaf_3_3 2450)
    (= leaf_1_0 2449)
    (= leaf_1_1 2449)
    (= leaf_1_2 2449)
    (= leaf_1_3 2449)
    (= leaf_2_0 2449)
    (= leaf_2_1 2449)
    (= leaf_2_2 2449)
    (= leaf_2_3 2449)
    (= leaf_3_0 2449)
    (= leaf_3_1 2449)
    (= leaf_3_2 2449)
    (= leaf_3_3 2449)
    (= leaf_1_0 2452)
    (= leaf_1_1 2452)
    (= leaf_1_2 2452)
    (= leaf_1_3 2452)
    (= leaf_2_0 2452)
    (= leaf_2_1 2452)
    (= leaf_2_2 2452)
    (= leaf_2_3 2452)
    (= leaf_3_0 2452)
    (= leaf_3_1 2452)
    (= leaf_3_2 2452)
    (= leaf_3_3 2452)
    (= leaf_1_0 2451)
    (= leaf_1_1 2451)
    (= leaf_1_2 2451)
    (= leaf_1_3 2451)
    (= leaf_2_0 2451)
    (= leaf_2_1 2451)
    (= leaf_2_2 2451)
    (= leaf_2_3 2451)
    (= leaf_3_0 2451)
    (= leaf_3_1 2451)
    (= leaf_3_2 2451)
    (= leaf_3_3 2451)
    (= leaf_1_0 2454)
    (= leaf_1_1 2454)
    (= leaf_1_2 2454)
    (= leaf_1_3 2454)
    (= leaf_2_0 2454)
    (= leaf_2_1 2454)
    (= leaf_2_2 2454)
    (= leaf_2_3 2454)
    (= leaf_3_0 2454)
    (= leaf_3_1 2454)
    (= leaf_3_2 2454)
    (= leaf_3_3 2454)
    (= leaf_1_0 2453)
    (= leaf_1_1 2453)
    (= leaf_1_2 2453)
    (= leaf_1_3 2453)
    (= leaf_2_0 2453)
    (= leaf_2_1 2453)
    (= leaf_2_2 2453)
    (= leaf_2_3 2453)
    (= leaf_3_0 2453)
    (= leaf_3_1 2453)
    (= leaf_3_2 2453)
    (= leaf_3_3 2453)
    (= leaf_1_0 2456)
    (= leaf_1_1 2456)
    (= leaf_1_2 2456)
    (= leaf_1_3 2456)
    (= leaf_2_0 2456)
    (= leaf_2_1 2456)
    (= leaf_2_2 2456)
    (= leaf_2_3 2456)
    (= leaf_3_0 2456)
    (= leaf_3_1 2456)
    (= leaf_3_2 2456)
    (= leaf_3_3 2456)
    (= leaf_1_0 2455)
    (= leaf_1_1 2455)
    (= leaf_1_2 2455)
    (= leaf_1_3 2455)
    (= leaf_2_0 2455)
    (= leaf_2_1 2455)
    (= leaf_2_2 2455)
    (= leaf_2_3 2455)
    (= leaf_3_0 2455)
    (= leaf_3_1 2455)
    (= leaf_3_2 2455)
    (= leaf_3_3 2455)
    (= leaf_1_0 2458)
    (= leaf_1_1 2458)
    (= leaf_1_2 2458)
    (= leaf_1_3 2458)
    (= leaf_2_0 2458)
    (= leaf_2_1 2458)
    (= leaf_2_2 2458)
    (= leaf_2_3 2458)
    (= leaf_3_0 2458)
    (= leaf_3_1 2458)
    (= leaf_3_2 2458)
    (= leaf_3_3 2458)
    (= leaf_1_0 2457)
    (= leaf_1_1 2457)
    (= leaf_1_2 2457)
    (= leaf_1_3 2457)
    (= leaf_2_0 2457)
    (= leaf_2_1 2457)
    (= leaf_2_2 2457)
    (= leaf_2_3 2457)
    (= leaf_3_0 2457)
    (= leaf_3_1 2457)
    (= leaf_3_2 2457)
    (= leaf_3_3 2457)
    (= leaf_1_0 2460)
    (= leaf_1_1 2460)
    (= leaf_1_2 2460)
    (= leaf_1_3 2460)
    (= leaf_2_0 2460)
    (= leaf_2_1 2460)
    (= leaf_2_2 2460)
    (= leaf_2_3 2460)
    (= leaf_3_0 2460)
    (= leaf_3_1 2460)
    (= leaf_3_2 2460)
    (= leaf_3_3 2460)
    (= leaf_1_0 2459)
    (= leaf_1_1 2459)
    (= leaf_1_2 2459)
    (= leaf_1_3 2459)
    (= leaf_2_0 2459)
    (= leaf_2_1 2459)
    (= leaf_2_2 2459)
    (= leaf_2_3 2459)
    (= leaf_3_0 2459)
    (= leaf_3_1 2459)
    (= leaf_3_2 2459)
    (= leaf_3_3 2459)
    (= leaf_1_0 2462)
    (= leaf_1_1 2462)
    (= leaf_1_2 2462)
    (= leaf_1_3 2462)
    (= leaf_2_0 2462)
    (= leaf_2_1 2462)
    (= leaf_2_2 2462)
    (= leaf_2_3 2462)
    (= leaf_3_0 2462)
    (= leaf_3_1 2462)
    (= leaf_3_2 2462)
    (= leaf_3_3 2462)
    (= leaf_1_0 2461)
    (= leaf_1_1 2461)
    (= leaf_1_2 2461)
    (= leaf_1_3 2461)
    (= leaf_2_0 2461)
    (= leaf_2_1 2461)
    (= leaf_2_2 2461)
    (= leaf_2_3 2461)
    (= leaf_3_0 2461)
    (= leaf_3_1 2461)
    (= leaf_3_2 2461)
    (= leaf_3_3 2461)
    (= leaf_1_0 2464)
    (= leaf_1_1 2464)
    (= leaf_1_2 2464)
    (= leaf_1_3 2464)
    (= leaf_2_0 2464)
    (= leaf_2_1 2464)
    (= leaf_2_2 2464)
    (= leaf_2_3 2464)
    (= leaf_3_0 2464)
    (= leaf_3_1 2464)
    (= leaf_3_2 2464)
    (= leaf_3_3 2464)
    (= leaf_1_0 2463)
    (= leaf_1_1 2463)
    (= leaf_1_2 2463)
    (= leaf_1_3 2463)
    (= leaf_2_0 2463)
    (= leaf_2_1 2463)
    (= leaf_2_2 2463)
    (= leaf_2_3 2463)
    (= leaf_3_0 2463)
    (= leaf_3_1 2463)
    (= leaf_3_2 2463)
    (= leaf_3_3 2463)
    (= leaf_1_0 2466)
    (= leaf_1_1 2466)
    (= leaf_1_2 2466)
    (= leaf_1_3 2466)
    (= leaf_2_0 2466)
    (= leaf_2_1 2466)
    (= leaf_2_2 2466)
    (= leaf_2_3 2466)
    (= leaf_3_0 2466)
    (= leaf_3_1 2466)
    (= leaf_3_2 2466)
    (= leaf_3_3 2466)
    (= leaf_1_0 2465)
    (= leaf_1_1 2465)
    (= leaf_1_2 2465)
    (= leaf_1_3 2465)
    (= leaf_2_0 2465)
    (= leaf_2_1 2465)
    (= leaf_2_2 2465)
    (= leaf_2_3 2465)
    (= leaf_3_0 2465)
    (= leaf_3_1 2465)
    (= leaf_3_2 2465)
    (= leaf_3_3 2465)
    (= leaf_1_0 2468)
    (= leaf_1_1 2468)
    (= leaf_1_2 2468)
    (= leaf_1_3 2468)
    (= leaf_2_0 2468)
    (= leaf_2_1 2468)
    (= leaf_2_2 2468)
    (= leaf_2_3 2468)
    (= leaf_3_0 2468)
    (= leaf_3_1 2468)
    (= leaf_3_2 2468)
    (= leaf_3_3 2468)
    (= leaf_1_0 2467)
    (= leaf_1_1 2467)
    (= leaf_1_2 2467)
    (= leaf_1_3 2467)
    (= leaf_2_0 2467)
    (= leaf_2_1 2467)
    (= leaf_2_2 2467)
    (= leaf_2_3 2467)
    (= leaf_3_0 2467)
    (= leaf_3_1 2467)
    (= leaf_3_2 2467)
    (= leaf_3_3 2467)
    (= leaf_1_0 2470)
    (= leaf_1_1 2470)
    (= leaf_1_2 2470)
    (= leaf_1_3 2470)
    (= leaf_2_0 2470)
    (= leaf_2_1 2470)
    (= leaf_2_2 2470)
    (= leaf_2_3 2470)
    (= leaf_3_0 2470)
    (= leaf_3_1 2470)
    (= leaf_3_2 2470)
    (= leaf_3_3 2470)
    (= leaf_1_0 2469)
    (= leaf_1_1 2469)
    (= leaf_1_2 2469)
    (= leaf_1_3 2469)
    (= leaf_2_0 2469)
    (= leaf_2_1 2469)
    (= leaf_2_2 2469)
    (= leaf_2_3 2469)
    (= leaf_3_0 2469)
    (= leaf_3_1 2469)
    (= leaf_3_2 2469)
    (= leaf_3_3 2469)
    (= leaf_1_0 2472)
    (= leaf_1_1 2472)
    (= leaf_1_2 2472)
    (= leaf_1_3 2472)
    (= leaf_2_0 2472)
    (= leaf_2_1 2472)
    (= leaf_2_2 2472)
    (= leaf_2_3 2472)
    (= leaf_3_0 2472)
    (= leaf_3_1 2472)
    (= leaf_3_2 2472)
    (= leaf_3_3 2472)
    (= leaf_1_0 2471)
    (= leaf_1_1 2471)
    (= leaf_1_2 2471)
    (= leaf_1_3 2471)
    (= leaf_2_0 2471)
    (= leaf_2_1 2471)
    (= leaf_2_2 2471)
    (= leaf_2_3 2471)
    (= leaf_3_0 2471)
    (= leaf_3_1 2471)
    (= leaf_3_2 2471)
    (= leaf_3_3 2471)
    (= leaf_1_0 2474)
    (= leaf_1_1 2474)
    (= leaf_1_2 2474)
    (= leaf_1_3 2474)
    (= leaf_2_0 2474)
    (= leaf_2_1 2474)
    (= leaf_2_2 2474)
    (= leaf_2_3 2474)
    (= leaf_3_0 2474)
    (= leaf_3_1 2474)
    (= leaf_3_2 2474)
    (= leaf_3_3 2474)
    (= leaf_1_0 2473)
    (= leaf_1_1 2473)
    (= leaf_1_2 2473)
    (= leaf_1_3 2473)
    (= leaf_2_0 2473)
    (= leaf_2_1 2473)
    (= leaf_2_2 2473)
    (= leaf_2_3 2473)
    (= leaf_3_0 2473)
    (= leaf_3_1 2473)
    (= leaf_3_2 2473)
    (= leaf_3_3 2473)
    (= leaf_1_0 2476)
    (= leaf_1_1 2476)
    (= leaf_1_2 2476)
    (= leaf_1_3 2476)
    (= leaf_2_0 2476)
    (= leaf_2_1 2476)
    (= leaf_2_2 2476)
    (= leaf_2_3 2476)
    (= leaf_3_0 2476)
    (= leaf_3_1 2476)
    (= leaf_3_2 2476)
    (= leaf_3_3 2476)
    (= leaf_1_0 2475)
    (= leaf_1_1 2475)
    (= leaf_1_2 2475)
    (= leaf_1_3 2475)
    (= leaf_2_0 2475)
    (= leaf_2_1 2475)
    (= leaf_2_2 2475)
    (= leaf_2_3 2475)
    (= leaf_3_0 2475)
    (= leaf_3_1 2475)
    (= leaf_3_2 2475)
    (= leaf_3_3 2475)))
(assert (or (= leaf_1_0 2437)
    (= leaf_1_1 2437)
    (= leaf_1_2 2437)
    (= leaf_1_3 2437)
    (= leaf_2_0 2437)
    (= leaf_2_1 2437)
    (= leaf_2_2 2437)
    (= leaf_2_3 2437)
    (= leaf_3_0 2437)
    (= leaf_3_1 2437)
    (= leaf_3_2 2437)
    (= leaf_3_3 2437)
    (= leaf_1_0 2438)
    (= leaf_1_1 2438)
    (= leaf_1_2 2438)
    (= leaf_1_3 2438)
    (= leaf_2_0 2438)
    (= leaf_2_1 2438)
    (= leaf_2_2 2438)
    (= leaf_2_3 2438)
    (= leaf_3_0 2438)
    (= leaf_3_1 2438)
    (= leaf_3_2 2438)
    (= leaf_3_3 2438)
    (= leaf_1_0 2446)
    (= leaf_1_1 2446)
    (= leaf_1_2 2446)
    (= leaf_1_3 2446)
    (= leaf_2_0 2446)
    (= leaf_2_1 2446)
    (= leaf_2_2 2446)
    (= leaf_2_3 2446)
    (= leaf_3_0 2446)
    (= leaf_3_1 2446)
    (= leaf_3_2 2446)
    (= leaf_3_3 2446)
    (= leaf_1_0 2445)
    (= leaf_1_1 2445)
    (= leaf_1_2 2445)
    (= leaf_1_3 2445)
    (= leaf_2_0 2445)
    (= leaf_2_1 2445)
    (= leaf_2_2 2445)
    (= leaf_2_3 2445)
    (= leaf_3_0 2445)
    (= leaf_3_1 2445)
    (= leaf_3_2 2445)
    (= leaf_3_3 2445)
    (= leaf_1_0 2448)
    (= leaf_1_1 2448)
    (= leaf_1_2 2448)
    (= leaf_1_3 2448)
    (= leaf_2_0 2448)
    (= leaf_2_1 2448)
    (= leaf_2_2 2448)
    (= leaf_2_3 2448)
    (= leaf_3_0 2448)
    (= leaf_3_1 2448)
    (= leaf_3_2 2448)
    (= leaf_3_3 2448)
    (= leaf_1_0 2447)
    (= leaf_1_1 2447)
    (= leaf_1_2 2447)
    (= leaf_1_3 2447)
    (= leaf_2_0 2447)
    (= leaf_2_1 2447)
    (= leaf_2_2 2447)
    (= leaf_2_3 2447)
    (= leaf_3_0 2447)
    (= leaf_3_1 2447)
    (= leaf_3_2 2447)
    (= leaf_3_3 2447)
    (= leaf_1_0 2450)
    (= leaf_1_1 2450)
    (= leaf_1_2 2450)
    (= leaf_1_3 2450)
    (= leaf_2_0 2450)
    (= leaf_2_1 2450)
    (= leaf_2_2 2450)
    (= leaf_2_3 2450)
    (= leaf_3_0 2450)
    (= leaf_3_1 2450)
    (= leaf_3_2 2450)
    (= leaf_3_3 2450)
    (= leaf_1_0 2449)
    (= leaf_1_1 2449)
    (= leaf_1_2 2449)
    (= leaf_1_3 2449)
    (= leaf_2_0 2449)
    (= leaf_2_1 2449)
    (= leaf_2_2 2449)
    (= leaf_2_3 2449)
    (= leaf_3_0 2449)
    (= leaf_3_1 2449)
    (= leaf_3_2 2449)
    (= leaf_3_3 2449)
    (= leaf_1_0 2452)
    (= leaf_1_1 2452)
    (= leaf_1_2 2452)
    (= leaf_1_3 2452)
    (= leaf_2_0 2452)
    (= leaf_2_1 2452)
    (= leaf_2_2 2452)
    (= leaf_2_3 2452)
    (= leaf_3_0 2452)
    (= leaf_3_1 2452)
    (= leaf_3_2 2452)
    (= leaf_3_3 2452)
    (= leaf_1_0 2451)
    (= leaf_1_1 2451)
    (= leaf_1_2 2451)
    (= leaf_1_3 2451)
    (= leaf_2_0 2451)
    (= leaf_2_1 2451)
    (= leaf_2_2 2451)
    (= leaf_2_3 2451)
    (= leaf_3_0 2451)
    (= leaf_3_1 2451)
    (= leaf_3_2 2451)
    (= leaf_3_3 2451)
    (= leaf_1_0 2478)
    (= leaf_1_1 2478)
    (= leaf_1_2 2478)
    (= leaf_1_3 2478)
    (= leaf_2_0 2478)
    (= leaf_2_1 2478)
    (= leaf_2_2 2478)
    (= leaf_2_3 2478)
    (= leaf_3_0 2478)
    (= leaf_3_1 2478)
    (= leaf_3_2 2478)
    (= leaf_3_3 2478)
    (= leaf_1_0 2477)
    (= leaf_1_1 2477)
    (= leaf_1_2 2477)
    (= leaf_1_3 2477)
    (= leaf_2_0 2477)
    (= leaf_2_1 2477)
    (= leaf_2_2 2477)
    (= leaf_2_3 2477)
    (= leaf_3_0 2477)
    (= leaf_3_1 2477)
    (= leaf_3_2 2477)
    (= leaf_3_3 2477)
    (= leaf_1_0 2480)
    (= leaf_1_1 2480)
    (= leaf_1_2 2480)
    (= leaf_1_3 2480)
    (= leaf_2_0 2480)
    (= leaf_2_1 2480)
    (= leaf_2_2 2480)
    (= leaf_2_3 2480)
    (= leaf_3_0 2480)
    (= leaf_3_1 2480)
    (= leaf_3_2 2480)
    (= leaf_3_3 2480)
    (= leaf_1_0 2479)
    (= leaf_1_1 2479)
    (= leaf_1_2 2479)
    (= leaf_1_3 2479)
    (= leaf_2_0 2479)
    (= leaf_2_1 2479)
    (= leaf_2_2 2479)
    (= leaf_2_3 2479)
    (= leaf_3_0 2479)
    (= leaf_3_1 2479)
    (= leaf_3_2 2479)
    (= leaf_3_3 2479)
    (= leaf_1_0 2482)
    (= leaf_1_1 2482)
    (= leaf_1_2 2482)
    (= leaf_1_3 2482)
    (= leaf_2_0 2482)
    (= leaf_2_1 2482)
    (= leaf_2_2 2482)
    (= leaf_2_3 2482)
    (= leaf_3_0 2482)
    (= leaf_3_1 2482)
    (= leaf_3_2 2482)
    (= leaf_3_3 2482)
    (= leaf_1_0 2481)
    (= leaf_1_1 2481)
    (= leaf_1_2 2481)
    (= leaf_1_3 2481)
    (= leaf_2_0 2481)
    (= leaf_2_1 2481)
    (= leaf_2_2 2481)
    (= leaf_2_3 2481)
    (= leaf_3_0 2481)
    (= leaf_3_1 2481)
    (= leaf_3_2 2481)
    (= leaf_3_3 2481)
    (= leaf_1_0 2484)
    (= leaf_1_1 2484)
    (= leaf_1_2 2484)
    (= leaf_1_3 2484)
    (= leaf_2_0 2484)
    (= leaf_2_1 2484)
    (= leaf_2_2 2484)
    (= leaf_2_3 2484)
    (= leaf_3_0 2484)
    (= leaf_3_1 2484)
    (= leaf_3_2 2484)
    (= leaf_3_3 2484)
    (= leaf_1_0 2483)
    (= leaf_1_1 2483)
    (= leaf_1_2 2483)
    (= leaf_1_3 2483)
    (= leaf_2_0 2483)
    (= leaf_2_1 2483)
    (= leaf_2_2 2483)
    (= leaf_2_3 2483)
    (= leaf_3_0 2483)
    (= leaf_3_1 2483)
    (= leaf_3_2 2483)
    (= leaf_3_3 2483)
    (= leaf_1_0 2486)
    (= leaf_1_1 2486)
    (= leaf_1_2 2486)
    (= leaf_1_3 2486)
    (= leaf_2_0 2486)
    (= leaf_2_1 2486)
    (= leaf_2_2 2486)
    (= leaf_2_3 2486)
    (= leaf_3_0 2486)
    (= leaf_3_1 2486)
    (= leaf_3_2 2486)
    (= leaf_3_3 2486)
    (= leaf_1_0 2485)
    (= leaf_1_1 2485)
    (= leaf_1_2 2485)
    (= leaf_1_3 2485)
    (= leaf_2_0 2485)
    (= leaf_2_1 2485)
    (= leaf_2_2 2485)
    (= leaf_2_3 2485)
    (= leaf_3_0 2485)
    (= leaf_3_1 2485)
    (= leaf_3_2 2485)
    (= leaf_3_3 2485)
    (= leaf_1_0 2488)
    (= leaf_1_1 2488)
    (= leaf_1_2 2488)
    (= leaf_1_3 2488)
    (= leaf_2_0 2488)
    (= leaf_2_1 2488)
    (= leaf_2_2 2488)
    (= leaf_2_3 2488)
    (= leaf_3_0 2488)
    (= leaf_3_1 2488)
    (= leaf_3_2 2488)
    (= leaf_3_3 2488)
    (= leaf_1_0 2487)
    (= leaf_1_1 2487)
    (= leaf_1_2 2487)
    (= leaf_1_3 2487)
    (= leaf_2_0 2487)
    (= leaf_2_1 2487)
    (= leaf_2_2 2487)
    (= leaf_2_3 2487)
    (= leaf_3_0 2487)
    (= leaf_3_1 2487)
    (= leaf_3_2 2487)
    (= leaf_3_3 2487)
    (= leaf_1_0 2490)
    (= leaf_1_1 2490)
    (= leaf_1_2 2490)
    (= leaf_1_3 2490)
    (= leaf_2_0 2490)
    (= leaf_2_1 2490)
    (= leaf_2_2 2490)
    (= leaf_2_3 2490)
    (= leaf_3_0 2490)
    (= leaf_3_1 2490)
    (= leaf_3_2 2490)
    (= leaf_3_3 2490)
    (= leaf_1_0 2489)
    (= leaf_1_1 2489)
    (= leaf_1_2 2489)
    (= leaf_1_3 2489)
    (= leaf_2_0 2489)
    (= leaf_2_1 2489)
    (= leaf_2_2 2489)
    (= leaf_2_3 2489)
    (= leaf_3_0 2489)
    (= leaf_3_1 2489)
    (= leaf_3_2 2489)
    (= leaf_3_3 2489)
    (= leaf_1_0 2492)
    (= leaf_1_1 2492)
    (= leaf_1_2 2492)
    (= leaf_1_3 2492)
    (= leaf_2_0 2492)
    (= leaf_2_1 2492)
    (= leaf_2_2 2492)
    (= leaf_2_3 2492)
    (= leaf_3_0 2492)
    (= leaf_3_1 2492)
    (= leaf_3_2 2492)
    (= leaf_3_3 2492)
    (= leaf_1_0 2491)
    (= leaf_1_1 2491)
    (= leaf_1_2 2491)
    (= leaf_1_3 2491)
    (= leaf_2_0 2491)
    (= leaf_2_1 2491)
    (= leaf_2_2 2491)
    (= leaf_2_3 2491)
    (= leaf_3_0 2491)
    (= leaf_3_1 2491)
    (= leaf_3_2 2491)
    (= leaf_3_3 2491)
    (= leaf_1_0 2494)
    (= leaf_1_1 2494)
    (= leaf_1_2 2494)
    (= leaf_1_3 2494)
    (= leaf_2_0 2494)
    (= leaf_2_1 2494)
    (= leaf_2_2 2494)
    (= leaf_2_3 2494)
    (= leaf_3_0 2494)
    (= leaf_3_1 2494)
    (= leaf_3_2 2494)
    (= leaf_3_3 2494)
    (= leaf_1_0 2493)
    (= leaf_1_1 2493)
    (= leaf_1_2 2493)
    (= leaf_1_3 2493)
    (= leaf_2_0 2493)
    (= leaf_2_1 2493)
    (= leaf_2_2 2493)
    (= leaf_2_3 2493)
    (= leaf_3_0 2493)
    (= leaf_3_1 2493)
    (= leaf_3_2 2493)
    (= leaf_3_3 2493)
    (= leaf_1_0 2496)
    (= leaf_1_1 2496)
    (= leaf_1_2 2496)
    (= leaf_1_3 2496)
    (= leaf_2_0 2496)
    (= leaf_2_1 2496)
    (= leaf_2_2 2496)
    (= leaf_2_3 2496)
    (= leaf_3_0 2496)
    (= leaf_3_1 2496)
    (= leaf_3_2 2496)
    (= leaf_3_3 2496)
    (= leaf_1_0 2495)
    (= leaf_1_1 2495)
    (= leaf_1_2 2495)
    (= leaf_1_3 2495)
    (= leaf_2_0 2495)
    (= leaf_2_1 2495)
    (= leaf_2_2 2495)
    (= leaf_2_3 2495)
    (= leaf_3_0 2495)
    (= leaf_3_1 2495)
    (= leaf_3_2 2495)
    (= leaf_3_3 2495)
    (= leaf_1_0 2498)
    (= leaf_1_1 2498)
    (= leaf_1_2 2498)
    (= leaf_1_3 2498)
    (= leaf_2_0 2498)
    (= leaf_2_1 2498)
    (= leaf_2_2 2498)
    (= leaf_2_3 2498)
    (= leaf_3_0 2498)
    (= leaf_3_1 2498)
    (= leaf_3_2 2498)
    (= leaf_3_3 2498)
    (= leaf_1_0 2497)
    (= leaf_1_1 2497)
    (= leaf_1_2 2497)
    (= leaf_1_3 2497)
    (= leaf_2_0 2497)
    (= leaf_2_1 2497)
    (= leaf_2_2 2497)
    (= leaf_2_3 2497)
    (= leaf_3_0 2497)
    (= leaf_3_1 2497)
    (= leaf_3_2 2497)
    (= leaf_3_3 2497)
    (= leaf_1_0 2500)
    (= leaf_1_1 2500)
    (= leaf_1_2 2500)
    (= leaf_1_3 2500)
    (= leaf_2_0 2500)
    (= leaf_2_1 2500)
    (= leaf_2_2 2500)
    (= leaf_2_3 2500)
    (= leaf_3_0 2500)
    (= leaf_3_1 2500)
    (= leaf_3_2 2500)
    (= leaf_3_3 2500)
    (= leaf_1_0 2499)
    (= leaf_1_1 2499)
    (= leaf_1_2 2499)
    (= leaf_1_3 2499)
    (= leaf_2_0 2499)
    (= leaf_2_1 2499)
    (= leaf_2_2 2499)
    (= leaf_2_3 2499)
    (= leaf_3_0 2499)
    (= leaf_3_1 2499)
    (= leaf_3_2 2499)
    (= leaf_3_3 2499)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b0000000 bv_1_2_a)
                    (distinct #b0000000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b0000000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b0000000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b0000000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b0000000 bv_2_2_a)
                    (distinct #b0000000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b0000000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b0000000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b0000000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b0000000 bv_3_2_a)
                    (distinct #b0000000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b0000000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b0000000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #b0000000 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_2_1 <- read_csv("tests-examples/textbook/tables/2-1.txt", col_types = cols("C_name" = col_character(),"F_key" = col_character()))
df_2_1 <- copy_to(con, df_2_1)
df_2_2 <- read_csv("tests-examples/textbook/tables/2-2.txt", col_types = cols("S_key" = col_character(),"C_name" = col_character()))
df_2_2 <- copy_to(con, df_2_2)
df_2_3 <- read_csv("tests-examples/textbook/tables/2-3.txt", col_types = cols("F_key" = col_character(),"F_name" = col_character()))
df_2_3 <- copy_to(con, df_2_3)
df_2_4 <- read_csv("tests-examples/textbook/tables/2-4.txt", col_types = cols("S_key" = col_character(),"major" = col_character(),"age" = col_integer()))
df_2_4 <- copy_to(con, df_2_4)
expected_output <- read_csv("tests-examples/textbook/tables/2.out", col_types = cols("maxage" = col_integer()))

df40 <- inner_join(df_2_1, df_2_2, na_matches="never") %>% inner_join(df_2_3, na_matches="never") %>% inner_join(df_2_4, na_matches="never")
df41 <- df40 %>% filter(F_name == 'faculty1' | major == 'History')
df42 <- df41 %>% group_by() %>% summarise(maxage = max(age)) %>% ungroup()
out <- df42 %>% select(maxage) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `maxage`
FROM
  (SELECT MAX(`age`) AS `maxage`
   FROM
     (SELECT `C_name`,
             `F_key`,
             `LHS`.`S_key` AS `S_key`,
             `F_name`,
             `major`,
             `age`
      FROM
        (SELECT `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `S_key`,
                `F_name`
         FROM
           (SELECT `LHS`.`C_name` AS `C_name`,
                   `F_key`,
                   `S_key`
            FROM `df_2_1` AS `LHS`
            INNER JOIN `df_2_2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
         INNER JOIN `df_2_3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
      INNER JOIN `df_2_4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
   WHERE (`F_name` = 'faculty1'
          OR `major` = 'History'))
