[     2.363][MainProcess][INFO] Parsing specification...
[     2.369][MainProcess][INFO] File read
[     2.369][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     2.370][MainProcess][DEBUG] Reading input files...
[     2.381][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-1.txt: ['string', 'string', 'string']
[     2.387][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-2.txt: ['string', 'string']
[     2.392][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5.out: ['string']
[     2.392][MainProcess][INFO] Parsing sketch...
[     2.392][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.392][MainProcess][DEBUG] Sketch creation: Line(T2, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.393][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.437][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 376, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 24, 'filter': 4, 'summarise': 22, 'mutate': 2}
[     2.437][MainProcess][DEBUG] {'natural_join': 0.007575757575757576, 'natural_join3': 0.015151515151515152, 'natural_join4': 0.030303030303030304, 'inner_join': 0.7121212121212122, 'anti_join': 0.08333333333333333, 'left_join': 0.007575757575757576, 'union': 0.007575757575757576, 'intersect': 0.030303030303030304, 'semi_join': 0.007575757575757576, 'cross_join': 0.045454545454545456, 'filter': 0.007575757575757576, 'summarise': 0.041666666666666664, 'mutate': 0.003787878787878788}
[     2.437][MainProcess][DEBUG] {'natural_join': 0.007575757575757577, 'natural_join3': 0.015151515151515154, 'natural_join4': 0.030303030303030307, 'inner_join': 0.7121212121212123, 'anti_join': 0.08333333333333334, 'left_join': 0.007575757575757577, 'union': 0.007575757575757577, 'intersect': 0.030303030303030307, 'semi_join': 0.007575757575757577, 'cross_join': 0.04545454545454546, 'filter': 0.007575757575757577, 'summarise': 0.04166666666666667, 'mutate': 0.0037878787878787884}
[     2.437][MainProcess][INFO] Building synthesizer...
[     2.439][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[132, 133]),Child(['??'], type=SummariseCondition, var=[131]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])]), Line(T2, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[132, 133]),Child(['??'], type=Table, var=[132, 133]),Child(['??'], type=JoinCondition, var=[29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[132, 133]),Child(['??'], type=FilterCondition, var=[129, 130]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     3.413][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 166 constraints
[     3.425][MainProcess][DEBUG] Enumeration time: 0.9874787330627441
[     3.752][MainProcess][DEBUG] Synthesis time: 0.3271770477294922
[     3.753][MainProcess][INFO] Solution found: [summarise(input0, 'n = n()', 'F_key'), inner_join(input1, line0, 'F_key'), filter(line1, 'n == max(n)')]
[     3.754][MainProcess][DEBUG] Solution found using process 0
[     3.755][MainProcess][INFO] Statistics:
[     3.755][MainProcess][INFO] 	Attempted programs: 16 (approx)
[     3.755][MainProcess][INFO] 		Rejected: 15 (approx)
[     3.755][MainProcess][INFO] 		Failed: 0 (approx)
[     3.755][MainProcess][INFO] 		Empty outputs: 4 (25.0%) (approx)
[     3.755][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     3.755][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     3.755][MainProcess][INFO] 	Total time spent in enumerator init: 0.987479 (approx)
[     3.756][MainProcess][INFO] 	Total time spent in enumerator: 0.033947 (approx)
[     3.756][MainProcess][INFO] 		Enumerated 471.319760 programs/s avg. (just enumeration time)
[     3.756][MainProcess][INFO] 		Enumerated 5.228249 programs/s avg. (overall)
[     3.756][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.275539 (approx)
[     3.756][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.016499 (approx)
[     3.756][MainProcess][INFO] Solution found: [summarise(input0, 'n = n()', 'F_key'), inner_join(input1, line0, 'F_key'), filter(line1, 'n == max(n)')]
[     3.756][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 5))
(declare-fun bv_1_0_a () (_ BitVec 5))
(declare-fun bv_1_1_b () (_ BitVec 5))
(declare-fun bv_1_1_a () (_ BitVec 5))
(declare-fun bv_1_2_b () (_ BitVec 5))
(declare-fun bv_1_2_a () (_ BitVec 5))
(declare-fun bv_1_3_b () (_ BitVec 5))
(declare-fun bv_1_3_a () (_ BitVec 5))
(declare-fun bv_2_0_b () (_ BitVec 5))
(declare-fun bv_1 () (_ BitVec 5))
(declare-fun bv_2_0_a () (_ BitVec 5))
(declare-fun bv_2_1_b () (_ BitVec 5))
(declare-fun bv_2_1_a () (_ BitVec 5))
(declare-fun bv_2_2_b () (_ BitVec 5))
(declare-fun bv_2_2_a () (_ BitVec 5))
(declare-fun bv_2_3_b () (_ BitVec 5))
(declare-fun bv_2_3_a () (_ BitVec 5))
(declare-fun bv_3_0_b () (_ BitVec 5))
(declare-fun bv_2 () (_ BitVec 5))
(declare-fun bv_3_0_a () (_ BitVec 5))
(declare-fun bv_3_1_b () (_ BitVec 5))
(declare-fun bv_3_1_a () (_ BitVec 5))
(declare-fun bv_3_2_b () (_ BitVec 5))
(declare-fun bv_3_2_a () (_ BitVec 5))
(declare-fun bv_3_3_b () (_ BitVec 5))
(declare-fun bv_3_3_a () (_ BitVec 5))
(declare-fun bv_3 () (_ BitVec 5))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 132) (= leaf_1_0 133)))
(assert (<= leaf_1_0 133))
(assert (>= leaf_1_0 132))
(assert (or (= leaf_1_1 131)))
(assert (<= leaf_1_1 131))
(assert (>= leaf_1_1 131))
(assert (or (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)
    (= leaf_1_2 26)
    (= leaf_1_2 27)
    (= leaf_1_2 28)))
(assert (<= leaf_1_2 28))
(assert (>= leaf_1_2 18))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 4)))
(assert (or (= leaf_2_0 132) (= leaf_2_0 133) (= leaf_2_0 135)))
(assert (<= leaf_2_0 135))
(assert (>= leaf_2_0 132))
(assert (or (= leaf_2_1 132) (= leaf_2_1 133) (= leaf_2_1 135)))
(assert (<= leaf_2_1 135))
(assert (>= leaf_2_1 132))
(assert (or (= leaf_2_2 29)
    (= leaf_2_2 30)
    (= leaf_2_2 31)
    (= leaf_2_2 32)
    (= leaf_2_2 33)
    (= leaf_2_2 34)
    (= leaf_2_2 35)
    (= leaf_2_2 36)
    (= leaf_2_2 37)
    (= leaf_2_2 38)
    (= leaf_2_2 39)
    (= leaf_2_2 40)
    (= leaf_2_2 41)
    (= leaf_2_2 42)
    (= leaf_2_2 43)
    (= leaf_2_2 44)
    (= leaf_2_2 45)
    (= leaf_2_2 46)
    (= leaf_2_2 47)
    (= leaf_2_2 48)
    (= leaf_2_2 49)
    (= leaf_2_2 50)
    (= leaf_2_2 51)
    (= leaf_2_2 52)
    (= leaf_2_2 53)
    (= leaf_2_2 54)
    (= leaf_2_2 55)
    (= leaf_2_2 56)
    (= leaf_2_2 57)
    (= leaf_2_2 58)
    (= leaf_2_2 59)
    (= leaf_2_2 60)
    (= leaf_2_2 61)
    (= leaf_2_2 62)
    (= leaf_2_2 63)
    (= leaf_2_2 64)
    (= leaf_2_2 65)
    (= leaf_2_2 66)
    (= leaf_2_2 67)
    (= leaf_2_2 68)
    (= leaf_2_2 69)
    (= leaf_2_2 70)
    (= leaf_2_2 71)
    (= leaf_2_2 72)
    (= leaf_2_2 73)
    (= leaf_2_2 74)
    (= leaf_2_2 75)
    (= leaf_2_2 76)
    (= leaf_2_2 77)
    (= leaf_2_2 78)
    (= leaf_2_2 79)
    (= leaf_2_2 80)
    (= leaf_2_2 81)
    (= leaf_2_2 82)
    (= leaf_2_2 83)
    (= leaf_2_2 84)
    (= leaf_2_2 85)
    (= leaf_2_2 86)
    (= leaf_2_2 87)
    (= leaf_2_2 88)
    (= leaf_2_2 89)
    (= leaf_2_2 90)
    (= leaf_2_2 91)
    (= leaf_2_2 92)
    (= leaf_2_2 93)
    (= leaf_2_2 94)
    (= leaf_2_2 95)
    (= leaf_2_2 96)
    (= leaf_2_2 97)
    (= leaf_2_2 98)
    (= leaf_2_2 99)
    (= leaf_2_2 100)
    (= leaf_2_2 101)
    (= leaf_2_2 102)
    (= leaf_2_2 103)
    (= leaf_2_2 104)
    (= leaf_2_2 105)
    (= leaf_2_2 106)
    (= leaf_2_2 107)
    (= leaf_2_2 108)
    (= leaf_2_2 109)
    (= leaf_2_2 110)
    (= leaf_2_2 111)
    (= leaf_2_2 112)
    (= leaf_2_2 113)
    (= leaf_2_2 114)
    (= leaf_2_2 115)
    (= leaf_2_2 116)
    (= leaf_2_2 117)
    (= leaf_2_2 118)
    (= leaf_2_2 119)
    (= leaf_2_2 120)
    (= leaf_2_2 121)
    (= leaf_2_2 122)))
(assert (<= leaf_2_2 122))
(assert (>= leaf_2_2 29))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 11)))
(assert (or (= leaf_3_0 132) (= leaf_3_0 133) (= leaf_3_0 135) (= leaf_3_0 136)))
(assert (<= leaf_3_0 136))
(assert (>= leaf_3_0 132))
(assert (or (= leaf_3_1 129) (= leaf_3_1 130)))
(assert (<= leaf_3_1 130))
(assert (>= leaf_3_1 129))
(assert (or (= leaf_3_2 0)))
(assert (<= leaf_3_2 0))
(assert (>= leaf_3_2 0))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 132)
    (= leaf_1_1 132)
    (= leaf_1_2 132)
    (= leaf_1_3 132)
    (= leaf_2_0 132)
    (= leaf_2_1 132)
    (= leaf_2_2 132)
    (= leaf_2_3 132)
    (= leaf_3_0 132)
    (= leaf_3_1 132)
    (= leaf_3_2 132)
    (= leaf_3_3 132)))
(assert (or (= leaf_1_0 133)
    (= leaf_1_1 133)
    (= leaf_1_2 133)
    (= leaf_1_3 133)
    (= leaf_2_0 133)
    (= leaf_2_1 133)
    (= leaf_2_2 133)
    (= leaf_2_3 133)
    (= leaf_3_0 133)
    (= leaf_3_1 133)
    (= leaf_3_2 133)
    (= leaf_3_3 133)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 132) (= #b01011 bv_1_0_a) (= #b00000 bv_1_0_b))
        (and (= leaf_1_0 133) (= #b00110 bv_1_0_a) (= #b00000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 131) (= #b00000 bv_1_1_a) (= #b10000 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 18) (= #b00000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b00001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 20) (= #b00010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b00100 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b01000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b00011 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 24) (= #b00101 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 25) (= #b01001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 26) (= #b00110 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 27) (= #b01010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 28) (= #b01100 bv_1_2_a) (= #b00000 bv_1_2_b)))))
(assert (=> (= root_1 12)
    (and (= leaf_1_3 0) (= #b00000 bv_1_3_a) (= #b00000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 135)))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_0 132) (= #b01011 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 133) (= #b00110 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 135) (= bv_2_0_a bv_1) (= #b00000 bv_2_0_b)))))
(assert (= leaf_2_1_is_line_1 (= leaf_2_1 135)))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_1 132) (= #b01011 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 133) (= #b00110 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 135) (= bv_2_1_a bv_1) (= #b00000 bv_2_1_b)))))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_2 29) (= #b10001 bv_2_2_a) (= #b10010 bv_2_2_b))
        (and (= leaf_2_2 30) (= #b10001 bv_2_2_a) (= #b11000 bv_2_2_b))
        (and (= leaf_2_2 31) (= #b10001 bv_2_2_a) (= #b10100 bv_2_2_b))
        (and (= leaf_2_2 32) (= #b10010 bv_2_2_a) (= #b10001 bv_2_2_b))
        (and (= leaf_2_2 33) (= #b10010 bv_2_2_a) (= #b11000 bv_2_2_b))
        (and (= leaf_2_2 34) (= #b10010 bv_2_2_a) (= #b10100 bv_2_2_b))
        (and (= leaf_2_2 35) (= #b11000 bv_2_2_a) (= #b10001 bv_2_2_b))
        (and (= leaf_2_2 36) (= #b11000 bv_2_2_a) (= #b10010 bv_2_2_b))
        (and (= leaf_2_2 37) (= #b11000 bv_2_2_a) (= #b10100 bv_2_2_b))
        (and (= leaf_2_2 38) (= #b10100 bv_2_2_a) (= #b10001 bv_2_2_b))
        (and (= leaf_2_2 39) (= #b10100 bv_2_2_a) (= #b10010 bv_2_2_b))
        (and (= leaf_2_2 40) (= #b10100 bv_2_2_a) (= #b11000 bv_2_2_b))
        (and (= leaf_2_2 41) (= #b00011 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 42) (= #b00011 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 43) (= #b01001 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 44) (= #b01001 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 45) (= #b00101 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 46) (= #b00101 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 47) (= #b00011 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 48) (= #b00011 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 49) (= #b00011 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 50) (= #b01001 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 51) (= #b01001 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 52) (= #b01001 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 53) (= #b00101 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 54) (= #b00101 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 55) (= #b00101 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 56) (= #b00011 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 57) (= #b00011 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 58) (= #b00011 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 59) (= #b01001 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 60) (= #b01001 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 61) (= #b01001 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 62) (= #b00101 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 63) (= #b00101 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 64) (= #b00101 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 65) (= #b00011 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 66) (= #b00011 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 67) (= #b00011 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 68) (= #b01001 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 69) (= #b01001 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 70) (= #b01001 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 71) (= #b00101 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 72) (= #b00101 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 73) (= #b00101 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 74) (= #b01010 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 75) (= #b01010 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 76) (= #b01010 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 77) (= #b00110 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 78) (= #b00110 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 79) (= #b00110 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 80) (= #b01010 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 81) (= #b01010 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 82) (= #b00110 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 83) (= #b00110 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 84) (= #b01010 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 85) (= #b01010 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 86) (= #b01010 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 87) (= #b00110 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 88) (= #b00110 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 89) (= #b00110 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 90) (= #b01010 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 91) (= #b01010 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 92) (= #b01010 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 93) (= #b00110 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 94) (= #b00110 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 95) (= #b00110 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 96) (= #b01100 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 97) (= #b01100 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 98) (= #b01100 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 99) (= #b01100 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 100) (= #b01100 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 101) (= #b01100 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 102) (= #b01100 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 103) (= #b01100 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 104) (= #b01100 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 105) (= #b01100 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 106) (= #b01100 bv_2_2_a) (= #b01100 bv_2_2_b))
        (and (= leaf_2_2 107) (= #b00001 bv_2_2_a) (= #b00010 bv_2_2_b))
        (and (= leaf_2_2 108) (= #b00001 bv_2_2_a) (= #b01000 bv_2_2_b))
        (and (= leaf_2_2 109) (= #b00001 bv_2_2_a) (= #b00100 bv_2_2_b))
        (and (= leaf_2_2 110) (= #b00010 bv_2_2_a) (= #b01000 bv_2_2_b))
        (and (= leaf_2_2 111) (= #b00010 bv_2_2_a) (= #b00100 bv_2_2_b))
        (and (= leaf_2_2 112) (= #b01000 bv_2_2_a) (= #b00100 bv_2_2_b))
        (and (= leaf_2_2 113) (= #b00001 bv_2_2_a) (= #b00001 bv_2_2_b))
        (and (= leaf_2_2 114) (= #b00010 bv_2_2_a) (= #b00010 bv_2_2_b))
        (and (= leaf_2_2 115) (= #b00100 bv_2_2_a) (= #b00100 bv_2_2_b))
        (and (= leaf_2_2 116) (= #b01000 bv_2_2_a) (= #b01000 bv_2_2_b))
        (and (= leaf_2_2 117) (= #b00011 bv_2_2_a) (= #b00011 bv_2_2_b))
        (and (= leaf_2_2 118) (= #b00101 bv_2_2_a) (= #b00101 bv_2_2_b))
        (and (= leaf_2_2 119) (= #b01001 bv_2_2_a) (= #b01001 bv_2_2_b))
        (and (= leaf_2_2 120) (= #b00110 bv_2_2_a) (= #b00110 bv_2_2_b))
        (and (= leaf_2_2 121) (= #b01010 bv_2_2_a) (= #b01010 bv_2_2_b))
        (and (= leaf_2_2 122) (= #b01100 bv_2_2_a) (= #b01100 bv_2_2_b)))))
(assert (=> (= root_2 4) (and (= leaf_2_3 0) (= #b00000 bv_2_3_a) (= #b00000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 135)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 136)))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_0 132) (= #b01011 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 133) (= #b00110 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 135) (= bv_3_0_a bv_1) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 136) (= bv_3_0_a bv_2) (= #b00000 bv_3_0_b)))))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_1 129) (= #b10000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 130) (= #b10000 bv_3_1_a) (= #b00000 bv_3_1_b)))))
(assert (=> (= root_3 11)
    (and (= leaf_3_2 0) (= #b00000 bv_3_2_a) (= #b00000 bv_3_2_b))))
(assert (=> (= root_3 11)
    (and (= leaf_3_3 0) (= #b00000 bv_3_3_a) (= #b00000 bv_3_3_b))))
(assert (or (= leaf_1_0 131)
    (= leaf_1_1 131)
    (= leaf_1_2 131)
    (= leaf_1_3 131)
    (= leaf_2_0 131)
    (= leaf_2_1 131)
    (= leaf_2_2 131)
    (= leaf_2_3 131)
    (= leaf_3_0 131)
    (= leaf_3_1 131)
    (= leaf_3_2 131)
    (= leaf_3_3 131)))
(assert (or (= leaf_1_0 129)
    (= leaf_1_1 129)
    (= leaf_1_2 129)
    (= leaf_1_3 129)
    (= leaf_2_0 129)
    (= leaf_2_1 129)
    (= leaf_2_2 129)
    (= leaf_2_3 129)
    (= leaf_3_0 129)
    (= leaf_3_1 129)
    (= leaf_3_2 129)
    (= leaf_3_3 129)
    (= leaf_1_0 130)
    (= leaf_1_1 130)
    (= leaf_1_2 130)
    (= leaf_1_3 130)
    (= leaf_2_0 130)
    (= leaf_2_1 130)
    (= leaf_2_2 130)
    (= leaf_2_3 130)
    (= leaf_3_0 130)
    (= leaf_3_1 130)
    (= leaf_3_2 130)
    (= leaf_3_3 130)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00000 bv_1_2_a)
                    (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b00000 bv_2_2_a)
                    (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b00000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b00000 bv_3_2_a)
                    (distinct #b00000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b00000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b00000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #b00000 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_5_1 <- read_csv("tests-examples/textbook/tables/5-1.txt", col_types = cols("C_name" = col_character(),"F_key" = col_character(),"Room" = col_character()))
df_5_1 <- copy_to(con, df_5_1)
df_5_2 <- read_csv("tests-examples/textbook/tables/5-2.txt", col_types = cols("F_key" = col_character(),"F_name" = col_character()))
df_5_2 <- copy_to(con, df_5_2)
expected_output <- read_csv("tests-examples/textbook/tables/5.out", col_types = cols("F_name" = col_character()))

df27 <- df_5_1 %>% group_by(F_key) %>% summarise(n = n()) %>% ungroup()
df28 <- inner_join(df_5_2, df27, by=c('F_key'), suffix = c('', '.other'), na_matches='never')
df29 <- df28 %>% filter(n == max(n))
out <- df29 %>% select(F_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT F_name
FROM
  (SELECT F_key,
          F_name,
          n
   FROM
     (SELECT F_key,
             F_name,
             n,
             MAX(n) OVER () AS q01
      FROM
        (SELECT LHS.F_key AS F_key,
                F_name,
                n
         FROM df_5_2 AS LHS
         INNER JOIN
           (SELECT F_key,
                   COUNT(*) AS n
            FROM df_5_1
            GROUP BY F_key) AS RHS ON (LHS.F_key = RHS.F_key)))
   WHERE (n = q01))
