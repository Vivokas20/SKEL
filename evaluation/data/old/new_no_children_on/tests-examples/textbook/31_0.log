[     2.359][MainProcess][INFO] Parsing specification...
[     2.365][MainProcess][INFO] File read
[     2.367][MainProcess][DEBUG] Reading input files...
[     2.374][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     2.379][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     2.385][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'Float64']
[     2.390][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/31.out: ['string']
[     2.390][MainProcess][INFO] Parsing sketch...
[     2.390][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.390][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.390][MainProcess][DEBUG] Sketch creation: Line(T3, root=['anti_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Cols, var=[])])
[     2.435][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 711, 'anti_join': 198, 'left_join': 9, 'union': 9, 'intersect': 54, 'semi_join': 9, 'cross_join': 288, 'filter': 96}
[     2.435][MainProcess][DEBUG] {'natural_join': 0.006036217303822937, 'natural_join3': 0.018108651911468814, 'natural_join4': 0.05432595573440644, 'inner_join': 0.4768611670020121, 'anti_join': 0.13279678068410464, 'left_join': 0.006036217303822937, 'union': 0.006036217303822937, 'intersect': 0.03621730382293763, 'semi_join': 0.006036217303822937, 'cross_join': 0.193158953722334, 'filter': 0.06438631790744467}
[     2.435][MainProcess][DEBUG] {'natural_join': 0.006036217303822937, 'natural_join3': 0.018108651911468814, 'natural_join4': 0.05432595573440644, 'inner_join': 0.4768611670020121, 'anti_join': 0.13279678068410464, 'left_join': 0.006036217303822937, 'union': 0.006036217303822937, 'intersect': 0.03621730382293763, 'semi_join': 0.006036217303822937, 'cross_join': 0.193158953722334, 'filter': 0.06438631790744467}
[     2.435][MainProcess][INFO] Building synthesizer...
[     2.436][MainProcess][DEBUG] [Line(T1, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[183, 184, 185]),Child(['??'], type=Table, var=[183, 184, 185]),Child(['??'], type=Table, var=[183, 184, 185]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[183, 184, 185]),Child(['??'], type=FilterCondition, var=[151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['anti_join'], var=[5], children=[Child(['??'], type=Table, var=[183, 184, 185]),Child(['??'], type=Table, var=[183, 184, 185]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]),Child([None], type=None, var=[0])])]
[     2.808][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 156 constraints
[     2.820][MainProcess][DEBUG] Enumeration time: 0.3850870132446289
[     4.147][MainProcess][DEBUG] Synthesis time: 1.3267264366149902
[     4.148][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(input0, "str_detect(aname, 'Boeing') | crusingrange <= 3000"), anti_join(line0, line1, 'aid,crusingrange')]
[     4.150][MainProcess][DEBUG] Solution found using process 0
[     4.151][MainProcess][INFO] Statistics:
[     4.151][MainProcess][INFO] 	Attempted programs: 127 (approx)
[     4.151][MainProcess][INFO] 		Rejected: 126 (approx)
[     4.151][MainProcess][INFO] 		Failed: 0 (approx)
[     4.151][MainProcess][INFO] 		Empty outputs: 97 (76.4%) (approx)
[     4.151][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     4.151][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     4.152][MainProcess][INFO] 	Total time spent in enumerator init: 0.385087 (approx)
[     4.152][MainProcess][INFO] 	Total time spent in enumerator: 0.268112 (approx)
[     4.152][MainProcess][INFO] 		Enumerated 473.682739 programs/s avg. (just enumeration time)
[     4.152][MainProcess][INFO] 		Enumerated 36.680018 programs/s avg. (overall)
[     4.152][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.945677 (approx)
[     4.152][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.110470 (approx)
[     4.152][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(input0, "str_detect(aname, 'Boeing') | crusingrange <= 3000"), anti_join(line0, line1, 'aid,crusingrange')]
[     4.152][MainProcess][INFO] Solution size: 3
[     4.564][MainProcess][ERROR] Error while trying to convert R code to SQL.
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 6))
(declare-fun bv_1_0_a () (_ BitVec 6))
(declare-fun bv_1_1_b () (_ BitVec 6))
(declare-fun bv_1_1_a () (_ BitVec 6))
(declare-fun bv_1_2_b () (_ BitVec 6))
(declare-fun bv_1_2_a () (_ BitVec 6))
(declare-fun bv_1_3_b () (_ BitVec 6))
(declare-fun bv_1_3_a () (_ BitVec 6))
(declare-fun bv_2_0_b () (_ BitVec 6))
(declare-fun bv_1 () (_ BitVec 6))
(declare-fun bv_2_0_a () (_ BitVec 6))
(declare-fun bv_2_1_b () (_ BitVec 6))
(declare-fun bv_2_1_a () (_ BitVec 6))
(declare-fun bv_2_2_b () (_ BitVec 6))
(declare-fun bv_2_2_a () (_ BitVec 6))
(declare-fun bv_2_3_b () (_ BitVec 6))
(declare-fun bv_2_3_a () (_ BitVec 6))
(declare-fun bv_3_0_b () (_ BitVec 6))
(declare-fun bv_2 () (_ BitVec 6))
(declare-fun bv_3_0_a () (_ BitVec 6))
(declare-fun bv_3_1_b () (_ BitVec 6))
(declare-fun bv_3_1_a () (_ BitVec 6))
(declare-fun bv_3_2_b () (_ BitVec 6))
(declare-fun bv_3_2_a () (_ BitVec 6))
(declare-fun bv_3_3_b () (_ BitVec 6))
(declare-fun bv_3_3_a () (_ BitVec 6))
(declare-fun bv_3 () (_ BitVec 6))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 2)))
(assert (or (= leaf_1_0 183) (= leaf_1_0 184) (= leaf_1_0 185)))
(assert (<= leaf_1_0 185))
(assert (>= leaf_1_0 183))
(assert (or (= leaf_1_1 183) (= leaf_1_1 184) (= leaf_1_1 185)))
(assert (<= leaf_1_1 185))
(assert (>= leaf_1_1 183))
(assert (or (= leaf_1_2 183) (= leaf_1_2 184) (= leaf_1_2 185)))
(assert (<= leaf_1_2 185))
(assert (>= leaf_1_2 183))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 183) (= leaf_2_0 184) (= leaf_2_0 185) (= leaf_2_0 187)))
(assert (<= leaf_2_0 187))
(assert (>= leaf_2_0 183))
(assert (or (= leaf_2_1 151)
    (= leaf_2_1 152)
    (= leaf_2_1 153)
    (= leaf_2_1 154)
    (= leaf_2_1 155)
    (= leaf_2_1 156)
    (= leaf_2_1 157)
    (= leaf_2_1 158)
    (= leaf_2_1 159)
    (= leaf_2_1 160)
    (= leaf_2_1 161)
    (= leaf_2_1 162)
    (= leaf_2_1 163)
    (= leaf_2_1 164)
    (= leaf_2_1 165)
    (= leaf_2_1 166)
    (= leaf_2_1 167)
    (= leaf_2_1 168)
    (= leaf_2_1 169)
    (= leaf_2_1 170)
    (= leaf_2_1 171)
    (= leaf_2_1 172)
    (= leaf_2_1 173)
    (= leaf_2_1 174)
    (= leaf_2_1 175)
    (= leaf_2_1 176)
    (= leaf_2_1 177)
    (= leaf_2_1 178)
    (= leaf_2_1 179)
    (= leaf_2_1 180)
    (= leaf_2_1 181)
    (= leaf_2_1 182)))
(assert (<= leaf_2_1 182))
(assert (>= leaf_2_1 151))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 5)))
(assert (or (= leaf_3_0 183)
    (= leaf_3_0 184)
    (= leaf_3_0 185)
    (= leaf_3_0 187)
    (= leaf_3_0 188)))
(assert (<= leaf_3_0 188))
(assert (>= leaf_3_0 183))
(assert (or (= leaf_3_1 183)
    (= leaf_3_1 184)
    (= leaf_3_1 185)
    (= leaf_3_1 187)
    (= leaf_3_1 188)))
(assert (<= leaf_3_1 188))
(assert (>= leaf_3_1 183))
(assert (or (= leaf_3_2 18)
    (= leaf_3_2 19)
    (= leaf_3_2 20)
    (= leaf_3_2 21)
    (= leaf_3_2 22)
    (= leaf_3_2 23)
    (= leaf_3_2 24)
    (= leaf_3_2 25)
    (= leaf_3_2 26)
    (= leaf_3_2 27)
    (= leaf_3_2 28)
    (= leaf_3_2 29)
    (= leaf_3_2 30)
    (= leaf_3_2 31)
    (= leaf_3_2 32)
    (= leaf_3_2 33)
    (= leaf_3_2 34)
    (= leaf_3_2 35)
    (= leaf_3_2 36)
    (= leaf_3_2 37)
    (= leaf_3_2 38)
    (= leaf_3_2 39)))
(assert (<= leaf_3_2 39))
(assert (>= leaf_3_2 18))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 183)
    (= leaf_1_1 183)
    (= leaf_1_2 183)
    (= leaf_1_3 183)
    (= leaf_2_0 183)
    (= leaf_2_1 183)
    (= leaf_2_2 183)
    (= leaf_2_3 183)
    (= leaf_3_0 183)
    (= leaf_3_1 183)
    (= leaf_3_2 183)
    (= leaf_3_3 183)))
(assert (or (= leaf_1_0 184)
    (= leaf_1_1 184)
    (= leaf_1_2 184)
    (= leaf_1_3 184)
    (= leaf_2_0 184)
    (= leaf_2_1 184)
    (= leaf_2_2 184)
    (= leaf_2_3 184)
    (= leaf_3_0 184)
    (= leaf_3_1 184)
    (= leaf_3_2 184)
    (= leaf_3_3 184)))
(assert (or (= leaf_1_0 185)
    (= leaf_1_1 185)
    (= leaf_1_2 185)
    (= leaf_1_3 185)
    (= leaf_2_0 185)
    (= leaf_2_1 185)
    (= leaf_2_2 185)
    (= leaf_2_3 185)
    (= leaf_3_0 185)
    (= leaf_3_1 185)
    (= leaf_3_2 185)
    (= leaf_3_3 185)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_0 183) (= #b000111 bv_1_0_a) (= #b000000 bv_1_0_b))
        (and (= leaf_1_0 184) (= #b001001 bv_1_0_a) (= #b000000 bv_1_0_b))
        (and (= leaf_1_0 185) (= #b111000 bv_1_0_a) (= #b000000 bv_1_0_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_1 183) (= #b000111 bv_1_1_a) (= #b000000 bv_1_1_b))
        (and (= leaf_1_1 184) (= #b001001 bv_1_1_a) (= #b000000 bv_1_1_b))
        (and (= leaf_1_1 185) (= #b111000 bv_1_1_a) (= #b000000 bv_1_1_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_2 183) (= #b000111 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 184) (= #b001001 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 185) (= #b111000 bv_1_2_a) (= #b000000 bv_1_2_b)))))
(assert (=> (= root_1 2)
    (and (= leaf_1_3 0) (= #b000000 bv_1_3_a) (= #b000000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 187)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 183) (= #b000111 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 184) (= #b001001 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 185) (= #b111000 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 187) (= bv_2_0_a bv_1) (= #b000000 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 151) (= #b000010 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 152) (= #b000010 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 153) (= #b000100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 154) (= #b000100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 155) (= #b000100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 156) (= #b000100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 157) (= #b000100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 158) (= #b000100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 159) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 160) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 161) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 162) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 163) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 164) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 165) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 166) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 167) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 168) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 169) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 170) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 171) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 172) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 173) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 174) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 175) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 176) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 177) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 178) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 179) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 180) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 181) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 182) (= #b000110 bv_2_1_a) (= #b000000 bv_2_1_b)))))
(assert (=> (= root_2 11)
    (and (= leaf_2_2 0) (= #b000000 bv_2_2_a) (= #b000000 bv_2_2_b))))
(assert (=> (= root_2 11)
    (and (= leaf_2_3 0) (= #b000000 bv_2_3_a) (= #b000000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 187)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 188)))
(assert (=> (= root_3 5)
    (or (and (= leaf_3_0 183) (= #b000111 bv_3_0_a) (= #b000000 bv_3_0_b))
        (and (= leaf_3_0 184) (= #b001001 bv_3_0_a) (= #b000000 bv_3_0_b))
        (and (= leaf_3_0 185) (= #b111000 bv_3_0_a) (= #b000000 bv_3_0_b))
        (and (= leaf_3_0 187) (= bv_3_0_a bv_1) (= #b000000 bv_3_0_b))
        (and (= leaf_3_0 188) (= bv_3_0_a bv_2) (= #b000000 bv_3_0_b)))))
(assert (= leaf_3_1_is_line_1 (= leaf_3_1 187)))
(assert (= leaf_3_1_is_line_2 (= leaf_3_1 188)))
(assert (=> (= root_3 5)
    (or (and (= leaf_3_1 183) (= #b000111 bv_3_1_a) (= #b000000 bv_3_1_b))
        (and (= leaf_3_1 184) (= #b001001 bv_3_1_a) (= #b000000 bv_3_1_b))
        (and (= leaf_3_1 185) (= #b111000 bv_3_1_a) (= #b000000 bv_3_1_b))
        (and (= leaf_3_1 187) (= bv_3_1_a bv_1) (= #b000000 bv_3_1_b))
        (and (= leaf_3_1 188) (= bv_3_1_a bv_2) (= #b000000 bv_3_1_b)))))
(assert (=> (= root_3 5)
    (or (and (= leaf_3_2 18) (= #b000000 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 19) (= #b000001 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 20) (= #b000010 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 21) (= #b000100 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 22) (= #b001000 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 23) (= #b010000 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 24) (= #b100000 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 25) (= #b000011 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 26) (= #b000101 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 27) (= #b001001 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 28) (= #b010001 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 29) (= #b100001 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 30) (= #b000110 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 31) (= #b001010 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 32) (= #b010010 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 33) (= #b100010 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 34) (= #b001100 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 35) (= #b010100 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 36) (= #b100100 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 37) (= #b011000 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 38) (= #b101000 bv_3_2_a) (= #b000000 bv_3_2_b))
        (and (= leaf_3_2 39) (= #b110000 bv_3_2_a) (= #b000000 bv_3_2_b)))))
(assert (=> (= root_3 5)
    (and (= leaf_3_3 0) (= #b000000 bv_3_3_a) (= #b000000 bv_3_3_b))))
(assert (or (= leaf_1_0 153)
    (= leaf_1_1 153)
    (= leaf_1_2 153)
    (= leaf_1_3 153)
    (= leaf_2_0 153)
    (= leaf_2_1 153)
    (= leaf_2_2 153)
    (= leaf_2_3 153)
    (= leaf_3_0 153)
    (= leaf_3_1 153)
    (= leaf_3_2 153)
    (= leaf_3_3 153)
    (= leaf_1_0 154)
    (= leaf_1_1 154)
    (= leaf_1_2 154)
    (= leaf_1_3 154)
    (= leaf_2_0 154)
    (= leaf_2_1 154)
    (= leaf_2_2 154)
    (= leaf_2_3 154)
    (= leaf_3_0 154)
    (= leaf_3_1 154)
    (= leaf_3_2 154)
    (= leaf_3_3 154)
    (= leaf_1_0 155)
    (= leaf_1_1 155)
    (= leaf_1_2 155)
    (= leaf_1_3 155)
    (= leaf_2_0 155)
    (= leaf_2_1 155)
    (= leaf_2_2 155)
    (= leaf_2_3 155)
    (= leaf_3_0 155)
    (= leaf_3_1 155)
    (= leaf_3_2 155)
    (= leaf_3_3 155)
    (= leaf_1_0 156)
    (= leaf_1_1 156)
    (= leaf_1_2 156)
    (= leaf_1_3 156)
    (= leaf_2_0 156)
    (= leaf_2_1 156)
    (= leaf_2_2 156)
    (= leaf_2_3 156)
    (= leaf_3_0 156)
    (= leaf_3_1 156)
    (= leaf_3_2 156)
    (= leaf_3_3 156)
    (= leaf_1_0 157)
    (= leaf_1_1 157)
    (= leaf_1_2 157)
    (= leaf_1_3 157)
    (= leaf_2_0 157)
    (= leaf_2_1 157)
    (= leaf_2_2 157)
    (= leaf_2_3 157)
    (= leaf_3_0 157)
    (= leaf_3_1 157)
    (= leaf_3_2 157)
    (= leaf_3_3 157)
    (= leaf_1_0 158)
    (= leaf_1_1 158)
    (= leaf_1_2 158)
    (= leaf_1_3 158)
    (= leaf_2_0 158)
    (= leaf_2_1 158)
    (= leaf_2_2 158)
    (= leaf_2_3 158)
    (= leaf_3_0 158)
    (= leaf_3_1 158)
    (= leaf_3_2 158)
    (= leaf_3_3 158)
    (= leaf_1_0 160)
    (= leaf_1_1 160)
    (= leaf_1_2 160)
    (= leaf_1_3 160)
    (= leaf_2_0 160)
    (= leaf_2_1 160)
    (= leaf_2_2 160)
    (= leaf_2_3 160)
    (= leaf_3_0 160)
    (= leaf_3_1 160)
    (= leaf_3_2 160)
    (= leaf_3_3 160)
    (= leaf_1_0 159)
    (= leaf_1_1 159)
    (= leaf_1_2 159)
    (= leaf_1_3 159)
    (= leaf_2_0 159)
    (= leaf_2_1 159)
    (= leaf_2_2 159)
    (= leaf_2_3 159)
    (= leaf_3_0 159)
    (= leaf_3_1 159)
    (= leaf_3_2 159)
    (= leaf_3_3 159)
    (= leaf_1_0 162)
    (= leaf_1_1 162)
    (= leaf_1_2 162)
    (= leaf_1_3 162)
    (= leaf_2_0 162)
    (= leaf_2_1 162)
    (= leaf_2_2 162)
    (= leaf_2_3 162)
    (= leaf_3_0 162)
    (= leaf_3_1 162)
    (= leaf_3_2 162)
    (= leaf_3_3 162)
    (= leaf_1_0 161)
    (= leaf_1_1 161)
    (= leaf_1_2 161)
    (= leaf_1_3 161)
    (= leaf_2_0 161)
    (= leaf_2_1 161)
    (= leaf_2_2 161)
    (= leaf_2_3 161)
    (= leaf_3_0 161)
    (= leaf_3_1 161)
    (= leaf_3_2 161)
    (= leaf_3_3 161)
    (= leaf_1_0 164)
    (= leaf_1_1 164)
    (= leaf_1_2 164)
    (= leaf_1_3 164)
    (= leaf_2_0 164)
    (= leaf_2_1 164)
    (= leaf_2_2 164)
    (= leaf_2_3 164)
    (= leaf_3_0 164)
    (= leaf_3_1 164)
    (= leaf_3_2 164)
    (= leaf_3_3 164)
    (= leaf_1_0 163)
    (= leaf_1_1 163)
    (= leaf_1_2 163)
    (= leaf_1_3 163)
    (= leaf_2_0 163)
    (= leaf_2_1 163)
    (= leaf_2_2 163)
    (= leaf_2_3 163)
    (= leaf_3_0 163)
    (= leaf_3_1 163)
    (= leaf_3_2 163)
    (= leaf_3_3 163)
    (= leaf_1_0 166)
    (= leaf_1_1 166)
    (= leaf_1_2 166)
    (= leaf_1_3 166)
    (= leaf_2_0 166)
    (= leaf_2_1 166)
    (= leaf_2_2 166)
    (= leaf_2_3 166)
    (= leaf_3_0 166)
    (= leaf_3_1 166)
    (= leaf_3_2 166)
    (= leaf_3_3 166)
    (= leaf_1_0 165)
    (= leaf_1_1 165)
    (= leaf_1_2 165)
    (= leaf_1_3 165)
    (= leaf_2_0 165)
    (= leaf_2_1 165)
    (= leaf_2_2 165)
    (= leaf_2_3 165)
    (= leaf_3_0 165)
    (= leaf_3_1 165)
    (= leaf_3_2 165)
    (= leaf_3_3 165)
    (= leaf_1_0 168)
    (= leaf_1_1 168)
    (= leaf_1_2 168)
    (= leaf_1_3 168)
    (= leaf_2_0 168)
    (= leaf_2_1 168)
    (= leaf_2_2 168)
    (= leaf_2_3 168)
    (= leaf_3_0 168)
    (= leaf_3_1 168)
    (= leaf_3_2 168)
    (= leaf_3_3 168)
    (= leaf_1_0 167)
    (= leaf_1_1 167)
    (= leaf_1_2 167)
    (= leaf_1_3 167)
    (= leaf_2_0 167)
    (= leaf_2_1 167)
    (= leaf_2_2 167)
    (= leaf_2_3 167)
    (= leaf_3_0 167)
    (= leaf_3_1 167)
    (= leaf_3_2 167)
    (= leaf_3_3 167)
    (= leaf_1_0 170)
    (= leaf_1_1 170)
    (= leaf_1_2 170)
    (= leaf_1_3 170)
    (= leaf_2_0 170)
    (= leaf_2_1 170)
    (= leaf_2_2 170)
    (= leaf_2_3 170)
    (= leaf_3_0 170)
    (= leaf_3_1 170)
    (= leaf_3_2 170)
    (= leaf_3_3 170)
    (= leaf_1_0 169)
    (= leaf_1_1 169)
    (= leaf_1_2 169)
    (= leaf_1_3 169)
    (= leaf_2_0 169)
    (= leaf_2_1 169)
    (= leaf_2_2 169)
    (= leaf_2_3 169)
    (= leaf_3_0 169)
    (= leaf_3_1 169)
    (= leaf_3_2 169)
    (= leaf_3_3 169)
    (= leaf_1_0 172)
    (= leaf_1_1 172)
    (= leaf_1_2 172)
    (= leaf_1_3 172)
    (= leaf_2_0 172)
    (= leaf_2_1 172)
    (= leaf_2_2 172)
    (= leaf_2_3 172)
    (= leaf_3_0 172)
    (= leaf_3_1 172)
    (= leaf_3_2 172)
    (= leaf_3_3 172)
    (= leaf_1_0 171)
    (= leaf_1_1 171)
    (= leaf_1_2 171)
    (= leaf_1_3 171)
    (= leaf_2_0 171)
    (= leaf_2_1 171)
    (= leaf_2_2 171)
    (= leaf_2_3 171)
    (= leaf_3_0 171)
    (= leaf_3_1 171)
    (= leaf_3_2 171)
    (= leaf_3_3 171)
    (= leaf_1_0 174)
    (= leaf_1_1 174)
    (= leaf_1_2 174)
    (= leaf_1_3 174)
    (= leaf_2_0 174)
    (= leaf_2_1 174)
    (= leaf_2_2 174)
    (= leaf_2_3 174)
    (= leaf_3_0 174)
    (= leaf_3_1 174)
    (= leaf_3_2 174)
    (= leaf_3_3 174)
    (= leaf_1_0 173)
    (= leaf_1_1 173)
    (= leaf_1_2 173)
    (= leaf_1_3 173)
    (= leaf_2_0 173)
    (= leaf_2_1 173)
    (= leaf_2_2 173)
    (= leaf_2_3 173)
    (= leaf_3_0 173)
    (= leaf_3_1 173)
    (= leaf_3_2 173)
    (= leaf_3_3 173)
    (= leaf_1_0 176)
    (= leaf_1_1 176)
    (= leaf_1_2 176)
    (= leaf_1_3 176)
    (= leaf_2_0 176)
    (= leaf_2_1 176)
    (= leaf_2_2 176)
    (= leaf_2_3 176)
    (= leaf_3_0 176)
    (= leaf_3_1 176)
    (= leaf_3_2 176)
    (= leaf_3_3 176)
    (= leaf_1_0 175)
    (= leaf_1_1 175)
    (= leaf_1_2 175)
    (= leaf_1_3 175)
    (= leaf_2_0 175)
    (= leaf_2_1 175)
    (= leaf_2_2 175)
    (= leaf_2_3 175)
    (= leaf_3_0 175)
    (= leaf_3_1 175)
    (= leaf_3_2 175)
    (= leaf_3_3 175)
    (= leaf_1_0 178)
    (= leaf_1_1 178)
    (= leaf_1_2 178)
    (= leaf_1_3 178)
    (= leaf_2_0 178)
    (= leaf_2_1 178)
    (= leaf_2_2 178)
    (= leaf_2_3 178)
    (= leaf_3_0 178)
    (= leaf_3_1 178)
    (= leaf_3_2 178)
    (= leaf_3_3 178)
    (= leaf_1_0 177)
    (= leaf_1_1 177)
    (= leaf_1_2 177)
    (= leaf_1_3 177)
    (= leaf_2_0 177)
    (= leaf_2_1 177)
    (= leaf_2_2 177)
    (= leaf_2_3 177)
    (= leaf_3_0 177)
    (= leaf_3_1 177)
    (= leaf_3_2 177)
    (= leaf_3_3 177)
    (= leaf_1_0 180)
    (= leaf_1_1 180)
    (= leaf_1_2 180)
    (= leaf_1_3 180)
    (= leaf_2_0 180)
    (= leaf_2_1 180)
    (= leaf_2_2 180)
    (= leaf_2_3 180)
    (= leaf_3_0 180)
    (= leaf_3_1 180)
    (= leaf_3_2 180)
    (= leaf_3_3 180)
    (= leaf_1_0 179)
    (= leaf_1_1 179)
    (= leaf_1_2 179)
    (= leaf_1_3 179)
    (= leaf_2_0 179)
    (= leaf_2_1 179)
    (= leaf_2_2 179)
    (= leaf_2_3 179)
    (= leaf_3_0 179)
    (= leaf_3_1 179)
    (= leaf_3_2 179)
    (= leaf_3_3 179)
    (= leaf_1_0 182)
    (= leaf_1_1 182)
    (= leaf_1_2 182)
    (= leaf_1_3 182)
    (= leaf_2_0 182)
    (= leaf_2_1 182)
    (= leaf_2_2 182)
    (= leaf_2_3 182)
    (= leaf_3_0 182)
    (= leaf_3_1 182)
    (= leaf_3_2 182)
    (= leaf_3_3 182)
    (= leaf_1_0 181)
    (= leaf_1_1 181)
    (= leaf_1_2 181)
    (= leaf_1_3 181)
    (= leaf_2_0 181)
    (= leaf_2_1 181)
    (= leaf_2_2 181)
    (= leaf_2_3 181)
    (= leaf_3_0 181)
    (= leaf_3_1 181)
    (= leaf_3_2 181)
    (= leaf_3_3 181)))
(assert (or (= leaf_1_0 151)
    (= leaf_1_1 151)
    (= leaf_1_2 151)
    (= leaf_1_3 151)
    (= leaf_2_0 151)
    (= leaf_2_1 151)
    (= leaf_2_2 151)
    (= leaf_2_3 151)
    (= leaf_3_0 151)
    (= leaf_3_1 151)
    (= leaf_3_2 151)
    (= leaf_3_3 151)
    (= leaf_1_0 152)
    (= leaf_1_1 152)
    (= leaf_1_2 152)
    (= leaf_1_3 152)
    (= leaf_2_0 152)
    (= leaf_2_1 152)
    (= leaf_2_2 152)
    (= leaf_2_3 152)
    (= leaf_3_0 152)
    (= leaf_3_1 152)
    (= leaf_3_2 152)
    (= leaf_3_3 152)
    (= leaf_1_0 160)
    (= leaf_1_1 160)
    (= leaf_1_2 160)
    (= leaf_1_3 160)
    (= leaf_2_0 160)
    (= leaf_2_1 160)
    (= leaf_2_2 160)
    (= leaf_2_3 160)
    (= leaf_3_0 160)
    (= leaf_3_1 160)
    (= leaf_3_2 160)
    (= leaf_3_3 160)
    (= leaf_1_0 159)
    (= leaf_1_1 159)
    (= leaf_1_2 159)
    (= leaf_1_3 159)
    (= leaf_2_0 159)
    (= leaf_2_1 159)
    (= leaf_2_2 159)
    (= leaf_2_3 159)
    (= leaf_3_0 159)
    (= leaf_3_1 159)
    (= leaf_3_2 159)
    (= leaf_3_3 159)
    (= leaf_1_0 162)
    (= leaf_1_1 162)
    (= leaf_1_2 162)
    (= leaf_1_3 162)
    (= leaf_2_0 162)
    (= leaf_2_1 162)
    (= leaf_2_2 162)
    (= leaf_2_3 162)
    (= leaf_3_0 162)
    (= leaf_3_1 162)
    (= leaf_3_2 162)
    (= leaf_3_3 162)
    (= leaf_1_0 161)
    (= leaf_1_1 161)
    (= leaf_1_2 161)
    (= leaf_1_3 161)
    (= leaf_2_0 161)
    (= leaf_2_1 161)
    (= leaf_2_2 161)
    (= leaf_2_3 161)
    (= leaf_3_0 161)
    (= leaf_3_1 161)
    (= leaf_3_2 161)
    (= leaf_3_3 161)
    (= leaf_1_0 164)
    (= leaf_1_1 164)
    (= leaf_1_2 164)
    (= leaf_1_3 164)
    (= leaf_2_0 164)
    (= leaf_2_1 164)
    (= leaf_2_2 164)
    (= leaf_2_3 164)
    (= leaf_3_0 164)
    (= leaf_3_1 164)
    (= leaf_3_2 164)
    (= leaf_3_3 164)
    (= leaf_1_0 163)
    (= leaf_1_1 163)
    (= leaf_1_2 163)
    (= leaf_1_3 163)
    (= leaf_2_0 163)
    (= leaf_2_1 163)
    (= leaf_2_2 163)
    (= leaf_2_3 163)
    (= leaf_3_0 163)
    (= leaf_3_1 163)
    (= leaf_3_2 163)
    (= leaf_3_3 163)
    (= leaf_1_0 166)
    (= leaf_1_1 166)
    (= leaf_1_2 166)
    (= leaf_1_3 166)
    (= leaf_2_0 166)
    (= leaf_2_1 166)
    (= leaf_2_2 166)
    (= leaf_2_3 166)
    (= leaf_3_0 166)
    (= leaf_3_1 166)
    (= leaf_3_2 166)
    (= leaf_3_3 166)
    (= leaf_1_0 165)
    (= leaf_1_1 165)
    (= leaf_1_2 165)
    (= leaf_1_3 165)
    (= leaf_2_0 165)
    (= leaf_2_1 165)
    (= leaf_2_2 165)
    (= leaf_2_3 165)
    (= leaf_3_0 165)
    (= leaf_3_1 165)
    (= leaf_3_2 165)
    (= leaf_3_3 165)
    (= leaf_1_0 168)
    (= leaf_1_1 168)
    (= leaf_1_2 168)
    (= leaf_1_3 168)
    (= leaf_2_0 168)
    (= leaf_2_1 168)
    (= leaf_2_2 168)
    (= leaf_2_3 168)
    (= leaf_3_0 168)
    (= leaf_3_1 168)
    (= leaf_3_2 168)
    (= leaf_3_3 168)
    (= leaf_1_0 167)
    (= leaf_1_1 167)
    (= leaf_1_2 167)
    (= leaf_1_3 167)
    (= leaf_2_0 167)
    (= leaf_2_1 167)
    (= leaf_2_2 167)
    (= leaf_2_3 167)
    (= leaf_3_0 167)
    (= leaf_3_1 167)
    (= leaf_3_2 167)
    (= leaf_3_3 167)
    (= leaf_1_0 170)
    (= leaf_1_1 170)
    (= leaf_1_2 170)
    (= leaf_1_3 170)
    (= leaf_2_0 170)
    (= leaf_2_1 170)
    (= leaf_2_2 170)
    (= leaf_2_3 170)
    (= leaf_3_0 170)
    (= leaf_3_1 170)
    (= leaf_3_2 170)
    (= leaf_3_3 170)
    (= leaf_1_0 169)
    (= leaf_1_1 169)
    (= leaf_1_2 169)
    (= leaf_1_3 169)
    (= leaf_2_0 169)
    (= leaf_2_1 169)
    (= leaf_2_2 169)
    (= leaf_2_3 169)
    (= leaf_3_0 169)
    (= leaf_3_1 169)
    (= leaf_3_2 169)
    (= leaf_3_3 169)
    (= leaf_1_0 172)
    (= leaf_1_1 172)
    (= leaf_1_2 172)
    (= leaf_1_3 172)
    (= leaf_2_0 172)
    (= leaf_2_1 172)
    (= leaf_2_2 172)
    (= leaf_2_3 172)
    (= leaf_3_0 172)
    (= leaf_3_1 172)
    (= leaf_3_2 172)
    (= leaf_3_3 172)
    (= leaf_1_0 171)
    (= leaf_1_1 171)
    (= leaf_1_2 171)
    (= leaf_1_3 171)
    (= leaf_2_0 171)
    (= leaf_2_1 171)
    (= leaf_2_2 171)
    (= leaf_2_3 171)
    (= leaf_3_0 171)
    (= leaf_3_1 171)
    (= leaf_3_2 171)
    (= leaf_3_3 171)
    (= leaf_1_0 174)
    (= leaf_1_1 174)
    (= leaf_1_2 174)
    (= leaf_1_3 174)
    (= leaf_2_0 174)
    (= leaf_2_1 174)
    (= leaf_2_2 174)
    (= leaf_2_3 174)
    (= leaf_3_0 174)
    (= leaf_3_1 174)
    (= leaf_3_2 174)
    (= leaf_3_3 174)
    (= leaf_1_0 173)
    (= leaf_1_1 173)
    (= leaf_1_2 173)
    (= leaf_1_3 173)
    (= leaf_2_0 173)
    (= leaf_2_1 173)
    (= leaf_2_2 173)
    (= leaf_2_3 173)
    (= leaf_3_0 173)
    (= leaf_3_1 173)
    (= leaf_3_2 173)
    (= leaf_3_3 173)
    (= leaf_1_0 176)
    (= leaf_1_1 176)
    (= leaf_1_2 176)
    (= leaf_1_3 176)
    (= leaf_2_0 176)
    (= leaf_2_1 176)
    (= leaf_2_2 176)
    (= leaf_2_3 176)
    (= leaf_3_0 176)
    (= leaf_3_1 176)
    (= leaf_3_2 176)
    (= leaf_3_3 176)
    (= leaf_1_0 175)
    (= leaf_1_1 175)
    (= leaf_1_2 175)
    (= leaf_1_3 175)
    (= leaf_2_0 175)
    (= leaf_2_1 175)
    (= leaf_2_2 175)
    (= leaf_2_3 175)
    (= leaf_3_0 175)
    (= leaf_3_1 175)
    (= leaf_3_2 175)
    (= leaf_3_3 175)
    (= leaf_1_0 178)
    (= leaf_1_1 178)
    (= leaf_1_2 178)
    (= leaf_1_3 178)
    (= leaf_2_0 178)
    (= leaf_2_1 178)
    (= leaf_2_2 178)
    (= leaf_2_3 178)
    (= leaf_3_0 178)
    (= leaf_3_1 178)
    (= leaf_3_2 178)
    (= leaf_3_3 178)
    (= leaf_1_0 177)
    (= leaf_1_1 177)
    (= leaf_1_2 177)
    (= leaf_1_3 177)
    (= leaf_2_0 177)
    (= leaf_2_1 177)
    (= leaf_2_2 177)
    (= leaf_2_3 177)
    (= leaf_3_0 177)
    (= leaf_3_1 177)
    (= leaf_3_2 177)
    (= leaf_3_3 177)
    (= leaf_1_0 180)
    (= leaf_1_1 180)
    (= leaf_1_2 180)
    (= leaf_1_3 180)
    (= leaf_2_0 180)
    (= leaf_2_1 180)
    (= leaf_2_2 180)
    (= leaf_2_3 180)
    (= leaf_3_0 180)
    (= leaf_3_1 180)
    (= leaf_3_2 180)
    (= leaf_3_3 180)
    (= leaf_1_0 179)
    (= leaf_1_1 179)
    (= leaf_1_2 179)
    (= leaf_1_3 179)
    (= leaf_2_0 179)
    (= leaf_2_1 179)
    (= leaf_2_2 179)
    (= leaf_2_3 179)
    (= leaf_3_0 179)
    (= leaf_3_1 179)
    (= leaf_3_2 179)
    (= leaf_3_3 179)
    (= leaf_1_0 182)
    (= leaf_1_1 182)
    (= leaf_1_2 182)
    (= leaf_1_3 182)
    (= leaf_2_0 182)
    (= leaf_2_1 182)
    (= leaf_2_2 182)
    (= leaf_2_3 182)
    (= leaf_3_0 182)
    (= leaf_3_1 182)
    (= leaf_3_2 182)
    (= leaf_3_3 182)
    (= leaf_1_0 181)
    (= leaf_1_1 181)
    (= leaf_1_2 181)
    (= leaf_1_3 181)
    (= leaf_2_0 181)
    (= leaf_2_1 181)
    (= leaf_2_2 181)
    (= leaf_2_3 181)
    (= leaf_3_0 181)
    (= leaf_3_1 181)
    (= leaf_3_2 181)
    (= leaf_3_3 181)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000000 bv_1_2_a)
                    (distinct #b000000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b000000 bv_2_2_a)
                    (distinct #b000000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b000000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b000000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b000000 bv_3_2_a)
                    (distinct #b000000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b000000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b000000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_aircraft <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols("aid" = col_integer(),"aname" = col_character(),"crusingrange" = col_integer()))
df_aircraft <- copy_to(con, df_aircraft)
df_certified <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols("eid" = col_integer(),"aid" = col_integer()))
df_certified <- copy_to(con, df_certified)
df_employees <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols("eid" = col_integer(),"ename" = col_character(),"salary" = col_double()))
df_employees <- copy_to(con, df_employees)
expected_output <- read_csv("tests-examples/textbook/tables/31.out", col_types = cols("ename" = col_character()))

df148 <- inner_join(df_aircraft, df_certified, na_matches="never") %>% inner_join(df_employees, na_matches="never")
df149 <- df_aircraft %>% filter(str_detect(aname, 'Boeing') | crusingrange <= 3000)
df150 <- anti_join(df148, df149, by=c('aid','crusingrange'), na_matches="never")
out <- df150 %>% select(ename) %>% distinct() %>% arrange(ename)

Failed to generate SQL query
