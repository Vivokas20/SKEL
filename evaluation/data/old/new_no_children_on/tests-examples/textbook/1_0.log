[     5.779][MainProcess][INFO] Parsing specification...
[     5.787][MainProcess][INFO] File read
[     5.787][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     5.787][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     5.788][MainProcess][DEBUG] Reading input files...
[     5.806][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-1.txt: ['string', 'string']
[     5.812][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-2.txt: ['string', 'string']
[     5.819][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-3.txt: ['string', 'string']
[     5.826][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-4.txt: ['string', 'string', 'string']
[     5.831][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1.out: ['string']
[     5.832][MainProcess][INFO] Parsing sketch...
[     5.832][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join4'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     5.832][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     5.911][MainProcess][DEBUG] {'natural_join': 16, 'natural_join3': 64, 'natural_join4': 256, 'inner_join': 7536, 'anti_join': 352, 'left_join': 16, 'union': 16, 'intersect': 96, 'semi_join': 16, 'cross_join': 2080, 'filter': 48}
[     5.911][MainProcess][DEBUG] {'natural_join': 0.001524390243902439, 'natural_join3': 0.006097560975609756, 'natural_join4': 0.024390243902439025, 'inner_join': 0.7179878048780488, 'anti_join': 0.03353658536585366, 'left_join': 0.001524390243902439, 'union': 0.001524390243902439, 'intersect': 0.009146341463414634, 'semi_join': 0.001524390243902439, 'cross_join': 0.19817073170731708, 'filter': 0.004573170731707317}
[     5.911][MainProcess][DEBUG] {'natural_join': 0.0015243902439024393, 'natural_join3': 0.006097560975609757, 'natural_join4': 0.02439024390243903, 'inner_join': 0.7179878048780489, 'anti_join': 0.03353658536585367, 'left_join': 0.0015243902439024393, 'union': 0.0015243902439024393, 'intersect': 0.009146341463414635, 'semi_join': 0.0015243902439024393, 'cross_join': 0.1981707317073171, 'filter': 0.004573170731707318}
[     5.911][MainProcess][INFO] Building synthesizer...
[     5.913][MainProcess][DEBUG] [Line(T1, root=['natural_join4'], var=[3], children=[Child(['??'], type=Table, var=[653, 654, 655, 656]),Child(['??'], type=Table, var=[653, 654, 655, 656]),Child(['??'], type=Table, var=[653, 654, 655, 656]),Child(['??'], type=Table, var=[653, 654, 655, 656])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[653, 654, 655, 656]),Child(['??'], type=FilterCondition, var=[641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     6.067][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 98 constraints
[     6.075][MainProcess][DEBUG] Enumeration time: 0.16356492042541504
[     6.164][MainProcess][DEBUG] Synthesis time: 0.08867526054382324
[     6.164][MainProcess][INFO] Solution found: [natural_join4(input0, input1, input2, input3), filter(line0, "F_name == 'faculty1' & level == 'JR'")]
[     6.165][MainProcess][DEBUG] Solution found using process 0
[     6.165][MainProcess][INFO] Statistics:
[     6.165][MainProcess][INFO] 	Attempted programs: 2 (approx)
[     6.165][MainProcess][INFO] 		Rejected: 1 (approx)
[     6.165][MainProcess][INFO] 		Failed: 0 (approx)
[     6.165][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     6.165][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     6.166][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     6.166][MainProcess][INFO] 	Total time spent in enumerator init: 0.163565 (approx)
[     6.166][MainProcess][INFO] 	Total time spent in enumerator: 0.003984 (approx)
[     6.166][MainProcess][INFO] 		Enumerated 502.041295 programs/s avg. (just enumeration time)
[     6.166][MainProcess][INFO] 		Enumerated 0.441695 programs/s avg. (overall)
[     6.166][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.080464 (approx)
[     6.166][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.003340 (approx)
[     6.166][MainProcess][INFO] Solution found: [natural_join4(input0, input1, input2, input3), filter(line0, "F_name == 'faculty1' & level == 'JR'")]
[     6.166][MainProcess][INFO] Solution size: 2
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 6))
(declare-fun bv_1_0_a () (_ BitVec 6))
(declare-fun bv_1_1_b () (_ BitVec 6))
(declare-fun bv_1_1_a () (_ BitVec 6))
(declare-fun bv_1_2_b () (_ BitVec 6))
(declare-fun bv_1_2_a () (_ BitVec 6))
(declare-fun bv_1_3_b () (_ BitVec 6))
(declare-fun bv_1_3_a () (_ BitVec 6))
(declare-fun bv_2_0_b () (_ BitVec 6))
(declare-fun bv_1 () (_ BitVec 6))
(declare-fun bv_2_0_a () (_ BitVec 6))
(declare-fun bv_2_1_b () (_ BitVec 6))
(declare-fun bv_2_1_a () (_ BitVec 6))
(declare-fun bv_2_2_b () (_ BitVec 6))
(declare-fun bv_2_2_a () (_ BitVec 6))
(declare-fun bv_2_3_b () (_ BitVec 6))
(declare-fun bv_2_3_a () (_ BitVec 6))
(declare-fun bv_2 () (_ BitVec 6))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 3)))
(assert (or (= leaf_1_0 653) (= leaf_1_0 654) (= leaf_1_0 655) (= leaf_1_0 656)))
(assert (<= leaf_1_0 656))
(assert (>= leaf_1_0 653))
(assert (or (= leaf_1_1 653) (= leaf_1_1 654) (= leaf_1_1 655) (= leaf_1_1 656)))
(assert (<= leaf_1_1 656))
(assert (>= leaf_1_1 653))
(assert (or (= leaf_1_2 653) (= leaf_1_2 654) (= leaf_1_2 655) (= leaf_1_2 656)))
(assert (<= leaf_1_2 656))
(assert (>= leaf_1_2 653))
(assert (or (= leaf_1_3 653) (= leaf_1_3 654) (= leaf_1_3 655) (= leaf_1_3 656)))
(assert (<= leaf_1_3 656))
(assert (>= leaf_1_3 653))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 653)
    (= leaf_2_0 654)
    (= leaf_2_0 655)
    (= leaf_2_0 656)
    (= leaf_2_0 658)))
(assert (<= leaf_2_0 658))
(assert (>= leaf_2_0 653))
(assert (or (= leaf_2_1 641)
    (= leaf_2_1 642)
    (= leaf_2_1 643)
    (= leaf_2_1 644)
    (= leaf_2_1 645)
    (= leaf_2_1 646)
    (= leaf_2_1 647)
    (= leaf_2_1 648)
    (= leaf_2_1 649)
    (= leaf_2_1 650)
    (= leaf_2_1 651)
    (= leaf_2_1 652)))
(assert (<= leaf_2_1 652))
(assert (>= leaf_2_1 641))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 653)
    (= leaf_1_1 653)
    (= leaf_1_2 653)
    (= leaf_1_3 653)
    (= leaf_2_0 653)
    (= leaf_2_1 653)
    (= leaf_2_2 653)
    (= leaf_2_3 653)))
(assert (or (= leaf_1_0 654)
    (= leaf_1_1 654)
    (= leaf_1_2 654)
    (= leaf_1_3 654)
    (= leaf_2_0 654)
    (= leaf_2_1 654)
    (= leaf_2_2 654)
    (= leaf_2_3 654)))
(assert (or (= leaf_1_0 655)
    (= leaf_1_1 655)
    (= leaf_1_2 655)
    (= leaf_1_3 655)
    (= leaf_2_0 655)
    (= leaf_2_1 655)
    (= leaf_2_2 655)
    (= leaf_2_3 655)))
(assert (or (= leaf_1_0 656)
    (= leaf_1_1 656)
    (= leaf_1_2 656)
    (= leaf_1_3 656)
    (= leaf_2_0 656)
    (= leaf_2_1 656)
    (= leaf_2_2 656)
    (= leaf_2_3 656)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_0 653) (= #b000011 bv_1_0_a) (= #b000000 bv_1_0_b))
        (and (= leaf_1_0 654) (= #b001001 bv_1_0_a) (= #b000000 bv_1_0_b))
        (and (= leaf_1_0 655) (= #b000110 bv_1_0_a) (= #b000000 bv_1_0_b))
        (and (= leaf_1_0 656) (= #b111000 bv_1_0_a) (= #b000000 bv_1_0_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_1 653) (= #b000011 bv_1_1_a) (= #b000000 bv_1_1_b))
        (and (= leaf_1_1 654) (= #b001001 bv_1_1_a) (= #b000000 bv_1_1_b))
        (and (= leaf_1_1 655) (= #b000110 bv_1_1_a) (= #b000000 bv_1_1_b))
        (and (= leaf_1_1 656) (= #b111000 bv_1_1_a) (= #b000000 bv_1_1_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_2 653) (= #b000011 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 654) (= #b001001 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 655) (= #b000110 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 656) (= #b111000 bv_1_2_a) (= #b000000 bv_1_2_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_3 653) (= #b000011 bv_1_3_a) (= #b000000 bv_1_3_b))
        (and (= leaf_1_3 654) (= #b001001 bv_1_3_a) (= #b000000 bv_1_3_b))
        (and (= leaf_1_3 655) (= #b000110 bv_1_3_a) (= #b000000 bv_1_3_b))
        (and (= leaf_1_3 656) (= #b111000 bv_1_3_a) (= #b000000 bv_1_3_b)))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 658)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 653) (= #b000011 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 654) (= #b001001 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 655) (= #b000110 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 656) (= #b111000 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 658) (= bv_2_0_a bv_1) (= #b000000 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 641) (= #b000100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 642) (= #b000100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 643) (= #b100000 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 644) (= #b100000 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 645) (= #b100100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 646) (= #b100100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 647) (= #b100100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 648) (= #b100100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 649) (= #b100100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 650) (= #b100100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 651) (= #b100100 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 652) (= #b100100 bv_2_1_a) (= #b000000 bv_2_1_b)))))
(assert (=> (= root_2 11)
    (and (= leaf_2_2 0) (= #b000000 bv_2_2_a) (= #b000000 bv_2_2_b))))
(assert (=> (= root_2 11)
    (and (= leaf_2_3 0) (= #b000000 bv_2_3_a) (= #b000000 bv_2_3_b))))
(assert (or (= leaf_1_0 641)
    (= leaf_1_1 641)
    (= leaf_1_2 641)
    (= leaf_1_3 641)
    (= leaf_2_0 641)
    (= leaf_2_1 641)
    (= leaf_2_2 641)
    (= leaf_2_3 641)
    (= leaf_1_0 642)
    (= leaf_1_1 642)
    (= leaf_1_2 642)
    (= leaf_1_3 642)
    (= leaf_2_0 642)
    (= leaf_2_1 642)
    (= leaf_2_2 642)
    (= leaf_2_3 642)
    (= leaf_1_0 646)
    (= leaf_1_1 646)
    (= leaf_1_2 646)
    (= leaf_1_3 646)
    (= leaf_2_0 646)
    (= leaf_2_1 646)
    (= leaf_2_2 646)
    (= leaf_2_3 646)
    (= leaf_1_0 645)
    (= leaf_1_1 645)
    (= leaf_1_2 645)
    (= leaf_1_3 645)
    (= leaf_2_0 645)
    (= leaf_2_1 645)
    (= leaf_2_2 645)
    (= leaf_2_3 645)
    (= leaf_1_0 648)
    (= leaf_1_1 648)
    (= leaf_1_2 648)
    (= leaf_1_3 648)
    (= leaf_2_0 648)
    (= leaf_2_1 648)
    (= leaf_2_2 648)
    (= leaf_2_3 648)
    (= leaf_1_0 647)
    (= leaf_1_1 647)
    (= leaf_1_2 647)
    (= leaf_1_3 647)
    (= leaf_2_0 647)
    (= leaf_2_1 647)
    (= leaf_2_2 647)
    (= leaf_2_3 647)
    (= leaf_1_0 650)
    (= leaf_1_1 650)
    (= leaf_1_2 650)
    (= leaf_1_3 650)
    (= leaf_2_0 650)
    (= leaf_2_1 650)
    (= leaf_2_2 650)
    (= leaf_2_3 650)
    (= leaf_1_0 649)
    (= leaf_1_1 649)
    (= leaf_1_2 649)
    (= leaf_1_3 649)
    (= leaf_2_0 649)
    (= leaf_2_1 649)
    (= leaf_2_2 649)
    (= leaf_2_3 649)
    (= leaf_1_0 652)
    (= leaf_1_1 652)
    (= leaf_1_2 652)
    (= leaf_1_3 652)
    (= leaf_2_0 652)
    (= leaf_2_1 652)
    (= leaf_2_2 652)
    (= leaf_2_3 652)
    (= leaf_1_0 651)
    (= leaf_1_1 651)
    (= leaf_1_2 651)
    (= leaf_1_3 651)
    (= leaf_2_0 651)
    (= leaf_2_1 651)
    (= leaf_2_2 651)
    (= leaf_2_3 651)))
(assert (or (= leaf_1_0 643)
    (= leaf_1_1 643)
    (= leaf_1_2 643)
    (= leaf_1_3 643)
    (= leaf_2_0 643)
    (= leaf_2_1 643)
    (= leaf_2_2 643)
    (= leaf_2_3 643)
    (= leaf_1_0 644)
    (= leaf_1_1 644)
    (= leaf_1_2 644)
    (= leaf_1_3 644)
    (= leaf_2_0 644)
    (= leaf_2_1 644)
    (= leaf_2_2 644)
    (= leaf_2_3 644)
    (= leaf_1_0 646)
    (= leaf_1_1 646)
    (= leaf_1_2 646)
    (= leaf_1_3 646)
    (= leaf_2_0 646)
    (= leaf_2_1 646)
    (= leaf_2_2 646)
    (= leaf_2_3 646)
    (= leaf_1_0 645)
    (= leaf_1_1 645)
    (= leaf_1_2 645)
    (= leaf_1_3 645)
    (= leaf_2_0 645)
    (= leaf_2_1 645)
    (= leaf_2_2 645)
    (= leaf_2_3 645)
    (= leaf_1_0 648)
    (= leaf_1_1 648)
    (= leaf_1_2 648)
    (= leaf_1_3 648)
    (= leaf_2_0 648)
    (= leaf_2_1 648)
    (= leaf_2_2 648)
    (= leaf_2_3 648)
    (= leaf_1_0 647)
    (= leaf_1_1 647)
    (= leaf_1_2 647)
    (= leaf_1_3 647)
    (= leaf_2_0 647)
    (= leaf_2_1 647)
    (= leaf_2_2 647)
    (= leaf_2_3 647)
    (= leaf_1_0 650)
    (= leaf_1_1 650)
    (= leaf_1_2 650)
    (= leaf_1_3 650)
    (= leaf_2_0 650)
    (= leaf_2_1 650)
    (= leaf_2_2 650)
    (= leaf_2_3 650)
    (= leaf_1_0 649)
    (= leaf_1_1 649)
    (= leaf_1_2 649)
    (= leaf_1_3 649)
    (= leaf_2_0 649)
    (= leaf_2_1 649)
    (= leaf_2_2 649)
    (= leaf_2_3 649)
    (= leaf_1_0 652)
    (= leaf_1_1 652)
    (= leaf_1_2 652)
    (= leaf_1_3 652)
    (= leaf_2_0 652)
    (= leaf_2_1 652)
    (= leaf_2_2 652)
    (= leaf_2_3 652)
    (= leaf_1_0 651)
    (= leaf_1_1 651)
    (= leaf_1_2 651)
    (= leaf_1_3 651)
    (= leaf_2_0 651)
    (= leaf_2_1 651)
    (= leaf_2_2 651)
    (= leaf_2_3 651)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000000 bv_1_2_a)
                    (distinct #b000000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b000000 bv_2_2_a)
                    (distinct #b000000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b000000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b000000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_1_1 <- read_csv("tests-examples/textbook/tables/1-1.txt", col_types = cols("C_name" = col_character(),"F_key" = col_character()))
df_1_1 <- copy_to(con, df_1_1)
df_1_2 <- read_csv("tests-examples/textbook/tables/1-2.txt", col_types = cols("S_key" = col_character(),"C_name" = col_character()))
df_1_2 <- copy_to(con, df_1_2)
df_1_3 <- read_csv("tests-examples/textbook/tables/1-3.txt", col_types = cols("F_key" = col_character(),"F_name" = col_character()))
df_1_3 <- copy_to(con, df_1_3)
df_1_4 <- read_csv("tests-examples/textbook/tables/1-4.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character(),"level" = col_character()))
df_1_4 <- copy_to(con, df_1_4)
expected_output <- read_csv("tests-examples/textbook/tables/1.out", col_types = cols("S_name" = col_character()))

df4 <- inner_join(df_1_1, df_1_2, na_matches="never") %>% inner_join(df_1_3, na_matches="never") %>% inner_join(df_1_4, na_matches="never")
df5 <- df4 %>% filter(F_name == 'faculty1' & level == 'JR')
out <- df5 %>% select(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `C_name`,
          `F_key`,
          `LHS`.`S_key` AS `S_key`,
          `F_name`,
          `S_name`,
          `level`
   FROM
     (SELECT `C_name`,
             `LHS`.`F_key` AS `F_key`,
             `S_key`,
             `F_name`
      FROM
        (SELECT `LHS`.`C_name` AS `C_name`,
                `F_key`,
                `S_key`
         FROM `df_1_1` AS `LHS`
         INNER JOIN `df_1_2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
      INNER JOIN `df_1_3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
   INNER JOIN `df_1_4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`F_name` = 'faculty1'
       AND `level` = 'JR')
