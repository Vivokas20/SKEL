[     2.302][MainProcess][INFO] Parsing specification...
[     2.308][MainProcess][INFO] File read
[     2.310][MainProcess][DEBUG] Reading input files...
[     2.321][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-1.txt: ['string', 'string']
[     2.327][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-2.txt: ['string', 'string']
[     2.333][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20-3.txt: ['string', 'string']
[     2.339][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/20.out: ['string']
[     2.339][MainProcess][INFO] Parsing sketch...
[     2.339][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.339][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.339][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.340][MainProcess][DEBUG] Sketch creation: Line(T4, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.387][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 738, 'anti_join': 99, 'left_join': 9, 'union': 9, 'intersect': 36, 'semi_join': 9, 'cross_join': 18, 'filter': 36}
[     2.387][MainProcess][DEBUG] {'natural_join': 0.008403361344537815, 'natural_join3': 0.025210084033613446, 'natural_join4': 0.07563025210084033, 'inner_join': 0.6890756302521008, 'anti_join': 0.09243697478991597, 'left_join': 0.008403361344537815, 'union': 0.008403361344537815, 'intersect': 0.03361344537815126, 'semi_join': 0.008403361344537815, 'cross_join': 0.01680672268907563, 'filter': 0.03361344537815126}
[     2.387][MainProcess][DEBUG] {'natural_join': 0.008403361344537815, 'natural_join3': 0.025210084033613446, 'natural_join4': 0.07563025210084033, 'inner_join': 0.6890756302521008, 'anti_join': 0.09243697478991597, 'left_join': 0.008403361344537815, 'union': 0.008403361344537815, 'intersect': 0.03361344537815126, 'semi_join': 0.008403361344537815, 'cross_join': 0.01680672268907563, 'filter': 0.03361344537815126}
[     2.387][MainProcess][INFO] Building synthesizer...
[     2.389][MainProcess][DEBUG] [Line(T1, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=FilterCondition, var=[111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=FilterCondition, var=[111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=JoinCondition, var=[27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]),Child([None], type=None, var=[0])])]
[     3.359][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 221 constraints
[     3.374][MainProcess][DEBUG] Enumeration time: 0.9866039752960205
[     5.948][MainProcess][DEBUG] Synthesis time: 2.5744693279266357
[     5.949][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "color == 'red' & color != 'green'"), filter(line0, "color == 'green'"), inner_join(line2, line1, 'S_name')]
[     5.951][MainProcess][DEBUG] Solution found using process 0
[     5.952][MainProcess][INFO] Statistics:
[     5.952][MainProcess][INFO] 	Attempted programs: 190 (approx)
[     5.952][MainProcess][INFO] 		Rejected: 189 (approx)
[     5.952][MainProcess][INFO] 		Failed: 0 (approx)
[     5.952][MainProcess][INFO] 		Empty outputs: 134 (70.5%) (approx)
[     5.952][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     5.952][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     5.952][MainProcess][INFO] 	Total time spent in enumerator init: 0.986604 (approx)
[     5.952][MainProcess][INFO] 	Total time spent in enumerator: 0.511620 (approx)
[     5.953][MainProcess][INFO] 		Enumerated 371.369170 programs/s avg. (just enumeration time)
[     5.953][MainProcess][INFO] 		Enumerated 36.068685 programs/s avg. (overall)
[     5.953][MainProcess][INFO] 	Total time spent in evaluation & testing: 1.851061 (approx)
[     5.953][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.209524 (approx)
[     5.953][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "color == 'red' & color != 'green'"), filter(line0, "color == 'green'"), inner_join(line2, line1, 'S_name')]
[     5.953][MainProcess][INFO] Solution size: 4
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun type_4 () Int)
(declare-fun root_4 () Int)
(declare-fun leaf_4_0 () Int)
(declare-fun leaf_4_1 () Int)
(declare-fun leaf_4_2 () Int)
(declare-fun leaf_4_3 () Int)
(declare-fun leaf_4_3_is_line_1 () Bool)
(declare-fun leaf_4_2_is_line_1 () Bool)
(declare-fun leaf_4_1_is_line_1 () Bool)
(declare-fun leaf_4_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_4_3_is_line_2 () Bool)
(declare-fun leaf_4_2_is_line_2 () Bool)
(declare-fun leaf_4_1_is_line_2 () Bool)
(declare-fun leaf_4_0_is_line_2 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun leaf_4_3_is_line_3 () Bool)
(declare-fun leaf_4_2_is_line_3 () Bool)
(declare-fun leaf_4_1_is_line_3 () Bool)
(declare-fun leaf_4_0_is_line_3 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_2_0_b () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(declare-fun bv_2_0_a () (_ BitVec 4))
(declare-fun bv_2_1_b () (_ BitVec 4))
(declare-fun bv_2_1_a () (_ BitVec 4))
(declare-fun bv_2_2_b () (_ BitVec 4))
(declare-fun bv_2_2_a () (_ BitVec 4))
(declare-fun bv_2_3_b () (_ BitVec 4))
(declare-fun bv_2_3_a () (_ BitVec 4))
(declare-fun bv_3_0_b () (_ BitVec 4))
(declare-fun bv_2 () (_ BitVec 4))
(declare-fun bv_3_0_a () (_ BitVec 4))
(declare-fun bv_3_1_b () (_ BitVec 4))
(declare-fun bv_3_1_a () (_ BitVec 4))
(declare-fun bv_3_2_b () (_ BitVec 4))
(declare-fun bv_3_2_a () (_ BitVec 4))
(declare-fun bv_3_3_b () (_ BitVec 4))
(declare-fun bv_3_3_a () (_ BitVec 4))
(declare-fun bv_4_0_b () (_ BitVec 4))
(declare-fun bv_3 () (_ BitVec 4))
(declare-fun bv_4_0_a () (_ BitVec 4))
(declare-fun bv_4_1_b () (_ BitVec 4))
(declare-fun bv_4_1_a () (_ BitVec 4))
(declare-fun bv_4_2_b () (_ BitVec 4))
(declare-fun bv_4_2_a () (_ BitVec 4))
(declare-fun bv_4_3_b () (_ BitVec 4))
(declare-fun bv_4_3_a () (_ BitVec 4))
(declare-fun bv_4 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 2)))
(assert (or (= leaf_1_0 123) (= leaf_1_0 124) (= leaf_1_0 125)))
(assert (<= leaf_1_0 125))
(assert (>= leaf_1_0 123))
(assert (or (= leaf_1_1 123) (= leaf_1_1 124) (= leaf_1_1 125)))
(assert (<= leaf_1_1 125))
(assert (>= leaf_1_1 123))
(assert (or (= leaf_1_2 123) (= leaf_1_2 124) (= leaf_1_2 125)))
(assert (<= leaf_1_2 125))
(assert (>= leaf_1_2 123))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 123) (= leaf_2_0 124) (= leaf_2_0 125) (= leaf_2_0 127)))
(assert (<= leaf_2_0 127))
(assert (>= leaf_2_0 123))
(assert (or (= leaf_2_1 111)
    (= leaf_2_1 112)
    (= leaf_2_1 113)
    (= leaf_2_1 114)
    (= leaf_2_1 115)
    (= leaf_2_1 116)
    (= leaf_2_1 117)
    (= leaf_2_1 118)
    (= leaf_2_1 119)
    (= leaf_2_1 120)
    (= leaf_2_1 121)
    (= leaf_2_1 122)))
(assert (<= leaf_2_1 122))
(assert (>= leaf_2_1 111))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 11)))
(assert (or (= leaf_3_0 123)
    (= leaf_3_0 124)
    (= leaf_3_0 125)
    (= leaf_3_0 127)
    (= leaf_3_0 128)))
(assert (<= leaf_3_0 128))
(assert (>= leaf_3_0 123))
(assert (or (= leaf_3_1 111)
    (= leaf_3_1 112)
    (= leaf_3_1 113)
    (= leaf_3_1 114)
    (= leaf_3_1 115)
    (= leaf_3_1 116)
    (= leaf_3_1 117)
    (= leaf_3_1 118)
    (= leaf_3_1 119)
    (= leaf_3_1 120)
    (= leaf_3_1 121)
    (= leaf_3_1 122)))
(assert (<= leaf_3_1 122))
(assert (>= leaf_3_1 111))
(assert (or (= leaf_3_2 0)))
(assert (<= leaf_3_2 0))
(assert (>= leaf_3_2 0))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (< type_4 1))
(assert (>= type_4 0))
(assert (or (= root_4 4)))
(assert (or (= leaf_4_0 123)
    (= leaf_4_0 124)
    (= leaf_4_0 125)
    (= leaf_4_0 127)
    (= leaf_4_0 128)
    (= leaf_4_0 129)))
(assert (<= leaf_4_0 129))
(assert (>= leaf_4_0 123))
(assert (or (= leaf_4_1 123)
    (= leaf_4_1 124)
    (= leaf_4_1 125)
    (= leaf_4_1 127)
    (= leaf_4_1 128)
    (= leaf_4_1 129)))
(assert (<= leaf_4_1 129))
(assert (>= leaf_4_1 123))
(assert (or (= leaf_4_2 27)
    (= leaf_4_2 28)
    (= leaf_4_2 29)
    (= leaf_4_2 30)
    (= leaf_4_2 31)
    (= leaf_4_2 32)
    (= leaf_4_2 33)
    (= leaf_4_2 34)
    (= leaf_4_2 35)
    (= leaf_4_2 36)
    (= leaf_4_2 37)
    (= leaf_4_2 38)
    (= leaf_4_2 39)
    (= leaf_4_2 40)
    (= leaf_4_2 41)
    (= leaf_4_2 42)
    (= leaf_4_2 43)
    (= leaf_4_2 44)
    (= leaf_4_2 45)
    (= leaf_4_2 46)
    (= leaf_4_2 47)
    (= leaf_4_2 48)
    (= leaf_4_2 49)
    (= leaf_4_2 50)
    (= leaf_4_2 51)
    (= leaf_4_2 52)
    (= leaf_4_2 53)
    (= leaf_4_2 54)
    (= leaf_4_2 55)
    (= leaf_4_2 56)
    (= leaf_4_2 57)
    (= leaf_4_2 58)
    (= leaf_4_2 59)
    (= leaf_4_2 60)
    (= leaf_4_2 61)
    (= leaf_4_2 62)
    (= leaf_4_2 63)
    (= leaf_4_2 64)
    (= leaf_4_2 65)
    (= leaf_4_2 66)
    (= leaf_4_2 67)
    (= leaf_4_2 68)
    (= leaf_4_2 69)
    (= leaf_4_2 70)
    (= leaf_4_2 71)
    (= leaf_4_2 72)
    (= leaf_4_2 73)
    (= leaf_4_2 74)
    (= leaf_4_2 75)
    (= leaf_4_2 76)
    (= leaf_4_2 77)
    (= leaf_4_2 78)
    (= leaf_4_2 79)
    (= leaf_4_2 80)
    (= leaf_4_2 81)
    (= leaf_4_2 82)
    (= leaf_4_2 83)
    (= leaf_4_2 84)
    (= leaf_4_2 85)
    (= leaf_4_2 86)
    (= leaf_4_2 87)
    (= leaf_4_2 88)
    (= leaf_4_2 89)
    (= leaf_4_2 90)
    (= leaf_4_2 91)
    (= leaf_4_2 92)
    (= leaf_4_2 93)
    (= leaf_4_2 94)
    (= leaf_4_2 95)
    (= leaf_4_2 96)
    (= leaf_4_2 97)
    (= leaf_4_2 98)
    (= leaf_4_2 99)
    (= leaf_4_2 100)
    (= leaf_4_2 101)
    (= leaf_4_2 102)
    (= leaf_4_2 103)
    (= leaf_4_2 104)
    (= leaf_4_2 105)
    (= leaf_4_2 106)
    (= leaf_4_2 107)
    (= leaf_4_2 108)))
(assert (<= leaf_4_2 108))
(assert (>= leaf_4_2 27))
(assert (or (= leaf_4_3 0)))
(assert (<= leaf_4_3 0))
(assert (>= leaf_4_3 0))
(assert (or (= leaf_1_0 123)
    (= leaf_1_1 123)
    (= leaf_1_2 123)
    (= leaf_1_3 123)
    (= leaf_2_0 123)
    (= leaf_2_1 123)
    (= leaf_2_2 123)
    (= leaf_2_3 123)
    (= leaf_3_0 123)
    (= leaf_3_1 123)
    (= leaf_3_2 123)
    (= leaf_3_3 123)
    (= leaf_4_0 123)
    (= leaf_4_1 123)
    (= leaf_4_2 123)
    (= leaf_4_3 123)))
(assert (or (= leaf_1_0 124)
    (= leaf_1_1 124)
    (= leaf_1_2 124)
    (= leaf_1_3 124)
    (= leaf_2_0 124)
    (= leaf_2_1 124)
    (= leaf_2_2 124)
    (= leaf_2_3 124)
    (= leaf_3_0 124)
    (= leaf_3_1 124)
    (= leaf_3_2 124)
    (= leaf_3_3 124)
    (= leaf_4_0 124)
    (= leaf_4_1 124)
    (= leaf_4_2 124)
    (= leaf_4_3 124)))
(assert (or (= leaf_1_0 125)
    (= leaf_1_1 125)
    (= leaf_1_2 125)
    (= leaf_1_3 125)
    (= leaf_2_0 125)
    (= leaf_2_1 125)
    (= leaf_2_2 125)
    (= leaf_2_3 125)
    (= leaf_3_0 125)
    (= leaf_3_1 125)
    (= leaf_3_2 125)
    (= leaf_3_3 125)
    (= leaf_4_0 125)
    (= leaf_4_1 125)
    (= leaf_4_2 125)
    (= leaf_4_3 125)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1
    leaf_4_0_is_line_1
    leaf_4_1_is_line_1
    leaf_4_2_is_line_1
    leaf_4_3_is_line_1))
(assert (or leaf_3_0_is_line_2
    leaf_3_1_is_line_2
    leaf_3_2_is_line_2
    leaf_3_3_is_line_2
    leaf_4_0_is_line_2
    leaf_4_1_is_line_2
    leaf_4_2_is_line_2
    leaf_4_3_is_line_2))
(assert (or leaf_4_0_is_line_3 leaf_4_1_is_line_3 leaf_4_2_is_line_3 leaf_4_3_is_line_3))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_4 1) (= type_4 0)))
(assert (=> (= root_4 2) (= type_4 0)))
(assert (=> (= root_4 3) (= type_4 0)))
(assert (=> (= root_4 4) (= type_4 0)))
(assert (=> (= root_4 5) (= type_4 0)))
(assert (=> (= root_4 6) (= type_4 0)))
(assert (=> (= root_4 7) (= type_4 0)))
(assert (=> (= root_4 8) (= type_4 0)))
(assert (=> (= root_4 9) (= type_4 0)))
(assert (=> (= root_4 10) (= type_4 0)))
(assert (=> (= root_4 11) (= type_4 0)))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_0 123) (= #x3 bv_1_0_a) (= #x0 bv_1_0_b))
        (and (= leaf_1_0 124) (= #x9 bv_1_0_a) (= #x0 bv_1_0_b))
        (and (= leaf_1_0 125) (= #x6 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_1 123) (= #x3 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 124) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 125) (= #x6 bv_1_1_a) (= #x0 bv_1_1_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_2 123) (= #x3 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 124) (= #x9 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 125) (= #x6 bv_1_2_a) (= #x0 bv_1_2_b)))))
(assert (=> (= root_1 2) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 127)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 123) (= #x3 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 124) (= #x9 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 125) (= #x6 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 127) (= bv_2_0_a bv_1) (= #x0 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 111) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 112) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 113) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 114) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 115) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 116) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 117) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 118) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 119) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 120) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 121) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 122) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b)))))
(assert (=> (= root_2 11) (and (= leaf_2_2 0) (= #x0 bv_2_2_a) (= #x0 bv_2_2_b))))
(assert (=> (= root_2 11) (and (= leaf_2_3 0) (= #x0 bv_2_3_a) (= #x0 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 127)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 128)))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_0 123) (= #x3 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 124) (= #x9 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 125) (= #x6 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 127) (= bv_3_0_a bv_1) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 128) (= bv_3_0_a bv_2) (= #x0 bv_3_0_b)))))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_1 111) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 112) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 113) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 114) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 115) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 116) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 117) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 118) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 119) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 120) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 121) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 122) (= #x8 bv_3_1_a) (= #x0 bv_3_1_b)))))
(assert (=> (= root_3 11) (and (= leaf_3_2 0) (= #x0 bv_3_2_a) (= #x0 bv_3_2_b))))
(assert (=> (= root_3 11) (and (= leaf_3_3 0) (= #x0 bv_3_3_a) (= #x0 bv_3_3_b))))
(assert (= leaf_4_0_is_line_1 (= leaf_4_0 127)))
(assert (= leaf_4_0_is_line_2 (= leaf_4_0 128)))
(assert (= leaf_4_0_is_line_3 (= leaf_4_0 129)))
(assert (=> (= root_4 4)
    (or (and (= leaf_4_0 123) (= #x3 bv_4_0_a) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 124) (= #x9 bv_4_0_a) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 125) (= #x6 bv_4_0_a) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 127) (= bv_4_0_a bv_1) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 128) (= bv_4_0_a bv_2) (= #x0 bv_4_0_b))
        (and (= leaf_4_0 129) (= bv_4_0_a bv_3) (= #x0 bv_4_0_b)))))
(assert (= leaf_4_1_is_line_1 (= leaf_4_1 127)))
(assert (= leaf_4_1_is_line_2 (= leaf_4_1 128)))
(assert (= leaf_4_1_is_line_3 (= leaf_4_1 129)))
(assert (=> (= root_4 4)
    (or (and (= leaf_4_1 123) (= #x3 bv_4_1_a) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 124) (= #x9 bv_4_1_a) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 125) (= #x6 bv_4_1_a) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 127) (= bv_4_1_a bv_1) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 128) (= bv_4_1_a bv_2) (= #x0 bv_4_1_b))
        (and (= leaf_4_1 129) (= bv_4_1_a bv_3) (= #x0 bv_4_1_b)))))
(assert (=> (= root_4 4)
    (or (and (= leaf_4_2 27) (= #x3 bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 28) (= #x3 bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 29) (= #xa bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 30) (= #xa bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 31) (= #x6 bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 32) (= #x6 bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 33) (= #x3 bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 34) (= #x3 bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 35) (= #x3 bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 36) (= #xa bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 37) (= #xa bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 38) (= #xa bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 39) (= #x6 bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 40) (= #x6 bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 41) (= #x6 bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 42) (= #x3 bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 43) (= #x3 bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 44) (= #x3 bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 45) (= #xa bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 46) (= #xa bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 47) (= #xa bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 48) (= #x6 bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 49) (= #x6 bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 50) (= #x6 bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 51) (= #x3 bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 52) (= #x3 bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 53) (= #x3 bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 54) (= #xa bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 55) (= #xa bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 56) (= #xa bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 57) (= #x6 bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 58) (= #x6 bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 59) (= #x6 bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 60) (= #x9 bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 61) (= #x9 bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 62) (= #x9 bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 63) (= #x5 bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 64) (= #x5 bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 65) (= #x5 bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 66) (= #x9 bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 67) (= #x9 bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 68) (= #x5 bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 69) (= #x5 bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 70) (= #x9 bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 71) (= #x9 bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 72) (= #x9 bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 73) (= #x5 bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 74) (= #x5 bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 75) (= #x5 bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 76) (= #x9 bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 77) (= #x9 bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 78) (= #x9 bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 79) (= #x5 bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 80) (= #x5 bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 81) (= #x5 bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 82) (= #xc bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 83) (= #xc bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 84) (= #xc bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 85) (= #xc bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 86) (= #xc bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 87) (= #xc bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 88) (= #xc bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 89) (= #xc bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 90) (= #xc bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 91) (= #xc bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 92) (= #xc bv_4_2_a) (= #xc bv_4_2_b))
        (and (= leaf_4_2 93) (= #x2 bv_4_2_a) (= #x1 bv_4_2_b))
        (and (= leaf_4_2 94) (= #x2 bv_4_2_a) (= #x8 bv_4_2_b))
        (and (= leaf_4_2 95) (= #x2 bv_4_2_a) (= #x4 bv_4_2_b))
        (and (= leaf_4_2 96) (= #x1 bv_4_2_a) (= #x8 bv_4_2_b))
        (and (= leaf_4_2 97) (= #x1 bv_4_2_a) (= #x4 bv_4_2_b))
        (and (= leaf_4_2 98) (= #x8 bv_4_2_a) (= #x4 bv_4_2_b))
        (and (= leaf_4_2 99) (= #x1 bv_4_2_a) (= #x1 bv_4_2_b))
        (and (= leaf_4_2 100) (= #x2 bv_4_2_a) (= #x2 bv_4_2_b))
        (and (= leaf_4_2 101) (= #x4 bv_4_2_a) (= #x4 bv_4_2_b))
        (and (= leaf_4_2 102) (= #x8 bv_4_2_a) (= #x8 bv_4_2_b))
        (and (= leaf_4_2 103) (= #x3 bv_4_2_a) (= #x3 bv_4_2_b))
        (and (= leaf_4_2 104) (= #x5 bv_4_2_a) (= #x5 bv_4_2_b))
        (and (= leaf_4_2 105) (= #x9 bv_4_2_a) (= #x9 bv_4_2_b))
        (and (= leaf_4_2 106) (= #x6 bv_4_2_a) (= #x6 bv_4_2_b))
        (and (= leaf_4_2 107) (= #xa bv_4_2_a) (= #xa bv_4_2_b))
        (and (= leaf_4_2 108) (= #xc bv_4_2_a) (= #xc bv_4_2_b)))))
(assert (=> (= root_4 4) (and (= leaf_4_3 0) (= #x0 bv_4_3_a) (= #x0 bv_4_3_b))))
(assert (or (= leaf_1_0 111)
    (= leaf_1_1 111)
    (= leaf_1_2 111)
    (= leaf_1_3 111)
    (= leaf_2_0 111)
    (= leaf_2_1 111)
    (= leaf_2_2 111)
    (= leaf_2_3 111)
    (= leaf_3_0 111)
    (= leaf_3_1 111)
    (= leaf_3_2 111)
    (= leaf_3_3 111)
    (= leaf_4_0 111)
    (= leaf_4_1 111)
    (= leaf_4_2 111)
    (= leaf_4_3 111)
    (= leaf_1_0 112)
    (= leaf_1_1 112)
    (= leaf_1_2 112)
    (= leaf_1_3 112)
    (= leaf_2_0 112)
    (= leaf_2_1 112)
    (= leaf_2_2 112)
    (= leaf_2_3 112)
    (= leaf_3_0 112)
    (= leaf_3_1 112)
    (= leaf_3_2 112)
    (= leaf_3_3 112)
    (= leaf_4_0 112)
    (= leaf_4_1 112)
    (= leaf_4_2 112)
    (= leaf_4_3 112)
    (= leaf_1_0 116)
    (= leaf_1_1 116)
    (= leaf_1_2 116)
    (= leaf_1_3 116)
    (= leaf_2_0 116)
    (= leaf_2_1 116)
    (= leaf_2_2 116)
    (= leaf_2_3 116)
    (= leaf_3_0 116)
    (= leaf_3_1 116)
    (= leaf_3_2 116)
    (= leaf_3_3 116)
    (= leaf_4_0 116)
    (= leaf_4_1 116)
    (= leaf_4_2 116)
    (= leaf_4_3 116)
    (= leaf_1_0 115)
    (= leaf_1_1 115)
    (= leaf_1_2 115)
    (= leaf_1_3 115)
    (= leaf_2_0 115)
    (= leaf_2_1 115)
    (= leaf_2_2 115)
    (= leaf_2_3 115)
    (= leaf_3_0 115)
    (= leaf_3_1 115)
    (= leaf_3_2 115)
    (= leaf_3_3 115)
    (= leaf_4_0 115)
    (= leaf_4_1 115)
    (= leaf_4_2 115)
    (= leaf_4_3 115)
    (= leaf_1_0 118)
    (= leaf_1_1 118)
    (= leaf_1_2 118)
    (= leaf_1_3 118)
    (= leaf_2_0 118)
    (= leaf_2_1 118)
    (= leaf_2_2 118)
    (= leaf_2_3 118)
    (= leaf_3_0 118)
    (= leaf_3_1 118)
    (= leaf_3_2 118)
    (= leaf_3_3 118)
    (= leaf_4_0 118)
    (= leaf_4_1 118)
    (= leaf_4_2 118)
    (= leaf_4_3 118)
    (= leaf_1_0 117)
    (= leaf_1_1 117)
    (= leaf_1_2 117)
    (= leaf_1_3 117)
    (= leaf_2_0 117)
    (= leaf_2_1 117)
    (= leaf_2_2 117)
    (= leaf_2_3 117)
    (= leaf_3_0 117)
    (= leaf_3_1 117)
    (= leaf_3_2 117)
    (= leaf_3_3 117)
    (= leaf_4_0 117)
    (= leaf_4_1 117)
    (= leaf_4_2 117)
    (= leaf_4_3 117)
    (= leaf_1_0 120)
    (= leaf_1_1 120)
    (= leaf_1_2 120)
    (= leaf_1_3 120)
    (= leaf_2_0 120)
    (= leaf_2_1 120)
    (= leaf_2_2 120)
    (= leaf_2_3 120)
    (= leaf_3_0 120)
    (= leaf_3_1 120)
    (= leaf_3_2 120)
    (= leaf_3_3 120)
    (= leaf_4_0 120)
    (= leaf_4_1 120)
    (= leaf_4_2 120)
    (= leaf_4_3 120)
    (= leaf_1_0 119)
    (= leaf_1_1 119)
    (= leaf_1_2 119)
    (= leaf_1_3 119)
    (= leaf_2_0 119)
    (= leaf_2_1 119)
    (= leaf_2_2 119)
    (= leaf_2_3 119)
    (= leaf_3_0 119)
    (= leaf_3_1 119)
    (= leaf_3_2 119)
    (= leaf_3_3 119)
    (= leaf_4_0 119)
    (= leaf_4_1 119)
    (= leaf_4_2 119)
    (= leaf_4_3 119)
    (= leaf_1_0 122)
    (= leaf_1_1 122)
    (= leaf_1_2 122)
    (= leaf_1_3 122)
    (= leaf_2_0 122)
    (= leaf_2_1 122)
    (= leaf_2_2 122)
    (= leaf_2_3 122)
    (= leaf_3_0 122)
    (= leaf_3_1 122)
    (= leaf_3_2 122)
    (= leaf_3_3 122)
    (= leaf_4_0 122)
    (= leaf_4_1 122)
    (= leaf_4_2 122)
    (= leaf_4_3 122)
    (= leaf_1_0 121)
    (= leaf_1_1 121)
    (= leaf_1_2 121)
    (= leaf_1_3 121)
    (= leaf_2_0 121)
    (= leaf_2_1 121)
    (= leaf_2_2 121)
    (= leaf_2_3 121)
    (= leaf_3_0 121)
    (= leaf_3_1 121)
    (= leaf_3_2 121)
    (= leaf_3_3 121)
    (= leaf_4_0 121)
    (= leaf_4_1 121)
    (= leaf_4_2 121)
    (= leaf_4_3 121)))
(assert (or (= leaf_1_0 113)
    (= leaf_1_1 113)
    (= leaf_1_2 113)
    (= leaf_1_3 113)
    (= leaf_2_0 113)
    (= leaf_2_1 113)
    (= leaf_2_2 113)
    (= leaf_2_3 113)
    (= leaf_3_0 113)
    (= leaf_3_1 113)
    (= leaf_3_2 113)
    (= leaf_3_3 113)
    (= leaf_4_0 113)
    (= leaf_4_1 113)
    (= leaf_4_2 113)
    (= leaf_4_3 113)
    (= leaf_1_0 114)
    (= leaf_1_1 114)
    (= leaf_1_2 114)
    (= leaf_1_3 114)
    (= leaf_2_0 114)
    (= leaf_2_1 114)
    (= leaf_2_2 114)
    (= leaf_2_3 114)
    (= leaf_3_0 114)
    (= leaf_3_1 114)
    (= leaf_3_2 114)
    (= leaf_3_3 114)
    (= leaf_4_0 114)
    (= leaf_4_1 114)
    (= leaf_4_2 114)
    (= leaf_4_3 114)
    (= leaf_1_0 116)
    (= leaf_1_1 116)
    (= leaf_1_2 116)
    (= leaf_1_3 116)
    (= leaf_2_0 116)
    (= leaf_2_1 116)
    (= leaf_2_2 116)
    (= leaf_2_3 116)
    (= leaf_3_0 116)
    (= leaf_3_1 116)
    (= leaf_3_2 116)
    (= leaf_3_3 116)
    (= leaf_4_0 116)
    (= leaf_4_1 116)
    (= leaf_4_2 116)
    (= leaf_4_3 116)
    (= leaf_1_0 115)
    (= leaf_1_1 115)
    (= leaf_1_2 115)
    (= leaf_1_3 115)
    (= leaf_2_0 115)
    (= leaf_2_1 115)
    (= leaf_2_2 115)
    (= leaf_2_3 115)
    (= leaf_3_0 115)
    (= leaf_3_1 115)
    (= leaf_3_2 115)
    (= leaf_3_3 115)
    (= leaf_4_0 115)
    (= leaf_4_1 115)
    (= leaf_4_2 115)
    (= leaf_4_3 115)
    (= leaf_1_0 118)
    (= leaf_1_1 118)
    (= leaf_1_2 118)
    (= leaf_1_3 118)
    (= leaf_2_0 118)
    (= leaf_2_1 118)
    (= leaf_2_2 118)
    (= leaf_2_3 118)
    (= leaf_3_0 118)
    (= leaf_3_1 118)
    (= leaf_3_2 118)
    (= leaf_3_3 118)
    (= leaf_4_0 118)
    (= leaf_4_1 118)
    (= leaf_4_2 118)
    (= leaf_4_3 118)
    (= leaf_1_0 117)
    (= leaf_1_1 117)
    (= leaf_1_2 117)
    (= leaf_1_3 117)
    (= leaf_2_0 117)
    (= leaf_2_1 117)
    (= leaf_2_2 117)
    (= leaf_2_3 117)
    (= leaf_3_0 117)
    (= leaf_3_1 117)
    (= leaf_3_2 117)
    (= leaf_3_3 117)
    (= leaf_4_0 117)
    (= leaf_4_1 117)
    (= leaf_4_2 117)
    (= leaf_4_3 117)
    (= leaf_1_0 120)
    (= leaf_1_1 120)
    (= leaf_1_2 120)
    (= leaf_1_3 120)
    (= leaf_2_0 120)
    (= leaf_2_1 120)
    (= leaf_2_2 120)
    (= leaf_2_3 120)
    (= leaf_3_0 120)
    (= leaf_3_1 120)
    (= leaf_3_2 120)
    (= leaf_3_3 120)
    (= leaf_4_0 120)
    (= leaf_4_1 120)
    (= leaf_4_2 120)
    (= leaf_4_3 120)
    (= leaf_1_0 119)
    (= leaf_1_1 119)
    (= leaf_1_2 119)
    (= leaf_1_3 119)
    (= leaf_2_0 119)
    (= leaf_2_1 119)
    (= leaf_2_2 119)
    (= leaf_2_3 119)
    (= leaf_3_0 119)
    (= leaf_3_1 119)
    (= leaf_3_2 119)
    (= leaf_3_3 119)
    (= leaf_4_0 119)
    (= leaf_4_1 119)
    (= leaf_4_2 119)
    (= leaf_4_3 119)
    (= leaf_1_0 122)
    (= leaf_1_1 122)
    (= leaf_1_2 122)
    (= leaf_1_3 122)
    (= leaf_2_0 122)
    (= leaf_2_1 122)
    (= leaf_2_2 122)
    (= leaf_2_3 122)
    (= leaf_3_0 122)
    (= leaf_3_1 122)
    (= leaf_3_2 122)
    (= leaf_3_3 122)
    (= leaf_4_0 122)
    (= leaf_4_1 122)
    (= leaf_4_2 122)
    (= leaf_4_3 122)
    (= leaf_1_0 121)
    (= leaf_1_1 121)
    (= leaf_1_2 121)
    (= leaf_1_3 121)
    (= leaf_2_0 121)
    (= leaf_2_1 121)
    (= leaf_2_2 121)
    (= leaf_2_3 121)
    (= leaf_3_0 121)
    (= leaf_3_1 121)
    (= leaf_3_2 121)
    (= leaf_3_3 121)
    (= leaf_4_0 121)
    (= leaf_4_1 121)
    (= leaf_4_2 121)
    (= leaf_4_3 121)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 5))
    (distinct root_4 5)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 5))
    (distinct root_4 5)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 5))
    (distinct root_4 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #x0 bv_2_2_a) (distinct #x0 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #x0 bv_3_2_a) (distinct #x0 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #x0 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #x0 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_4 1) (and (< leaf_4_0 leaf_4_1) (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 2)
    (and (< leaf_4_0 leaf_4_1)
         (< leaf_4_1 leaf_4_2)
         (= (bvor bv_4_0_a bv_4_1_a bv_4_2_a) bv_4))))
(assert (=> (= root_4 3)
    (and (< leaf_4_0 leaf_4_1)
         (< leaf_4_1 leaf_4_2)
         (< leaf_4_2 leaf_4_3)
         (= (bvor bv_4_0_a bv_4_1_a bv_4_2_a bv_4_3_a) bv_4))))
(assert (=> (= root_4 4)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_1_a bv_4_2_b) bv_4_2_b)
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (let ((a!1 (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
                (= (bvand bv_4_1_a bv_4_2_a) bv_4_2_a)
                (=> (= #x0 bv_4_2_a) (distinct #x0 (bvand bv_4_0_a bv_4_1_a)))
                (= bv_4_0_a bv_4))))
  (=> (= root_4 5) a!1)))
(assert (=> (= root_4 6)
    (and (distinct #x0 (bvand bv_4_0_a bv_4_1_a))
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 7) (= (bvor bv_4_0_a bv_4_1_a) bv_4)))
(assert (=> (= root_4 8)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_1_a bv_4_2_a) bv_4_2_a)
         (= bv_4_2_a bv_4))))
(assert (=> (= root_4 9)
    (and (distinct #x0 (bvand bv_4_0_a bv_4_1_a)) (= bv_4_0_a bv_4))))
(assert (=> (= root_4 10)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_0_a bv_4_1_a bv_4_2_b) bv_4_2_b)
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 11)
    (and (= (bvand bv_4_0_a bv_4_1_a) bv_4_1_a) (= bv_4_0_a bv_4))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_20_1 <- read_csv("tests-examples/textbook/tables/20-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_20_1 <- copy_to(con, df_20_1)
df_20_2 <- read_csv("tests-examples/textbook/tables/20-2.txt", col_types = cols("P_id" = col_character(),"color" = col_character()))
df_20_2 <- copy_to(con, df_20_2)
df_20_3 <- read_csv("tests-examples/textbook/tables/20-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_20_3 <- copy_to(con, df_20_3)
expected_output <- read_csv("tests-examples/textbook/tables/20.out", col_types = cols("S_name" = col_character()))

df223 <- inner_join(df_20_1, df_20_2, na_matches="never") %>% inner_join(df_20_3, na_matches="never")
df224 <- df223 %>% filter(color == 'red' & color != 'green')
df225 <- df223 %>% filter(color == 'green')
df226 <- inner_join(df225, df224, by=c('S_name'), suffix = c('', '.other'), na_matches='never')
out <- df226 %>% select(S_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_name` AS `S_name`,
          `RHS`.`S_key` AS `S_key_other`,
          `RHS`.`P_id` AS `P_id_other`,
          `RHS`.`color` AS `color_other`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `P_id`,
                `color`,
                `S_name`
         FROM
           (SELECT `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `color`
            FROM `df_20_1` AS `LHS`
            INNER JOIN `df_20_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
         INNER JOIN `df_20_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`color` = 'green')) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `P_id`,
                `color`,
                `S_name`
         FROM
           (SELECT `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `color`
            FROM `df_20_1` AS `LHS`
            INNER JOIN `df_20_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
         INNER JOIN `df_20_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`color` = 'red'
             AND `color` != 'green')) AS RHS ON (LHS.S_name = RHS.S_name))
