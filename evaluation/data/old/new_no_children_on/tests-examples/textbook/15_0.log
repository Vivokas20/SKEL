[     2.339][MainProcess][INFO] Parsing specification...
[     2.345][MainProcess][INFO] File read
[     2.346][MainProcess][DEBUG] Reading input files...
[     2.356][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/15-1.txt: ['string', 'string']
[     2.362][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/15-2.txt: ['string', 'string']
[     2.368][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/15-3.txt: ['string', 'string']
[     2.373][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/15.out: ['string']
[     2.373][MainProcess][INFO] Parsing sketch...
[     2.373][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.373][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.373][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.423][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 846, 'anti_join': 99, 'left_join': 9, 'union': 9, 'intersect': 36, 'semi_join': 9, 'cross_join': 288, 'filter': 36, 'summarise': 33, 'mutate': 3}
[     2.423][MainProcess][DEBUG] {'natural_join': 0.006060606060606061, 'natural_join3': 0.01818181818181818, 'natural_join4': 0.05454545454545454, 'inner_join': 0.5696969696969697, 'anti_join': 0.06666666666666667, 'left_join': 0.006060606060606061, 'union': 0.006060606060606061, 'intersect': 0.024242424242424242, 'semi_join': 0.006060606060606061, 'cross_join': 0.19393939393939394, 'filter': 0.024242424242424242, 'summarise': 0.022222222222222223, 'mutate': 0.00202020202020202}
[     2.424][MainProcess][DEBUG] {'natural_join': 0.006060606060606059, 'natural_join3': 0.018181818181818177, 'natural_join4': 0.05454545454545453, 'inner_join': 0.5696969696969696, 'anti_join': 0.06666666666666665, 'left_join': 0.006060606060606059, 'union': 0.006060606060606059, 'intersect': 0.024242424242424235, 'semi_join': 0.006060606060606059, 'cross_join': 0.19393939393939388, 'filter': 0.024242424242424235, 'summarise': 0.02222222222222222, 'mutate': 0.0020202020202020198}
[     2.424][MainProcess][INFO] Building synthesizer...
[     2.425][MainProcess][DEBUG] [Line(T1, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[168, 169, 170]),Child(['??'], type=Table, var=[168, 169, 170]),Child(['??'], type=Table, var=[168, 169, 170]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[168, 169, 170]),Child(['??'], type=SummariseCondition, var=[167]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[168, 169, 170]),Child(['??'], type=FilterCondition, var=[155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.627][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 167 constraints
[     2.635][MainProcess][DEBUG] Enumeration time: 0.21094107627868652
[     2.755][MainProcess][DEBUG] Synthesis time: 0.12026834487915039
[     2.755][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), summarise(line0, 'n = n()', 'S_name,color'), filter(line1, "color == 'red' & n == max(n)")]
[     2.757][MainProcess][DEBUG] Solution found using process 0
[     2.757][MainProcess][INFO] Statistics:
[     2.757][MainProcess][INFO] 	Attempted programs: 4 (approx)
[     2.757][MainProcess][INFO] 		Rejected: 3 (approx)
[     2.757][MainProcess][INFO] 		Failed: 0 (approx)
[     2.757][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.757][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.757][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.757][MainProcess][INFO] 	Total time spent in enumerator init: 0.210941 (approx)
[     2.757][MainProcess][INFO] 	Total time spent in enumerator: 0.007980 (approx)
[     2.757][MainProcess][INFO] 		Enumerated 501.276286 programs/s avg. (just enumeration time)
[     2.758][MainProcess][INFO] 		Enumerated 1.921787 programs/s avg. (overall)
[     2.758][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.105861 (approx)
[     2.758][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.005187 (approx)
[     2.758][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), summarise(line0, 'n = n()', 'S_name,color'), filter(line1, "color == 'red' & n == max(n)")]
[     2.758][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 5))
(declare-fun bv_1_0_a () (_ BitVec 5))
(declare-fun bv_1_1_b () (_ BitVec 5))
(declare-fun bv_1_1_a () (_ BitVec 5))
(declare-fun bv_1_2_b () (_ BitVec 5))
(declare-fun bv_1_2_a () (_ BitVec 5))
(declare-fun bv_1_3_b () (_ BitVec 5))
(declare-fun bv_1_3_a () (_ BitVec 5))
(declare-fun bv_2_0_b () (_ BitVec 5))
(declare-fun bv_1 () (_ BitVec 5))
(declare-fun bv_2_0_a () (_ BitVec 5))
(declare-fun bv_2_1_b () (_ BitVec 5))
(declare-fun bv_2_1_a () (_ BitVec 5))
(declare-fun bv_2_2_b () (_ BitVec 5))
(declare-fun bv_2_2_a () (_ BitVec 5))
(declare-fun bv_2_3_b () (_ BitVec 5))
(declare-fun bv_2_3_a () (_ BitVec 5))
(declare-fun bv_3_0_b () (_ BitVec 5))
(declare-fun bv_2 () (_ BitVec 5))
(declare-fun bv_3_0_a () (_ BitVec 5))
(declare-fun bv_3_1_b () (_ BitVec 5))
(declare-fun bv_3_1_a () (_ BitVec 5))
(declare-fun bv_3_2_b () (_ BitVec 5))
(declare-fun bv_3_2_a () (_ BitVec 5))
(declare-fun bv_3_3_b () (_ BitVec 5))
(declare-fun bv_3_3_a () (_ BitVec 5))
(declare-fun bv_3 () (_ BitVec 5))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 2)))
(assert (or (= leaf_1_0 168) (= leaf_1_0 169) (= leaf_1_0 170)))
(assert (<= leaf_1_0 170))
(assert (>= leaf_1_0 168))
(assert (or (= leaf_1_1 168) (= leaf_1_1 169) (= leaf_1_1 170)))
(assert (<= leaf_1_1 170))
(assert (>= leaf_1_1 168))
(assert (or (= leaf_1_2 168) (= leaf_1_2 169) (= leaf_1_2 170)))
(assert (<= leaf_1_2 170))
(assert (>= leaf_1_2 168))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 12)))
(assert (or (= leaf_2_0 168) (= leaf_2_0 169) (= leaf_2_0 170) (= leaf_2_0 172)))
(assert (<= leaf_2_0 172))
(assert (>= leaf_2_0 168))
(assert (or (= leaf_2_1 167)))
(assert (<= leaf_2_1 167))
(assert (>= leaf_2_1 167))
(assert (or (= leaf_2_2 18)
    (= leaf_2_2 19)
    (= leaf_2_2 20)
    (= leaf_2_2 21)
    (= leaf_2_2 22)
    (= leaf_2_2 23)
    (= leaf_2_2 24)
    (= leaf_2_2 25)
    (= leaf_2_2 26)
    (= leaf_2_2 27)
    (= leaf_2_2 28)))
(assert (<= leaf_2_2 28))
(assert (>= leaf_2_2 18))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 11)))
(assert (or (= leaf_3_0 168)
    (= leaf_3_0 169)
    (= leaf_3_0 170)
    (= leaf_3_0 172)
    (= leaf_3_0 173)))
(assert (<= leaf_3_0 173))
(assert (>= leaf_3_0 168))
(assert (or (= leaf_3_1 155)
    (= leaf_3_1 156)
    (= leaf_3_1 157)
    (= leaf_3_1 158)
    (= leaf_3_1 159)
    (= leaf_3_1 160)
    (= leaf_3_1 161)
    (= leaf_3_1 162)
    (= leaf_3_1 163)
    (= leaf_3_1 164)
    (= leaf_3_1 165)
    (= leaf_3_1 166)))
(assert (<= leaf_3_1 166))
(assert (>= leaf_3_1 155))
(assert (or (= leaf_3_2 0)))
(assert (<= leaf_3_2 0))
(assert (>= leaf_3_2 0))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 168)
    (= leaf_1_1 168)
    (= leaf_1_2 168)
    (= leaf_1_3 168)
    (= leaf_2_0 168)
    (= leaf_2_1 168)
    (= leaf_2_2 168)
    (= leaf_2_3 168)
    (= leaf_3_0 168)
    (= leaf_3_1 168)
    (= leaf_3_2 168)
    (= leaf_3_3 168)))
(assert (or (= leaf_1_0 169)
    (= leaf_1_1 169)
    (= leaf_1_2 169)
    (= leaf_1_3 169)
    (= leaf_2_0 169)
    (= leaf_2_1 169)
    (= leaf_2_2 169)
    (= leaf_2_3 169)
    (= leaf_3_0 169)
    (= leaf_3_1 169)
    (= leaf_3_2 169)
    (= leaf_3_3 169)))
(assert (or (= leaf_1_0 170)
    (= leaf_1_1 170)
    (= leaf_1_2 170)
    (= leaf_1_3 170)
    (= leaf_2_0 170)
    (= leaf_2_1 170)
    (= leaf_2_2 170)
    (= leaf_2_3 170)
    (= leaf_3_0 170)
    (= leaf_3_1 170)
    (= leaf_3_2 170)
    (= leaf_3_3 170)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_0 168) (= #b00011 bv_1_0_a) (= #b00000 bv_1_0_b))
        (and (= leaf_1_0 169) (= #b01001 bv_1_0_a) (= #b00000 bv_1_0_b))
        (and (= leaf_1_0 170) (= #b00110 bv_1_0_a) (= #b00000 bv_1_0_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_1 168) (= #b00011 bv_1_1_a) (= #b00000 bv_1_1_b))
        (and (= leaf_1_1 169) (= #b01001 bv_1_1_a) (= #b00000 bv_1_1_b))
        (and (= leaf_1_1 170) (= #b00110 bv_1_1_a) (= #b00000 bv_1_1_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_2 168) (= #b00011 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 169) (= #b01001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 170) (= #b00110 bv_1_2_a) (= #b00000 bv_1_2_b)))))
(assert (=> (= root_1 2) (and (= leaf_1_3 0) (= #b00000 bv_1_3_a) (= #b00000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 172)))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_0 168) (= #b00011 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 169) (= #b01001 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 170) (= #b00110 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 172) (= bv_2_0_a bv_1) (= #b00000 bv_2_0_b)))))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_1 167) (= #b00000 bv_2_1_a) (= #b10000 bv_2_1_b)))))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_2 18) (= #b00000 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 19) (= #b00001 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 20) (= #b00010 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 21) (= #b00100 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 22) (= #b01000 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 23) (= #b00011 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 24) (= #b00101 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 25) (= #b01001 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 26) (= #b00110 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 27) (= #b01010 bv_2_2_a) (= #b00000 bv_2_2_b))
        (and (= leaf_2_2 28) (= #b01100 bv_2_2_a) (= #b00000 bv_2_2_b)))))
(assert (=> (= root_2 12)
    (and (= leaf_2_3 0) (= #b00000 bv_2_3_a) (= #b00000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 172)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 173)))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_0 168) (= #b00011 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 169) (= #b01001 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 170) (= #b00110 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 172) (= bv_3_0_a bv_1) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 173) (= bv_3_0_a bv_2) (= #b00000 bv_3_0_b)))))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_1 155) (= #b01000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 156) (= #b01000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 157) (= #b10000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 158) (= #b10000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 159) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 160) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 161) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 162) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 163) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 164) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 165) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 166) (= #b11000 bv_3_1_a) (= #b00000 bv_3_1_b)))))
(assert (=> (= root_3 11)
    (and (= leaf_3_2 0) (= #b00000 bv_3_2_a) (= #b00000 bv_3_2_b))))
(assert (=> (= root_3 11)
    (and (= leaf_3_3 0) (= #b00000 bv_3_3_a) (= #b00000 bv_3_3_b))))
(assert (or (= leaf_1_0 167)
    (= leaf_1_1 167)
    (= leaf_1_2 167)
    (= leaf_1_3 167)
    (= leaf_2_0 167)
    (= leaf_2_1 167)
    (= leaf_2_2 167)
    (= leaf_2_3 167)
    (= leaf_3_0 167)
    (= leaf_3_1 167)
    (= leaf_3_2 167)
    (= leaf_3_3 167)))
(assert (or (= leaf_1_0 155)
    (= leaf_1_1 155)
    (= leaf_1_2 155)
    (= leaf_1_3 155)
    (= leaf_2_0 155)
    (= leaf_2_1 155)
    (= leaf_2_2 155)
    (= leaf_2_3 155)
    (= leaf_3_0 155)
    (= leaf_3_1 155)
    (= leaf_3_2 155)
    (= leaf_3_3 155)
    (= leaf_1_0 156)
    (= leaf_1_1 156)
    (= leaf_1_2 156)
    (= leaf_1_3 156)
    (= leaf_2_0 156)
    (= leaf_2_1 156)
    (= leaf_2_2 156)
    (= leaf_2_3 156)
    (= leaf_3_0 156)
    (= leaf_3_1 156)
    (= leaf_3_2 156)
    (= leaf_3_3 156)
    (= leaf_1_0 160)
    (= leaf_1_1 160)
    (= leaf_1_2 160)
    (= leaf_1_3 160)
    (= leaf_2_0 160)
    (= leaf_2_1 160)
    (= leaf_2_2 160)
    (= leaf_2_3 160)
    (= leaf_3_0 160)
    (= leaf_3_1 160)
    (= leaf_3_2 160)
    (= leaf_3_3 160)
    (= leaf_1_0 159)
    (= leaf_1_1 159)
    (= leaf_1_2 159)
    (= leaf_1_3 159)
    (= leaf_2_0 159)
    (= leaf_2_1 159)
    (= leaf_2_2 159)
    (= leaf_2_3 159)
    (= leaf_3_0 159)
    (= leaf_3_1 159)
    (= leaf_3_2 159)
    (= leaf_3_3 159)
    (= leaf_1_0 162)
    (= leaf_1_1 162)
    (= leaf_1_2 162)
    (= leaf_1_3 162)
    (= leaf_2_0 162)
    (= leaf_2_1 162)
    (= leaf_2_2 162)
    (= leaf_2_3 162)
    (= leaf_3_0 162)
    (= leaf_3_1 162)
    (= leaf_3_2 162)
    (= leaf_3_3 162)
    (= leaf_1_0 161)
    (= leaf_1_1 161)
    (= leaf_1_2 161)
    (= leaf_1_3 161)
    (= leaf_2_0 161)
    (= leaf_2_1 161)
    (= leaf_2_2 161)
    (= leaf_2_3 161)
    (= leaf_3_0 161)
    (= leaf_3_1 161)
    (= leaf_3_2 161)
    (= leaf_3_3 161)
    (= leaf_1_0 164)
    (= leaf_1_1 164)
    (= leaf_1_2 164)
    (= leaf_1_3 164)
    (= leaf_2_0 164)
    (= leaf_2_1 164)
    (= leaf_2_2 164)
    (= leaf_2_3 164)
    (= leaf_3_0 164)
    (= leaf_3_1 164)
    (= leaf_3_2 164)
    (= leaf_3_3 164)
    (= leaf_1_0 163)
    (= leaf_1_1 163)
    (= leaf_1_2 163)
    (= leaf_1_3 163)
    (= leaf_2_0 163)
    (= leaf_2_1 163)
    (= leaf_2_2 163)
    (= leaf_2_3 163)
    (= leaf_3_0 163)
    (= leaf_3_1 163)
    (= leaf_3_2 163)
    (= leaf_3_3 163)
    (= leaf_1_0 166)
    (= leaf_1_1 166)
    (= leaf_1_2 166)
    (= leaf_1_3 166)
    (= leaf_2_0 166)
    (= leaf_2_1 166)
    (= leaf_2_2 166)
    (= leaf_2_3 166)
    (= leaf_3_0 166)
    (= leaf_3_1 166)
    (= leaf_3_2 166)
    (= leaf_3_3 166)
    (= leaf_1_0 165)
    (= leaf_1_1 165)
    (= leaf_1_2 165)
    (= leaf_1_3 165)
    (= leaf_2_0 165)
    (= leaf_2_1 165)
    (= leaf_2_2 165)
    (= leaf_2_3 165)
    (= leaf_3_0 165)
    (= leaf_3_1 165)
    (= leaf_3_2 165)
    (= leaf_3_3 165)))
(assert (or (= leaf_1_0 157)
    (= leaf_1_1 157)
    (= leaf_1_2 157)
    (= leaf_1_3 157)
    (= leaf_2_0 157)
    (= leaf_2_1 157)
    (= leaf_2_2 157)
    (= leaf_2_3 157)
    (= leaf_3_0 157)
    (= leaf_3_1 157)
    (= leaf_3_2 157)
    (= leaf_3_3 157)
    (= leaf_1_0 158)
    (= leaf_1_1 158)
    (= leaf_1_2 158)
    (= leaf_1_3 158)
    (= leaf_2_0 158)
    (= leaf_2_1 158)
    (= leaf_2_2 158)
    (= leaf_2_3 158)
    (= leaf_3_0 158)
    (= leaf_3_1 158)
    (= leaf_3_2 158)
    (= leaf_3_3 158)
    (= leaf_1_0 160)
    (= leaf_1_1 160)
    (= leaf_1_2 160)
    (= leaf_1_3 160)
    (= leaf_2_0 160)
    (= leaf_2_1 160)
    (= leaf_2_2 160)
    (= leaf_2_3 160)
    (= leaf_3_0 160)
    (= leaf_3_1 160)
    (= leaf_3_2 160)
    (= leaf_3_3 160)
    (= leaf_1_0 159)
    (= leaf_1_1 159)
    (= leaf_1_2 159)
    (= leaf_1_3 159)
    (= leaf_2_0 159)
    (= leaf_2_1 159)
    (= leaf_2_2 159)
    (= leaf_2_3 159)
    (= leaf_3_0 159)
    (= leaf_3_1 159)
    (= leaf_3_2 159)
    (= leaf_3_3 159)
    (= leaf_1_0 162)
    (= leaf_1_1 162)
    (= leaf_1_2 162)
    (= leaf_1_3 162)
    (= leaf_2_0 162)
    (= leaf_2_1 162)
    (= leaf_2_2 162)
    (= leaf_2_3 162)
    (= leaf_3_0 162)
    (= leaf_3_1 162)
    (= leaf_3_2 162)
    (= leaf_3_3 162)
    (= leaf_1_0 161)
    (= leaf_1_1 161)
    (= leaf_1_2 161)
    (= leaf_1_3 161)
    (= leaf_2_0 161)
    (= leaf_2_1 161)
    (= leaf_2_2 161)
    (= leaf_2_3 161)
    (= leaf_3_0 161)
    (= leaf_3_1 161)
    (= leaf_3_2 161)
    (= leaf_3_3 161)
    (= leaf_1_0 164)
    (= leaf_1_1 164)
    (= leaf_1_2 164)
    (= leaf_1_3 164)
    (= leaf_2_0 164)
    (= leaf_2_1 164)
    (= leaf_2_2 164)
    (= leaf_2_3 164)
    (= leaf_3_0 164)
    (= leaf_3_1 164)
    (= leaf_3_2 164)
    (= leaf_3_3 164)
    (= leaf_1_0 163)
    (= leaf_1_1 163)
    (= leaf_1_2 163)
    (= leaf_1_3 163)
    (= leaf_2_0 163)
    (= leaf_2_1 163)
    (= leaf_2_2 163)
    (= leaf_2_3 163)
    (= leaf_3_0 163)
    (= leaf_3_1 163)
    (= leaf_3_2 163)
    (= leaf_3_3 163)
    (= leaf_1_0 166)
    (= leaf_1_1 166)
    (= leaf_1_2 166)
    (= leaf_1_3 166)
    (= leaf_2_0 166)
    (= leaf_2_1 166)
    (= leaf_2_2 166)
    (= leaf_2_3 166)
    (= leaf_3_0 166)
    (= leaf_3_1 166)
    (= leaf_3_2 166)
    (= leaf_3_3 166)
    (= leaf_1_0 165)
    (= leaf_1_1 165)
    (= leaf_1_2 165)
    (= leaf_1_3 165)
    (= leaf_2_0 165)
    (= leaf_2_1 165)
    (= leaf_2_2 165)
    (= leaf_2_3 165)
    (= leaf_3_0 165)
    (= leaf_3_1 165)
    (= leaf_3_2 165)
    (= leaf_3_3 165)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00000 bv_1_2_a)
                    (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b00000 bv_2_2_a)
                    (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b00000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b00000 bv_3_2_a)
                    (distinct #b00000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b00000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b00000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #b00000 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_15_1 <- read_csv("tests-examples/textbook/tables/15-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_15_1 <- copy_to(con, df_15_1)
df_15_2 <- read_csv("tests-examples/textbook/tables/15-2.txt", col_types = cols("P_id" = col_character(),"color" = col_character()))
df_15_2 <- copy_to(con, df_15_2)
df_15_3 <- read_csv("tests-examples/textbook/tables/15-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_15_3 <- copy_to(con, df_15_3)
expected_output <- read_csv("tests-examples/textbook/tables/15.out", col_types = cols("S_name" = col_character()))

df8 <- inner_join(df_15_1, df_15_2, na_matches="never") %>% inner_join(df_15_3, na_matches="never")
df9 <- df8 %>% group_by(S_name,color) %>% summarise(n = n()) %>% ungroup()
df10 <- df9 %>% filter(color == 'red' & n == max(n))
out <- df10 %>% select(S_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `S_name`,
          `color`,
          `n`
   FROM
     (SELECT `S_name`,
             `color`,
             `n`,
             MAX(`n`) OVER () AS `q01`
      FROM
        (SELECT `S_name`,
                `color`,
                COUNT(*) AS `n`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `P_id`,
                   `color`,
                   `S_name`
            FROM
              (SELECT `S_key`,
                      `LHS`.`P_id` AS `P_id`,
                      `color`
               FROM `df_15_1` AS `LHS`
               INNER JOIN `df_15_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
            INNER JOIN `df_15_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
         GROUP BY `S_name`,
                  `color`))
   WHERE (`color` = 'red'
          AND n = q01))
