[     2.496][MainProcess][INFO] Parsing specification...
[     2.502][MainProcess][INFO] File read
[     2.503][MainProcess][DEBUG] Reading input files...
[     2.513][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-1.txt: ['string', 'string']
[     2.520][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-2.txt: ['string', 'string']
[     2.526][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-3.txt: ['string', 'string']
[     2.531][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21.out: ['string']
[     2.531][MainProcess][INFO] Parsing sketch...
[     2.532][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.532][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.581][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 738, 'anti_join': 99, 'left_join': 9, 'union': 9, 'intersect': 36, 'semi_join': 9, 'cross_join': 18, 'filter': 36}
[     2.581][MainProcess][DEBUG] {'natural_join': 0.008403361344537815, 'natural_join3': 0.025210084033613446, 'natural_join4': 0.07563025210084033, 'inner_join': 0.6890756302521008, 'anti_join': 0.09243697478991597, 'left_join': 0.008403361344537815, 'union': 0.008403361344537815, 'intersect': 0.03361344537815126, 'semi_join': 0.008403361344537815, 'cross_join': 0.01680672268907563, 'filter': 0.03361344537815126}
[     2.581][MainProcess][DEBUG] {'natural_join': 0.008403361344537815, 'natural_join3': 0.025210084033613446, 'natural_join4': 0.07563025210084033, 'inner_join': 0.6890756302521008, 'anti_join': 0.09243697478991597, 'left_join': 0.008403361344537815, 'union': 0.008403361344537815, 'intersect': 0.03361344537815126, 'semi_join': 0.008403361344537815, 'cross_join': 0.01680672268907563, 'filter': 0.03361344537815126}
[     2.581][MainProcess][INFO] Building synthesizer...
[     2.583][MainProcess][DEBUG] [Line(T1, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=Table, var=[123, 124, 125]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[123, 124, 125]),Child(['??'], type=FilterCondition, var=[111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.709][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 97 constraints
[     2.714][MainProcess][DEBUG] Enumeration time: 0.13296031951904297
[     2.867][MainProcess][DEBUG] Synthesis time: 0.15245437622070312
[     2.867][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "color == 'red' | color == 'green'")]
[     2.868][MainProcess][DEBUG] Solution found using process 0
[     2.868][MainProcess][INFO] Statistics:
[     2.868][MainProcess][INFO] 	Attempted programs: 12 (approx)
[     2.868][MainProcess][INFO] 		Rejected: 11 (approx)
[     2.868][MainProcess][INFO] 		Failed: 0 (approx)
[     2.869][MainProcess][INFO] 		Empty outputs: 1 (8.3%) (approx)
[     2.869][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.869][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.869][MainProcess][INFO] 	Total time spent in enumerator init: 0.132960 (approx)
[     2.869][MainProcess][INFO] 	Total time spent in enumerator: 0.017996 (approx)
[     2.869][MainProcess][INFO] 		Enumerated 666.820986 programs/s avg. (just enumeration time)
[     2.869][MainProcess][INFO] 		Enumerated 5.874274 programs/s avg. (overall)
[     2.869][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.125041 (approx)
[     2.869][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.008661 (approx)
[     2.869][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, "color == 'red' | color == 'green'")]
[     2.869][MainProcess][INFO] Solution size: 2
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_2_0_b () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(declare-fun bv_2_0_a () (_ BitVec 4))
(declare-fun bv_2_1_b () (_ BitVec 4))
(declare-fun bv_2_1_a () (_ BitVec 4))
(declare-fun bv_2_2_b () (_ BitVec 4))
(declare-fun bv_2_2_a () (_ BitVec 4))
(declare-fun bv_2_3_b () (_ BitVec 4))
(declare-fun bv_2_3_a () (_ BitVec 4))
(declare-fun bv_2 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 2)))
(assert (or (= leaf_1_0 123) (= leaf_1_0 124) (= leaf_1_0 125)))
(assert (<= leaf_1_0 125))
(assert (>= leaf_1_0 123))
(assert (or (= leaf_1_1 123) (= leaf_1_1 124) (= leaf_1_1 125)))
(assert (<= leaf_1_1 125))
(assert (>= leaf_1_1 123))
(assert (or (= leaf_1_2 123) (= leaf_1_2 124) (= leaf_1_2 125)))
(assert (<= leaf_1_2 125))
(assert (>= leaf_1_2 123))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 123) (= leaf_2_0 124) (= leaf_2_0 125) (= leaf_2_0 127)))
(assert (<= leaf_2_0 127))
(assert (>= leaf_2_0 123))
(assert (or (= leaf_2_1 111)
    (= leaf_2_1 112)
    (= leaf_2_1 113)
    (= leaf_2_1 114)
    (= leaf_2_1 115)
    (= leaf_2_1 116)
    (= leaf_2_1 117)
    (= leaf_2_1 118)
    (= leaf_2_1 119)
    (= leaf_2_1 120)
    (= leaf_2_1 121)
    (= leaf_2_1 122)))
(assert (<= leaf_2_1 122))
(assert (>= leaf_2_1 111))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 123)
    (= leaf_1_1 123)
    (= leaf_1_2 123)
    (= leaf_1_3 123)
    (= leaf_2_0 123)
    (= leaf_2_1 123)
    (= leaf_2_2 123)
    (= leaf_2_3 123)))
(assert (or (= leaf_1_0 124)
    (= leaf_1_1 124)
    (= leaf_1_2 124)
    (= leaf_1_3 124)
    (= leaf_2_0 124)
    (= leaf_2_1 124)
    (= leaf_2_2 124)
    (= leaf_2_3 124)))
(assert (or (= leaf_1_0 125)
    (= leaf_1_1 125)
    (= leaf_1_2 125)
    (= leaf_1_3 125)
    (= leaf_2_0 125)
    (= leaf_2_1 125)
    (= leaf_2_2 125)
    (= leaf_2_3 125)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_0 123) (= #x3 bv_1_0_a) (= #x0 bv_1_0_b))
        (and (= leaf_1_0 124) (= #x9 bv_1_0_a) (= #x0 bv_1_0_b))
        (and (= leaf_1_0 125) (= #x6 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_1 123) (= #x3 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 124) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 125) (= #x6 bv_1_1_a) (= #x0 bv_1_1_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_2 123) (= #x3 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 124) (= #x9 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 125) (= #x6 bv_1_2_a) (= #x0 bv_1_2_b)))))
(assert (=> (= root_1 2) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 127)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 123) (= #x3 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 124) (= #x9 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 125) (= #x6 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 127) (= bv_2_0_a bv_1) (= #x0 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 111) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 112) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 113) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 114) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 115) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 116) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 117) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 118) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 119) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 120) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 121) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 122) (= #x8 bv_2_1_a) (= #x0 bv_2_1_b)))))
(assert (=> (= root_2 11) (and (= leaf_2_2 0) (= #x0 bv_2_2_a) (= #x0 bv_2_2_b))))
(assert (=> (= root_2 11) (and (= leaf_2_3 0) (= #x0 bv_2_3_a) (= #x0 bv_2_3_b))))
(assert (or (= leaf_1_0 111)
    (= leaf_1_1 111)
    (= leaf_1_2 111)
    (= leaf_1_3 111)
    (= leaf_2_0 111)
    (= leaf_2_1 111)
    (= leaf_2_2 111)
    (= leaf_2_3 111)
    (= leaf_1_0 112)
    (= leaf_1_1 112)
    (= leaf_1_2 112)
    (= leaf_1_3 112)
    (= leaf_2_0 112)
    (= leaf_2_1 112)
    (= leaf_2_2 112)
    (= leaf_2_3 112)
    (= leaf_1_0 116)
    (= leaf_1_1 116)
    (= leaf_1_2 116)
    (= leaf_1_3 116)
    (= leaf_2_0 116)
    (= leaf_2_1 116)
    (= leaf_2_2 116)
    (= leaf_2_3 116)
    (= leaf_1_0 115)
    (= leaf_1_1 115)
    (= leaf_1_2 115)
    (= leaf_1_3 115)
    (= leaf_2_0 115)
    (= leaf_2_1 115)
    (= leaf_2_2 115)
    (= leaf_2_3 115)
    (= leaf_1_0 118)
    (= leaf_1_1 118)
    (= leaf_1_2 118)
    (= leaf_1_3 118)
    (= leaf_2_0 118)
    (= leaf_2_1 118)
    (= leaf_2_2 118)
    (= leaf_2_3 118)
    (= leaf_1_0 117)
    (= leaf_1_1 117)
    (= leaf_1_2 117)
    (= leaf_1_3 117)
    (= leaf_2_0 117)
    (= leaf_2_1 117)
    (= leaf_2_2 117)
    (= leaf_2_3 117)
    (= leaf_1_0 120)
    (= leaf_1_1 120)
    (= leaf_1_2 120)
    (= leaf_1_3 120)
    (= leaf_2_0 120)
    (= leaf_2_1 120)
    (= leaf_2_2 120)
    (= leaf_2_3 120)
    (= leaf_1_0 119)
    (= leaf_1_1 119)
    (= leaf_1_2 119)
    (= leaf_1_3 119)
    (= leaf_2_0 119)
    (= leaf_2_1 119)
    (= leaf_2_2 119)
    (= leaf_2_3 119)
    (= leaf_1_0 122)
    (= leaf_1_1 122)
    (= leaf_1_2 122)
    (= leaf_1_3 122)
    (= leaf_2_0 122)
    (= leaf_2_1 122)
    (= leaf_2_2 122)
    (= leaf_2_3 122)
    (= leaf_1_0 121)
    (= leaf_1_1 121)
    (= leaf_1_2 121)
    (= leaf_1_3 121)
    (= leaf_2_0 121)
    (= leaf_2_1 121)
    (= leaf_2_2 121)
    (= leaf_2_3 121)))
(assert (or (= leaf_1_0 113)
    (= leaf_1_1 113)
    (= leaf_1_2 113)
    (= leaf_1_3 113)
    (= leaf_2_0 113)
    (= leaf_2_1 113)
    (= leaf_2_2 113)
    (= leaf_2_3 113)
    (= leaf_1_0 114)
    (= leaf_1_1 114)
    (= leaf_1_2 114)
    (= leaf_1_3 114)
    (= leaf_2_0 114)
    (= leaf_2_1 114)
    (= leaf_2_2 114)
    (= leaf_2_3 114)
    (= leaf_1_0 116)
    (= leaf_1_1 116)
    (= leaf_1_2 116)
    (= leaf_1_3 116)
    (= leaf_2_0 116)
    (= leaf_2_1 116)
    (= leaf_2_2 116)
    (= leaf_2_3 116)
    (= leaf_1_0 115)
    (= leaf_1_1 115)
    (= leaf_1_2 115)
    (= leaf_1_3 115)
    (= leaf_2_0 115)
    (= leaf_2_1 115)
    (= leaf_2_2 115)
    (= leaf_2_3 115)
    (= leaf_1_0 118)
    (= leaf_1_1 118)
    (= leaf_1_2 118)
    (= leaf_1_3 118)
    (= leaf_2_0 118)
    (= leaf_2_1 118)
    (= leaf_2_2 118)
    (= leaf_2_3 118)
    (= leaf_1_0 117)
    (= leaf_1_1 117)
    (= leaf_1_2 117)
    (= leaf_1_3 117)
    (= leaf_2_0 117)
    (= leaf_2_1 117)
    (= leaf_2_2 117)
    (= leaf_2_3 117)
    (= leaf_1_0 120)
    (= leaf_1_1 120)
    (= leaf_1_2 120)
    (= leaf_1_3 120)
    (= leaf_2_0 120)
    (= leaf_2_1 120)
    (= leaf_2_2 120)
    (= leaf_2_3 120)
    (= leaf_1_0 119)
    (= leaf_1_1 119)
    (= leaf_1_2 119)
    (= leaf_1_3 119)
    (= leaf_2_0 119)
    (= leaf_2_1 119)
    (= leaf_2_2 119)
    (= leaf_2_3 119)
    (= leaf_1_0 122)
    (= leaf_1_1 122)
    (= leaf_1_2 122)
    (= leaf_1_3 122)
    (= leaf_2_0 122)
    (= leaf_2_1 122)
    (= leaf_2_2 122)
    (= leaf_2_3 122)
    (= leaf_1_0 121)
    (= leaf_1_1 121)
    (= leaf_1_2 121)
    (= leaf_1_3 121)
    (= leaf_2_0 121)
    (= leaf_2_1 121)
    (= leaf_2_2 121)
    (= leaf_2_3 121)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #x0 bv_2_2_a) (distinct #x0 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_21_1 <- read_csv("tests-examples/textbook/tables/21-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_21_1 <- copy_to(con, df_21_1)
df_21_2 <- read_csv("tests-examples/textbook/tables/21-2.txt", col_types = cols("P_id" = col_character(),"color" = col_character()))
df_21_2 <- copy_to(con, df_21_2)
df_21_3 <- read_csv("tests-examples/textbook/tables/21-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_21_3 <- copy_to(con, df_21_3)
expected_output <- read_csv("tests-examples/textbook/tables/21.out", col_types = cols("S_name" = col_character()))

df14 <- inner_join(df_21_1, df_21_2, na_matches="never") %>% inner_join(df_21_3, na_matches="never")
df15 <- df14 %>% filter(color == 'red' | color == 'green')
out <- df15 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `P_id`,
          `color`,
          `S_name`
   FROM
     (SELECT `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `color`
      FROM `df_21_1` AS `LHS`
      INNER JOIN `df_21_2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `df_21_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`color` = 'red'
       OR `color` = 'green')
ORDER BY S_name
