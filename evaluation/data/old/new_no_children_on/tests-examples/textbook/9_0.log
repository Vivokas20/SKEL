[     2.373][MainProcess][INFO] Parsing specification...
[     2.379][MainProcess][INFO] File read
[     2.380][MainProcess][DEBUG] Reading input files...
[     2.389][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/9-1.txt: ['string', 'string', 'string']
[     2.395][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/9-2.txt: ['string', 'string']
[     2.400][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/9.out: ['string', 'int64']
[     2.401][MainProcess][INFO] Parsing sketch...
[     2.401][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.401][MainProcess][DEBUG] Sketch creation: Line(T2, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.401][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.401][MainProcess][DEBUG] Sketch creation: Line(T4, root=['anti_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Cols, var=[])])
[     2.442][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 376, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 128, 'filter': 4, 'summarise': 22, 'mutate': 2}
[     2.442][MainProcess][DEBUG] {'natural_join': 0.006329113924050633, 'natural_join3': 0.012658227848101266, 'natural_join4': 0.02531645569620253, 'inner_join': 0.5949367088607594, 'anti_join': 0.06962025316455696, 'left_join': 0.006329113924050633, 'union': 0.006329113924050633, 'intersect': 0.02531645569620253, 'semi_join': 0.006329113924050633, 'cross_join': 0.20253164556962025, 'filter': 0.006329113924050633, 'summarise': 0.03481012658227848, 'mutate': 0.0031645569620253164}
[     2.442][MainProcess][DEBUG] {'natural_join': 0.006329113924050633, 'natural_join3': 0.012658227848101266, 'natural_join4': 0.02531645569620253, 'inner_join': 0.5949367088607594, 'anti_join': 0.06962025316455696, 'left_join': 0.006329113924050633, 'union': 0.006329113924050633, 'intersect': 0.02531645569620253, 'semi_join': 0.006329113924050633, 'cross_join': 0.20253164556962025, 'filter': 0.006329113924050633, 'summarise': 0.03481012658227848, 'mutate': 0.0031645569620253164}
[     2.442][MainProcess][INFO] Building synthesizer...
[     2.444][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[158, 159]),Child(['??'], type=SummariseCondition, var=[157]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])]), Line(T2, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[158, 159]),Child(['??'], type=Table, var=[158, 159]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[158, 159]),Child(['??'], type=FilterCondition, var=[155, 156]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['anti_join'], var=[5], children=[Child(['??'], type=Table, var=[158, 159]),Child(['??'], type=Table, var=[158, 159]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])])]
[     2.670][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 237 constraints
[     2.679][MainProcess][DEBUG] Enumeration time: 0.2365424633026123
[    39.947][MainProcess][DEBUG] Synthesis time: 37.267539978027344
[    39.947][MainProcess][INFO] Solution found: [summarise(input0, 'n = n()', 'ID_key'), natural_join(input1, line0), filter(input0, "Room != 'R128'"), anti_join(line1, line2, '')]
[    39.961][MainProcess][DEBUG] Solution found using process 0
[    39.961][MainProcess][INFO] Statistics:
[    39.961][MainProcess][INFO] 	Attempted programs: 3245 (approx)
[    39.961][MainProcess][INFO] 		Rejected: 3244 (approx)
[    39.961][MainProcess][INFO] 		Failed: 0 (approx)
[    39.961][MainProcess][INFO] 		Empty outputs: 2493 (76.8%) (approx)
[    39.961][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    39.961][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    39.961][MainProcess][INFO] 	Total time spent in enumerator init: 0.236542 (approx)
[    39.962][MainProcess][INFO] 	Total time spent in enumerator: 19.683817 (approx)
[    39.962][MainProcess][INFO] 		Enumerated 164.856234 programs/s avg. (just enumeration time)
[    39.962][MainProcess][INFO] 		Enumerated 82.652608 programs/s avg. (overall)
[    39.962][MainProcess][INFO] 	Total time spent in evaluation & testing: 14.123449 (approx)
[    39.962][MainProcess][INFO] 	Total time spent blocking cubes/programs: 3.441324 (approx)
[    39.962][MainProcess][INFO] Solution found: [summarise(input0, 'n = n()', 'ID_key'), natural_join(input1, line0), filter(input0, "Room != 'R128'"), anti_join(line1, line2, '')]
[    39.962][MainProcess][INFO] Solution size: 4
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun type_4 () Int)
(declare-fun root_4 () Int)
(declare-fun leaf_4_0 () Int)
(declare-fun leaf_4_1 () Int)
(declare-fun leaf_4_2 () Int)
(declare-fun leaf_4_3 () Int)
(declare-fun leaf_4_3_is_line_1 () Bool)
(declare-fun leaf_4_2_is_line_1 () Bool)
(declare-fun leaf_4_1_is_line_1 () Bool)
(declare-fun leaf_4_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_4_3_is_line_2 () Bool)
(declare-fun leaf_4_2_is_line_2 () Bool)
(declare-fun leaf_4_1_is_line_2 () Bool)
(declare-fun leaf_4_0_is_line_2 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun leaf_4_3_is_line_3 () Bool)
(declare-fun leaf_4_2_is_line_3 () Bool)
(declare-fun leaf_4_1_is_line_3 () Bool)
(declare-fun leaf_4_0_is_line_3 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 5))
(declare-fun bv_1_0_a () (_ BitVec 5))
(declare-fun bv_1_1_b () (_ BitVec 5))
(declare-fun bv_1_1_a () (_ BitVec 5))
(declare-fun bv_1_2_b () (_ BitVec 5))
(declare-fun bv_1_2_a () (_ BitVec 5))
(declare-fun bv_1_3_b () (_ BitVec 5))
(declare-fun bv_1_3_a () (_ BitVec 5))
(declare-fun bv_2_0_b () (_ BitVec 5))
(declare-fun bv_1 () (_ BitVec 5))
(declare-fun bv_2_0_a () (_ BitVec 5))
(declare-fun bv_2_1_b () (_ BitVec 5))
(declare-fun bv_2_1_a () (_ BitVec 5))
(declare-fun bv_2_2_b () (_ BitVec 5))
(declare-fun bv_2_2_a () (_ BitVec 5))
(declare-fun bv_2_3_b () (_ BitVec 5))
(declare-fun bv_2_3_a () (_ BitVec 5))
(declare-fun bv_3_0_b () (_ BitVec 5))
(declare-fun bv_2 () (_ BitVec 5))
(declare-fun bv_3_0_a () (_ BitVec 5))
(declare-fun bv_3_1_b () (_ BitVec 5))
(declare-fun bv_3_1_a () (_ BitVec 5))
(declare-fun bv_3_2_b () (_ BitVec 5))
(declare-fun bv_3_2_a () (_ BitVec 5))
(declare-fun bv_3_3_b () (_ BitVec 5))
(declare-fun bv_3_3_a () (_ BitVec 5))
(declare-fun bv_4_0_b () (_ BitVec 5))
(declare-fun bv_3 () (_ BitVec 5))
(declare-fun bv_4_0_a () (_ BitVec 5))
(declare-fun bv_4_1_b () (_ BitVec 5))
(declare-fun bv_4_1_a () (_ BitVec 5))
(declare-fun bv_4_2_b () (_ BitVec 5))
(declare-fun bv_4_2_a () (_ BitVec 5))
(declare-fun bv_4_3_b () (_ BitVec 5))
(declare-fun bv_4_3_a () (_ BitVec 5))
(declare-fun bv_4 () (_ BitVec 5))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 158) (= leaf_1_0 159)))
(assert (<= leaf_1_0 159))
(assert (>= leaf_1_0 158))
(assert (or (= leaf_1_1 157)))
(assert (<= leaf_1_1 157))
(assert (>= leaf_1_1 157))
(assert (or (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)
    (= leaf_1_2 26)
    (= leaf_1_2 27)
    (= leaf_1_2 28)))
(assert (<= leaf_1_2 28))
(assert (>= leaf_1_2 18))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 1)))
(assert (or (= leaf_2_0 158) (= leaf_2_0 159) (= leaf_2_0 161)))
(assert (<= leaf_2_0 161))
(assert (>= leaf_2_0 158))
(assert (or (= leaf_2_1 158) (= leaf_2_1 159) (= leaf_2_1 161)))
(assert (<= leaf_2_1 161))
(assert (>= leaf_2_1 158))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 11)))
(assert (or (= leaf_3_0 158) (= leaf_3_0 159) (= leaf_3_0 161) (= leaf_3_0 162)))
(assert (<= leaf_3_0 162))
(assert (>= leaf_3_0 158))
(assert (or (= leaf_3_1 155) (= leaf_3_1 156)))
(assert (<= leaf_3_1 156))
(assert (>= leaf_3_1 155))
(assert (or (= leaf_3_2 0)))
(assert (<= leaf_3_2 0))
(assert (>= leaf_3_2 0))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (< type_4 1))
(assert (>= type_4 0))
(assert (or (= root_4 5)))
(assert (or (= leaf_4_0 158)
    (= leaf_4_0 159)
    (= leaf_4_0 161)
    (= leaf_4_0 162)
    (= leaf_4_0 163)))
(assert (<= leaf_4_0 163))
(assert (>= leaf_4_0 158))
(assert (or (= leaf_4_1 158)
    (= leaf_4_1 159)
    (= leaf_4_1 161)
    (= leaf_4_1 162)
    (= leaf_4_1 163)))
(assert (<= leaf_4_1 163))
(assert (>= leaf_4_1 158))
(assert (or (= leaf_4_2 18)
    (= leaf_4_2 19)
    (= leaf_4_2 20)
    (= leaf_4_2 21)
    (= leaf_4_2 22)
    (= leaf_4_2 23)
    (= leaf_4_2 24)
    (= leaf_4_2 25)
    (= leaf_4_2 26)
    (= leaf_4_2 27)
    (= leaf_4_2 28)))
(assert (<= leaf_4_2 28))
(assert (>= leaf_4_2 18))
(assert (or (= leaf_4_3 0)))
(assert (<= leaf_4_3 0))
(assert (>= leaf_4_3 0))
(assert (or (= leaf_1_0 158)
    (= leaf_1_1 158)
    (= leaf_1_2 158)
    (= leaf_1_3 158)
    (= leaf_2_0 158)
    (= leaf_2_1 158)
    (= leaf_2_2 158)
    (= leaf_2_3 158)
    (= leaf_3_0 158)
    (= leaf_3_1 158)
    (= leaf_3_2 158)
    (= leaf_3_3 158)
    (= leaf_4_0 158)
    (= leaf_4_1 158)
    (= leaf_4_2 158)
    (= leaf_4_3 158)))
(assert (or (= leaf_1_0 159)
    (= leaf_1_1 159)
    (= leaf_1_2 159)
    (= leaf_1_3 159)
    (= leaf_2_0 159)
    (= leaf_2_1 159)
    (= leaf_2_2 159)
    (= leaf_2_3 159)
    (= leaf_3_0 159)
    (= leaf_3_1 159)
    (= leaf_3_2 159)
    (= leaf_3_3 159)
    (= leaf_4_0 159)
    (= leaf_4_1 159)
    (= leaf_4_2 159)
    (= leaf_4_3 159)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1
    leaf_4_0_is_line_1
    leaf_4_1_is_line_1
    leaf_4_2_is_line_1
    leaf_4_3_is_line_1))
(assert (or leaf_3_0_is_line_2
    leaf_3_1_is_line_2
    leaf_3_2_is_line_2
    leaf_3_3_is_line_2
    leaf_4_0_is_line_2
    leaf_4_1_is_line_2
    leaf_4_2_is_line_2
    leaf_4_3_is_line_2))
(assert (or leaf_4_0_is_line_3 leaf_4_1_is_line_3 leaf_4_2_is_line_3 leaf_4_3_is_line_3))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_4 1) (= type_4 0)))
(assert (=> (= root_4 2) (= type_4 0)))
(assert (=> (= root_4 3) (= type_4 0)))
(assert (=> (= root_4 4) (= type_4 0)))
(assert (=> (= root_4 5) (= type_4 0)))
(assert (=> (= root_4 6) (= type_4 0)))
(assert (=> (= root_4 7) (= type_4 0)))
(assert (=> (= root_4 8) (= type_4 0)))
(assert (=> (= root_4 9) (= type_4 0)))
(assert (=> (= root_4 10) (= type_4 0)))
(assert (=> (= root_4 11) (= type_4 0)))
(assert (=> (= root_4 12) (= type_4 0)))
(assert (=> (= root_4 13) (= type_4 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 158) (= #b01110 bv_1_0_a) (= #b00000 bv_1_0_b))
        (and (= leaf_1_0 159) (= #b00101 bv_1_0_a) (= #b00000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 157) (= #b00000 bv_1_1_a) (= #b10000 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 18) (= #b00000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b00001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 20) (= #b00010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b00100 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b01000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b00011 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 24) (= #b00101 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 25) (= #b01001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 26) (= #b00110 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 27) (= #b01010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 28) (= #b01100 bv_1_2_a) (= #b00000 bv_1_2_b)))))
(assert (=> (= root_1 12)
    (and (= leaf_1_3 0) (= #b00000 bv_1_3_a) (= #b00000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 161)))
(assert (=> (= root_2 1)
    (or (and (= leaf_2_0 158) (= #b01110 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 159) (= #b00101 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 161) (= bv_2_0_a bv_1) (= #b00000 bv_2_0_b)))))
(assert (= leaf_2_1_is_line_1 (= leaf_2_1 161)))
(assert (=> (= root_2 1)
    (or (and (= leaf_2_1 158) (= #b01110 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 159) (= #b00101 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 161) (= bv_2_1_a bv_1) (= #b00000 bv_2_1_b)))))
(assert (=> (= root_2 1) (and (= leaf_2_2 0) (= #b00000 bv_2_2_a) (= #b00000 bv_2_2_b))))
(assert (=> (= root_2 1) (and (= leaf_2_3 0) (= #b00000 bv_2_3_a) (= #b00000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 161)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 162)))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_0 158) (= #b01110 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 159) (= #b00101 bv_3_0_a) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 161) (= bv_3_0_a bv_1) (= #b00000 bv_3_0_b))
        (and (= leaf_3_0 162) (= bv_3_0_a bv_2) (= #b00000 bv_3_0_b)))))
(assert (=> (= root_3 11)
    (or (and (= leaf_3_1 155) (= #b01000 bv_3_1_a) (= #b00000 bv_3_1_b))
        (and (= leaf_3_1 156) (= #b01000 bv_3_1_a) (= #b00000 bv_3_1_b)))))
(assert (=> (= root_3 11)
    (and (= leaf_3_2 0) (= #b00000 bv_3_2_a) (= #b00000 bv_3_2_b))))
(assert (=> (= root_3 11)
    (and (= leaf_3_3 0) (= #b00000 bv_3_3_a) (= #b00000 bv_3_3_b))))
(assert (= leaf_4_0_is_line_1 (= leaf_4_0 161)))
(assert (= leaf_4_0_is_line_2 (= leaf_4_0 162)))
(assert (= leaf_4_0_is_line_3 (= leaf_4_0 163)))
(assert (=> (= root_4 5)
    (or (and (= leaf_4_0 158) (= #b01110 bv_4_0_a) (= #b00000 bv_4_0_b))
        (and (= leaf_4_0 159) (= #b00101 bv_4_0_a) (= #b00000 bv_4_0_b))
        (and (= leaf_4_0 161) (= bv_4_0_a bv_1) (= #b00000 bv_4_0_b))
        (and (= leaf_4_0 162) (= bv_4_0_a bv_2) (= #b00000 bv_4_0_b))
        (and (= leaf_4_0 163) (= bv_4_0_a bv_3) (= #b00000 bv_4_0_b)))))
(assert (= leaf_4_1_is_line_1 (= leaf_4_1 161)))
(assert (= leaf_4_1_is_line_2 (= leaf_4_1 162)))
(assert (= leaf_4_1_is_line_3 (= leaf_4_1 163)))
(assert (=> (= root_4 5)
    (or (and (= leaf_4_1 158) (= #b01110 bv_4_1_a) (= #b00000 bv_4_1_b))
        (and (= leaf_4_1 159) (= #b00101 bv_4_1_a) (= #b00000 bv_4_1_b))
        (and (= leaf_4_1 161) (= bv_4_1_a bv_1) (= #b00000 bv_4_1_b))
        (and (= leaf_4_1 162) (= bv_4_1_a bv_2) (= #b00000 bv_4_1_b))
        (and (= leaf_4_1 163) (= bv_4_1_a bv_3) (= #b00000 bv_4_1_b)))))
(assert (=> (= root_4 5)
    (or (and (= leaf_4_2 18) (= #b00000 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 19) (= #b00001 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 20) (= #b00010 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 21) (= #b00100 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 22) (= #b01000 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 23) (= #b00011 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 24) (= #b00101 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 25) (= #b01001 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 26) (= #b00110 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 27) (= #b01010 bv_4_2_a) (= #b00000 bv_4_2_b))
        (and (= leaf_4_2 28) (= #b01100 bv_4_2_a) (= #b00000 bv_4_2_b)))))
(assert (=> (= root_4 5) (and (= leaf_4_3 0) (= #b00000 bv_4_3_a) (= #b00000 bv_4_3_b))))
(assert (or (= leaf_1_0 157)
    (= leaf_1_1 157)
    (= leaf_1_2 157)
    (= leaf_1_3 157)
    (= leaf_2_0 157)
    (= leaf_2_1 157)
    (= leaf_2_2 157)
    (= leaf_2_3 157)
    (= leaf_3_0 157)
    (= leaf_3_1 157)
    (= leaf_3_2 157)
    (= leaf_3_3 157)
    (= leaf_4_0 157)
    (= leaf_4_1 157)
    (= leaf_4_2 157)
    (= leaf_4_3 157)))
(assert (or (= leaf_1_0 155)
    (= leaf_1_1 155)
    (= leaf_1_2 155)
    (= leaf_1_3 155)
    (= leaf_2_0 155)
    (= leaf_2_1 155)
    (= leaf_2_2 155)
    (= leaf_2_3 155)
    (= leaf_3_0 155)
    (= leaf_3_1 155)
    (= leaf_3_2 155)
    (= leaf_3_3 155)
    (= leaf_4_0 155)
    (= leaf_4_1 155)
    (= leaf_4_2 155)
    (= leaf_4_3 155)
    (= leaf_1_0 156)
    (= leaf_1_1 156)
    (= leaf_1_2 156)
    (= leaf_1_3 156)
    (= leaf_2_0 156)
    (= leaf_2_1 156)
    (= leaf_2_2 156)
    (= leaf_2_3 156)
    (= leaf_3_0 156)
    (= leaf_3_1 156)
    (= leaf_3_2 156)
    (= leaf_3_3 156)
    (= leaf_4_0 156)
    (= leaf_4_1 156)
    (= leaf_4_2 156)
    (= leaf_4_3 156)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 1))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 2))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 3))
    (distinct root_4 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 1))
    (distinct root_4 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 3))
    (distinct root_4 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_4_0_is_line_1
             leaf_4_1_is_line_1
             leaf_4_2_is_line_1
             leaf_4_3_is_line_1)
         (= root_1 5))
    (distinct root_4 5)))
(assert (=> (and (or leaf_4_0_is_line_2
             leaf_4_1_is_line_2
             leaf_4_2_is_line_2
             leaf_4_3_is_line_2)
         (= root_2 5))
    (distinct root_4 5)))
(assert (=> (and (or leaf_4_0_is_line_3
             leaf_4_1_is_line_3
             leaf_4_2_is_line_3
             leaf_4_3_is_line_3)
         (= root_3 5))
    (distinct root_4 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_4_0 leaf_4_1)
                    (and (= leaf_4_0 0) (= leaf_4_1 0)))
                (or (distinct leaf_4_0 leaf_4_2)
                    (and (= leaf_4_0 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_0 leaf_4_3)
                    (and (= leaf_4_0 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_1 leaf_4_2)
                    (and (= leaf_4_1 0) (= leaf_4_2 0)))
                (or (distinct leaf_4_1 leaf_4_3)
                    (and (= leaf_4_1 0) (= leaf_4_3 0)))
                (or (distinct leaf_4_2 leaf_4_3)
                    (and (= leaf_4_2 0) (= leaf_4_3 0))))))
  (=> (= root_4 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00000 bv_1_2_a)
                    (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b00000 bv_2_2_a)
                    (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b00000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b00000 bv_3_2_a)
                    (distinct #b00000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b00000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b00000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #b00000 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))
(assert (=> (= root_4 1) (and (< leaf_4_0 leaf_4_1) (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 2)
    (and (< leaf_4_0 leaf_4_1)
         (< leaf_4_1 leaf_4_2)
         (= (bvor bv_4_0_a bv_4_1_a bv_4_2_a) bv_4))))
(assert (=> (= root_4 3)
    (and (< leaf_4_0 leaf_4_1)
         (< leaf_4_1 leaf_4_2)
         (< leaf_4_2 leaf_4_3)
         (= (bvor bv_4_0_a bv_4_1_a bv_4_2_a bv_4_3_a) bv_4))))
(assert (=> (= root_4 4)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_1_a bv_4_2_b) bv_4_2_b)
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (let ((a!1 (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
                (= (bvand bv_4_1_a bv_4_2_a) bv_4_2_a)
                (=> (= #b00000 bv_4_2_a)
                    (distinct #b00000 (bvand bv_4_0_a bv_4_1_a)))
                (= bv_4_0_a bv_4))))
  (=> (= root_4 5) a!1)))
(assert (=> (= root_4 6)
    (and (distinct #b00000 (bvand bv_4_0_a bv_4_1_a))
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 7) (= (bvor bv_4_0_a bv_4_1_a) bv_4)))
(assert (=> (= root_4 8)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_1_a bv_4_2_a) bv_4_2_a)
         (= bv_4_2_a bv_4))))
(assert (=> (= root_4 9)
    (and (distinct #b00000 (bvand bv_4_0_a bv_4_1_a)) (= bv_4_0_a bv_4))))
(assert (=> (= root_4 10)
    (and (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= (bvand bv_4_0_a bv_4_1_a bv_4_2_b) bv_4_2_b)
         (= (bvor bv_4_0_a bv_4_1_a) bv_4))))
(assert (=> (= root_4 11)
    (and (= (bvand bv_4_0_a bv_4_1_a) bv_4_1_a) (= bv_4_0_a bv_4))))
(assert (=> (= root_4 12)
    (and (= (bvand bv_4_0_a bv_4_1_a) bv_4_1_a)
         (= (bvand bv_4_0_a bv_4_2_a) bv_4_2_a)
         (= #b00000 (bvand bv_4_1_b bv_4_2_a))
         (= (bvor bv_4_1_b bv_4_2_a) bv_4))))
(assert (=> (= root_4 13)
    (and (= (bvand bv_4_0_a bv_4_1_a) bv_4_1_a)
         (= (bvor bv_4_0_a bv_4_1_b) bv_4))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_9_1 <- read_csv("tests-examples/textbook/tables/9-1.txt", col_types = cols("ID_class" = col_character(),"ID_key" = col_character(),"Room" = col_character()))
df_9_1 <- copy_to(con, df_9_1)
df_9_2 <- read_csv("tests-examples/textbook/tables/9-2.txt", col_types = cols("ID_key" = col_character(),"F_name" = col_character()))
df_9_2 <- copy_to(con, df_9_2)
expected_output <- read_csv("tests-examples/textbook/tables/9.out", col_types = cols("F_name" = col_character(),"n" = col_integer()))

df2336 <- df_9_1 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df2337 <- inner_join(df_9_2, df2336, na_matches="never")
df2338 <- df_9_1 %>% filter(Room != 'R128')
df2339 <- anti_join(df2337, df2338, by=c(), na_matches="never")
out <- df2339 %>% select(F_name, n)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `F_name`,
       `n`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`ID_key` AS `ID_key`,
             `F_name`,
             `n`
      FROM `df_9_2` AS `LHS`
      INNER JOIN
        (SELECT `ID_key`,
                COUNT(*) AS `n`
         FROM `df_9_1`
         GROUP BY `ID_key`) AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`)) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_9_1`
           WHERE (`Room` != 'R128')) AS RHS
        WHERE (LHS.ID_key = RHS.ID_key) ))
