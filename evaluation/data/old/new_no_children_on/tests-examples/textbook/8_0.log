[     2.358][MainProcess][INFO] Parsing specification...
[     2.363][MainProcess][INFO] File read
[     2.364][MainProcess][DEBUG] Reading input files...
[     2.373][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8-1.txt: ['string', 'string', 'int64']
[     2.378][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8.out: ['string', 'int64']
[     2.378][MainProcess][INFO] Parsing sketch...
[     2.379][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.379][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.417][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 12, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 134, 'filter': 32, 'summarise': 7, 'mutate': 1}
[     2.417][MainProcess][DEBUG] {'natural_join': 0.0049504950495049506, 'natural_join3': 0.0049504950495049506, 'natural_join4': 0.0049504950495049506, 'inner_join': 0.0594059405940594, 'anti_join': 0.034653465346534656, 'left_join': 0.0049504950495049506, 'union': 0.0049504950495049506, 'intersect': 0.01485148514851485, 'semi_join': 0.0049504950495049506, 'cross_join': 0.6633663366336634, 'filter': 0.15841584158415842, 'summarise': 0.034653465346534656, 'mutate': 0.0049504950495049506}
[     2.418][MainProcess][DEBUG] {'natural_join': 0.0049504950495049506, 'natural_join3': 0.0049504950495049506, 'natural_join4': 0.0049504950495049506, 'inner_join': 0.0594059405940594, 'anti_join': 0.034653465346534656, 'left_join': 0.0049504950495049506, 'union': 0.0049504950495049506, 'intersect': 0.01485148514851485, 'semi_join': 0.0049504950495049506, 'cross_join': 0.6633663366336634, 'filter': 0.15841584158415842, 'summarise': 0.034653465346534656, 'mutate': 0.0049504950495049506}
[     2.418][MainProcess][INFO] Building synthesizer...
[     2.419][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[203]),Child(['??'], type=SummariseCondition, var=[202]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[203]),Child(['??'], type=FilterCondition, var=[170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.633][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 103 constraints
[     2.639][MainProcess][DEBUG] Enumeration time: 0.22160077095031738
[     2.782][MainProcess][DEBUG] Synthesis time: 0.14200043678283691
[     2.782][MainProcess][INFO] Solution found: [summarise(input0, 'meanage = mean(age)', 'level'), filter(line0, "level != 'JR'")]
[     2.783][MainProcess][DEBUG] Solution found using process 0
[     2.783][MainProcess][INFO] Statistics:
[     2.783][MainProcess][INFO] 	Attempted programs: 10 (approx)
[     2.783][MainProcess][INFO] 		Rejected: 9 (approx)
[     2.783][MainProcess][INFO] 		Failed: 0 (approx)
[     2.783][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.783][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.783][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.783][MainProcess][INFO] 	Total time spent in enumerator init: 0.221601 (approx)
[     2.784][MainProcess][INFO] 	Total time spent in enumerator: 0.014804 (approx)
[     2.784][MainProcess][INFO] 		Enumerated 675.498293 programs/s avg. (just enumeration time)
[     2.784][MainProcess][INFO] 		Enumerated 4.783173 programs/s avg. (overall)
[     2.784][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.118125 (approx)
[     2.784][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.008253 (approx)
[     2.784][MainProcess][INFO] Solution found: [summarise(input0, 'meanage = mean(age)', 'level'), filter(line0, "level != 'JR'")]
[     2.784][MainProcess][INFO] Solution size: 2
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_2_0_b () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(declare-fun bv_2_0_a () (_ BitVec 4))
(declare-fun bv_2_1_b () (_ BitVec 4))
(declare-fun bv_2_1_a () (_ BitVec 4))
(declare-fun bv_2_2_b () (_ BitVec 4))
(declare-fun bv_2_2_a () (_ BitVec 4))
(declare-fun bv_2_3_b () (_ BitVec 4))
(declare-fun bv_2_3_a () (_ BitVec 4))
(declare-fun bv_2 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 203)))
(assert (<= leaf_1_0 203))
(assert (>= leaf_1_0 203))
(assert (or (= leaf_1_1 202)))
(assert (<= leaf_1_1 202))
(assert (>= leaf_1_1 202))
(assert (or (= leaf_1_2 17)
    (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)))
(assert (<= leaf_1_2 23))
(assert (>= leaf_1_2 17))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 203) (= leaf_2_0 205)))
(assert (<= leaf_2_0 205))
(assert (>= leaf_2_0 203))
(assert (or (= leaf_2_1 170)
    (= leaf_2_1 171)
    (= leaf_2_1 172)
    (= leaf_2_1 173)
    (= leaf_2_1 174)
    (= leaf_2_1 175)
    (= leaf_2_1 176)
    (= leaf_2_1 177)
    (= leaf_2_1 178)
    (= leaf_2_1 179)
    (= leaf_2_1 180)
    (= leaf_2_1 181)
    (= leaf_2_1 182)
    (= leaf_2_1 183)
    (= leaf_2_1 184)
    (= leaf_2_1 185)
    (= leaf_2_1 186)
    (= leaf_2_1 187)
    (= leaf_2_1 188)
    (= leaf_2_1 189)
    (= leaf_2_1 190)
    (= leaf_2_1 191)
    (= leaf_2_1 192)
    (= leaf_2_1 193)
    (= leaf_2_1 194)
    (= leaf_2_1 195)
    (= leaf_2_1 196)
    (= leaf_2_1 197)
    (= leaf_2_1 198)
    (= leaf_2_1 199)
    (= leaf_2_1 200)
    (= leaf_2_1 201)))
(assert (<= leaf_2_1 201))
(assert (>= leaf_2_1 170))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 203)
    (= leaf_1_1 203)
    (= leaf_1_2 203)
    (= leaf_1_3 203)
    (= leaf_2_0 203)
    (= leaf_2_1 203)
    (= leaf_2_2 203)
    (= leaf_2_3 203)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_1 12) (or (and (= leaf_1_0 203) (= #x7 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 12) (or (and (= leaf_1_1 202) (= #x2 bv_1_1_a) (= #x8 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 17) (= #x0 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 18) (= #x1 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 19) (= #x2 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 20) (= #x4 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 21) (= #x3 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 22) (= #x5 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 23) (= #x6 bv_1_2_a) (= #x0 bv_1_2_b)))))
(assert (=> (= root_1 12) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 205)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 203) (= #x7 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 205) (= bv_2_0_a bv_1) (= #x0 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 170) (= #x4 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 171) (= #x4 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 172) (= #xa bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 173) (= #xa bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 174) (= #xa bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 175) (= #xa bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 176) (= #xa bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 177) (= #xa bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 178) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 179) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 180) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 181) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 182) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 183) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 184) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 185) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 186) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 187) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 188) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 189) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 190) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 191) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 192) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 193) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 194) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 195) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 196) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 197) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 198) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 199) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 200) (= #xe bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 201) (= #xe bv_2_1_a) (= #x0 bv_2_1_b)))))
(assert (=> (= root_2 11) (and (= leaf_2_2 0) (= #x0 bv_2_2_a) (= #x0 bv_2_2_b))))
(assert (=> (= root_2 11) (and (= leaf_2_3 0) (= #x0 bv_2_3_a) (= #x0 bv_2_3_b))))
(assert (or (= leaf_1_0 202)
    (= leaf_1_1 202)
    (= leaf_1_2 202)
    (= leaf_1_3 202)
    (= leaf_2_0 202)
    (= leaf_2_1 202)
    (= leaf_2_2 202)
    (= leaf_2_3 202)))
(assert (or (= leaf_1_0 170)
    (= leaf_1_1 170)
    (= leaf_1_2 170)
    (= leaf_1_3 170)
    (= leaf_2_0 170)
    (= leaf_2_1 170)
    (= leaf_2_2 170)
    (= leaf_2_3 170)
    (= leaf_1_0 171)
    (= leaf_1_1 171)
    (= leaf_1_2 171)
    (= leaf_1_3 171)
    (= leaf_2_0 171)
    (= leaf_2_1 171)
    (= leaf_2_2 171)
    (= leaf_2_3 171)
    (= leaf_1_0 179)
    (= leaf_1_1 179)
    (= leaf_1_2 179)
    (= leaf_1_3 179)
    (= leaf_2_0 179)
    (= leaf_2_1 179)
    (= leaf_2_2 179)
    (= leaf_2_3 179)
    (= leaf_1_0 178)
    (= leaf_1_1 178)
    (= leaf_1_2 178)
    (= leaf_1_3 178)
    (= leaf_2_0 178)
    (= leaf_2_1 178)
    (= leaf_2_2 178)
    (= leaf_2_3 178)
    (= leaf_1_0 181)
    (= leaf_1_1 181)
    (= leaf_1_2 181)
    (= leaf_1_3 181)
    (= leaf_2_0 181)
    (= leaf_2_1 181)
    (= leaf_2_2 181)
    (= leaf_2_3 181)
    (= leaf_1_0 180)
    (= leaf_1_1 180)
    (= leaf_1_2 180)
    (= leaf_1_3 180)
    (= leaf_2_0 180)
    (= leaf_2_1 180)
    (= leaf_2_2 180)
    (= leaf_2_3 180)
    (= leaf_1_0 183)
    (= leaf_1_1 183)
    (= leaf_1_2 183)
    (= leaf_1_3 183)
    (= leaf_2_0 183)
    (= leaf_2_1 183)
    (= leaf_2_2 183)
    (= leaf_2_3 183)
    (= leaf_1_0 182)
    (= leaf_1_1 182)
    (= leaf_1_2 182)
    (= leaf_1_3 182)
    (= leaf_2_0 182)
    (= leaf_2_1 182)
    (= leaf_2_2 182)
    (= leaf_2_3 182)
    (= leaf_1_0 185)
    (= leaf_1_1 185)
    (= leaf_1_2 185)
    (= leaf_1_3 185)
    (= leaf_2_0 185)
    (= leaf_2_1 185)
    (= leaf_2_2 185)
    (= leaf_2_3 185)
    (= leaf_1_0 184)
    (= leaf_1_1 184)
    (= leaf_1_2 184)
    (= leaf_1_3 184)
    (= leaf_2_0 184)
    (= leaf_2_1 184)
    (= leaf_2_2 184)
    (= leaf_2_3 184)
    (= leaf_1_0 187)
    (= leaf_1_1 187)
    (= leaf_1_2 187)
    (= leaf_1_3 187)
    (= leaf_2_0 187)
    (= leaf_2_1 187)
    (= leaf_2_2 187)
    (= leaf_2_3 187)
    (= leaf_1_0 186)
    (= leaf_1_1 186)
    (= leaf_1_2 186)
    (= leaf_1_3 186)
    (= leaf_2_0 186)
    (= leaf_2_1 186)
    (= leaf_2_2 186)
    (= leaf_2_3 186)
    (= leaf_1_0 189)
    (= leaf_1_1 189)
    (= leaf_1_2 189)
    (= leaf_1_3 189)
    (= leaf_2_0 189)
    (= leaf_2_1 189)
    (= leaf_2_2 189)
    (= leaf_2_3 189)
    (= leaf_1_0 188)
    (= leaf_1_1 188)
    (= leaf_1_2 188)
    (= leaf_1_3 188)
    (= leaf_2_0 188)
    (= leaf_2_1 188)
    (= leaf_2_2 188)
    (= leaf_2_3 188)
    (= leaf_1_0 191)
    (= leaf_1_1 191)
    (= leaf_1_2 191)
    (= leaf_1_3 191)
    (= leaf_2_0 191)
    (= leaf_2_1 191)
    (= leaf_2_2 191)
    (= leaf_2_3 191)
    (= leaf_1_0 190)
    (= leaf_1_1 190)
    (= leaf_1_2 190)
    (= leaf_1_3 190)
    (= leaf_2_0 190)
    (= leaf_2_1 190)
    (= leaf_2_2 190)
    (= leaf_2_3 190)
    (= leaf_1_0 193)
    (= leaf_1_1 193)
    (= leaf_1_2 193)
    (= leaf_1_3 193)
    (= leaf_2_0 193)
    (= leaf_2_1 193)
    (= leaf_2_2 193)
    (= leaf_2_3 193)
    (= leaf_1_0 192)
    (= leaf_1_1 192)
    (= leaf_1_2 192)
    (= leaf_1_3 192)
    (= leaf_2_0 192)
    (= leaf_2_1 192)
    (= leaf_2_2 192)
    (= leaf_2_3 192)
    (= leaf_1_0 195)
    (= leaf_1_1 195)
    (= leaf_1_2 195)
    (= leaf_1_3 195)
    (= leaf_2_0 195)
    (= leaf_2_1 195)
    (= leaf_2_2 195)
    (= leaf_2_3 195)
    (= leaf_1_0 194)
    (= leaf_1_1 194)
    (= leaf_1_2 194)
    (= leaf_1_3 194)
    (= leaf_2_0 194)
    (= leaf_2_1 194)
    (= leaf_2_2 194)
    (= leaf_2_3 194)
    (= leaf_1_0 197)
    (= leaf_1_1 197)
    (= leaf_1_2 197)
    (= leaf_1_3 197)
    (= leaf_2_0 197)
    (= leaf_2_1 197)
    (= leaf_2_2 197)
    (= leaf_2_3 197)
    (= leaf_1_0 196)
    (= leaf_1_1 196)
    (= leaf_1_2 196)
    (= leaf_1_3 196)
    (= leaf_2_0 196)
    (= leaf_2_1 196)
    (= leaf_2_2 196)
    (= leaf_2_3 196)
    (= leaf_1_0 199)
    (= leaf_1_1 199)
    (= leaf_1_2 199)
    (= leaf_1_3 199)
    (= leaf_2_0 199)
    (= leaf_2_1 199)
    (= leaf_2_2 199)
    (= leaf_2_3 199)
    (= leaf_1_0 198)
    (= leaf_1_1 198)
    (= leaf_1_2 198)
    (= leaf_1_3 198)
    (= leaf_2_0 198)
    (= leaf_2_1 198)
    (= leaf_2_2 198)
    (= leaf_2_3 198)
    (= leaf_1_0 201)
    (= leaf_1_1 201)
    (= leaf_1_2 201)
    (= leaf_1_3 201)
    (= leaf_2_0 201)
    (= leaf_2_1 201)
    (= leaf_2_2 201)
    (= leaf_2_3 201)
    (= leaf_1_0 200)
    (= leaf_1_1 200)
    (= leaf_1_2 200)
    (= leaf_1_3 200)
    (= leaf_2_0 200)
    (= leaf_2_1 200)
    (= leaf_2_2 200)
    (= leaf_2_3 200)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #x0 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #x0 bv_2_2_a) (distinct #x0 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #x0 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_8_1 <- read_csv("tests-examples/textbook/tables/8-1.txt", col_types = cols("S_key" = col_character(),"level" = col_character(),"age" = col_integer()))
df_8_1 <- copy_to(con, df_8_1)
expected_output <- read_csv("tests-examples/textbook/tables/8.out", col_types = cols("level" = col_character(),"meanage" = col_integer()))

df11 <- df_8_1 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
df12 <- df11 %>% filter(level != 'JR')
out <- df12 %>% select(level, meanage)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `level`,
       `meanage`
FROM
  (SELECT `level`,
          AVG(`age`) AS `meanage`
   FROM `df_8_1`
   GROUP BY `level`)
WHERE (`level` != 'JR')
