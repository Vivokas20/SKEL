[     2.351][MainProcess][INFO] Parsing specification...
[     2.356][MainProcess][INFO] File read
[     2.357][MainProcess][DEBUG] Reading input files...
[     2.365][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i029.csv: ['string', 'string']
[     2.371][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o029.csv: ['string', 'string']
[     2.371][MainProcess][INFO] Parsing sketch...
[     2.371][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.409][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 21, 'anti_join': 4, 'left_join': 1, 'union': 1, 'intersect': 2, 'semi_join': 1, 'cross_join': 130, 'unite': 4, 'summarise': 16, 'mutate': 4}
[     2.409][MainProcess][DEBUG] {'natural_join': 0.0053475935828877, 'natural_join3': 0.0053475935828877, 'natural_join4': 0.0053475935828877, 'inner_join': 0.11229946524064172, 'anti_join': 0.0213903743315508, 'left_join': 0.0053475935828877, 'union': 0.0053475935828877, 'intersect': 0.0106951871657754, 'semi_join': 0.0053475935828877, 'cross_join': 0.6951871657754011, 'unite': 0.0213903743315508, 'summarise': 0.0855614973262032, 'mutate': 0.0213903743315508}
[     2.409][MainProcess][DEBUG] {'natural_join': 0.005347593582887701, 'natural_join3': 0.005347593582887701, 'natural_join4': 0.005347593582887701, 'inner_join': 0.11229946524064173, 'anti_join': 0.021390374331550804, 'left_join': 0.005347593582887701, 'union': 0.005347593582887701, 'intersect': 0.010695187165775402, 'semi_join': 0.005347593582887701, 'cross_join': 0.6951871657754012, 'unite': 0.021390374331550804, 'summarise': 0.08556149732620322, 'mutate': 0.021390374331550804}
[     2.410][MainProcess][INFO] Building synthesizer...
[     2.411][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[175]),Child(['??'], type=SummariseCondition, var=[171, 172, 173, 174]),Child(['??'], type=Cols, var=[16, 17, 18, 19]),Child([None], type=None, var=[0])])]
[     2.456][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 48 constraints
[     2.458][MainProcess][DEBUG] Enumeration time: 0.048606157302856445
[     2.637][MainProcess][DEBUG] Synthesis time: 0.1786956787109375
[     2.637][MainProcess][INFO] Solution found: [summarise(input0, "concatPerson = string_agg(Person, ' ')", 'TicketID')]
[     2.638][MainProcess][DEBUG] Solution found using process 0
[     2.638][MainProcess][INFO] Statistics:
[     2.638][MainProcess][INFO] 	Attempted programs: 13 (approx)
[     2.639][MainProcess][INFO] 		Rejected: 12 (approx)
[     2.639][MainProcess][INFO] 		Failed: 0 (approx)
[     2.639][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.639][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.639][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.639][MainProcess][INFO] 	Total time spent in enumerator init: 0.048606 (approx)
[     2.639][MainProcess][INFO] 	Total time spent in enumerator: 0.013191 (approx)
[     2.639][MainProcess][INFO] 		Enumerated 985.485948 programs/s avg. (just enumeration time)
[     2.639][MainProcess][INFO] 		Enumerated 6.633526 programs/s avg. (overall)
[     2.639][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.159043 (approx)
[     2.639][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.005794 (approx)
[     2.639][MainProcess][INFO] Solution found: [summarise(input0, "concatPerson = string_agg(Person, ' ')", 'TicketID')]
[     2.639][MainProcess][INFO] Solution size: 1
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun bv_1_0_b () (_ BitVec 3))
(declare-fun bv_1_0_a () (_ BitVec 3))
(declare-fun bv_1_1_b () (_ BitVec 3))
(declare-fun bv_1_1_a () (_ BitVec 3))
(declare-fun bv_1_2_b () (_ BitVec 3))
(declare-fun bv_1_2_a () (_ BitVec 3))
(declare-fun bv_1_3_b () (_ BitVec 3))
(declare-fun bv_1_3_a () (_ BitVec 3))
(declare-fun bv_1 () (_ BitVec 3))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 175)))
(assert (<= leaf_1_0 175))
(assert (>= leaf_1_0 175))
(assert (or (= leaf_1_1 171) (= leaf_1_1 172) (= leaf_1_1 173) (= leaf_1_1 174)))
(assert (<= leaf_1_1 174))
(assert (>= leaf_1_1 171))
(assert (or (= leaf_1_2 16) (= leaf_1_2 17) (= leaf_1_2 18) (= leaf_1_2 19)))
(assert (<= leaf_1_2 19))
(assert (>= leaf_1_2 16))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (or (= leaf_1_0 175) (= leaf_1_1 175) (= leaf_1_2 175) (= leaf_1_3 175)))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 175) (= #b011 bv_1_0_a) (= #b000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 171) (= #b001 bv_1_1_a) (= #b100 bv_1_1_b))
        (and (= leaf_1_1 172) (= #b001 bv_1_1_a) (= #b100 bv_1_1_b))
        (and (= leaf_1_1 173) (= #b001 bv_1_1_a) (= #b100 bv_1_1_b))
        (and (= leaf_1_1 174) (= #b001 bv_1_1_a) (= #b100 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 16) (= #b000 bv_1_2_a) (= #b000 bv_1_2_b))
        (and (= leaf_1_2 17) (= #b001 bv_1_2_a) (= #b000 bv_1_2_b))
        (and (= leaf_1_2 18) (= #b010 bv_1_2_a) (= #b000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b011 bv_1_2_a) (= #b000 bv_1_2_b)))))
(assert (=> (= root_1 12) (and (= leaf_1_3 0) (= #b000 bv_1_3_a) (= #b000 bv_1_3_b))))
(assert (or (= leaf_1_0 171)
    (= leaf_1_1 171)
    (= leaf_1_2 171)
    (= leaf_1_3 171)
    (= leaf_1_0 172)
    (= leaf_1_1 172)
    (= leaf_1_2 172)
    (= leaf_1_3 172)
    (= leaf_1_0 173)
    (= leaf_1_1 173)
    (= leaf_1_2 173)
    (= leaf_1_3 173)
    (= leaf_1_0 174)
    (= leaf_1_1 174)
    (= leaf_1_2 174)
    (= leaf_1_3 174)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000 bv_1_2_a)
                    (distinct #b000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= bv_1_0_a bv_1))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i029 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i029.csv", col_types = cols("TicketID" = col_character(),"Person" = col_character()))
df_i029 <- copy_to(con, df_i029)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o029.csv", col_types = cols("TicketID" = col_character(),"concatPerson" = col_character()))

string_agg <- function(v,s) {paste0("", Reduce(function(x, y) paste(x, y, sep = s), v))}

df14 <- df_i029 %>% group_by(TicketID) %>% summarise(concatPerson = string_agg(Person, ' ')) %>% ungroup()
out <- df14 %>% select(TicketID, concatPerson)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `TicketID`,
       `concatPerson`
FROM
  (SELECT `TicketID`,
          string_agg(`Person`, ' ') AS concatPerson
   FROM df_i029
   GROUP BY TicketID)
