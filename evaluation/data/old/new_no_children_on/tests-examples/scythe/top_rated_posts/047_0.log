[     2.355][MainProcess][INFO] Parsing specification...
[     2.360][MainProcess][INFO] File read
[     2.361][MainProcess][DEBUG] Reading input files...
[     2.371][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i047.csv: ['int64', 'int64', 'int64', 'string']
[     2.377][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o047.csv: ['int64', 'int64', 'int64', 'string']
[     2.378][MainProcess][INFO] Parsing sketch...
[     2.378][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.378][MainProcess][DEBUG] Sketch creation: Line(T2, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.447][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 94, 'anti_join': 11, 'left_join': 1, 'union': 1, 'intersect': 4, 'semi_join': 1, 'cross_join': 1110, 'filter': 6, 'summarise': 22, 'mutate': 2}
[     2.447][MainProcess][DEBUG] {'natural_join': 0.0007968127490039841, 'natural_join3': 0.0007968127490039841, 'natural_join4': 0.0007968127490039841, 'inner_join': 0.0749003984063745, 'anti_join': 0.008764940239043825, 'left_join': 0.0007968127490039841, 'union': 0.0007968127490039841, 'intersect': 0.0031872509960159364, 'semi_join': 0.0007968127490039841, 'cross_join': 0.8844621513944223, 'filter': 0.004780876494023904, 'summarise': 0.01752988047808765, 'mutate': 0.0015936254980079682}
[     2.447][MainProcess][DEBUG] {'natural_join': 0.0007968127490039841, 'natural_join3': 0.0007968127490039841, 'natural_join4': 0.0007968127490039841, 'inner_join': 0.0749003984063745, 'anti_join': 0.008764940239043825, 'left_join': 0.0007968127490039841, 'union': 0.0007968127490039841, 'intersect': 0.0031872509960159364, 'semi_join': 0.0007968127490039841, 'cross_join': 0.8844621513944223, 'filter': 0.004780876494023904, 'summarise': 0.01752988047808765, 'mutate': 0.0015936254980079682}
[     2.447][MainProcess][INFO] Building synthesizer...
[     2.449][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[1241]),Child(['??'], type=SummariseCondition, var=[1239, 1240]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])]), Line(T2, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[1241]),Child(['??'], type=Table, var=[1241]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.555][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 103 constraints
[     2.560][MainProcess][DEBUG] Enumeration time: 0.11235308647155762
[     2.647][MainProcess][DEBUG] Synthesis time: 0.08697295188903809
[     2.647][MainProcess][INFO] Solution found: [summarise(input0, 'time = max(time)', 'user'), natural_join(input0, line0)]
[     2.648][MainProcess][DEBUG] Solution found using process 0
[     2.648][MainProcess][INFO] Statistics:
[     2.648][MainProcess][INFO] 	Attempted programs: 2 (approx)
[     2.648][MainProcess][INFO] 		Rejected: 1 (approx)
[     2.648][MainProcess][INFO] 		Failed: 0 (approx)
[     2.648][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.648][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.648][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.649][MainProcess][INFO] 	Total time spent in enumerator init: 0.112353 (approx)
[     2.649][MainProcess][INFO] 	Total time spent in enumerator: 0.003194 (approx)
[     2.649][MainProcess][INFO] 		Enumerated 626.108971 programs/s avg. (just enumeration time)
[     2.649][MainProcess][INFO] 		Enumerated 1.019771 programs/s avg. (overall)
[     2.649][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.079972 (approx)
[     2.649][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.002963 (approx)
[     2.649][MainProcess][INFO] Solution found: [summarise(input0, 'time = max(time)', 'user'), natural_join(input0, line0)]
[     2.649][MainProcess][INFO] Solution size: 2
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 5))
(declare-fun bv_1_0_a () (_ BitVec 5))
(declare-fun bv_1_1_b () (_ BitVec 5))
(declare-fun bv_1_1_a () (_ BitVec 5))
(declare-fun bv_1_2_b () (_ BitVec 5))
(declare-fun bv_1_2_a () (_ BitVec 5))
(declare-fun bv_1_3_b () (_ BitVec 5))
(declare-fun bv_1_3_a () (_ BitVec 5))
(declare-fun bv_2_0_b () (_ BitVec 5))
(declare-fun bv_1 () (_ BitVec 5))
(declare-fun bv_2_0_a () (_ BitVec 5))
(declare-fun bv_2_1_b () (_ BitVec 5))
(declare-fun bv_2_1_a () (_ BitVec 5))
(declare-fun bv_2_2_b () (_ BitVec 5))
(declare-fun bv_2_2_a () (_ BitVec 5))
(declare-fun bv_2_3_b () (_ BitVec 5))
(declare-fun bv_2_3_a () (_ BitVec 5))
(declare-fun bv_2 () (_ BitVec 5))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 1241)))
(assert (<= leaf_1_0 1241))
(assert (>= leaf_1_0 1241))
(assert (or (= leaf_1_1 1239) (= leaf_1_1 1240)))
(assert (<= leaf_1_1 1240))
(assert (>= leaf_1_1 1239))
(assert (or (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)
    (= leaf_1_2 26)
    (= leaf_1_2 27)
    (= leaf_1_2 28)))
(assert (<= leaf_1_2 28))
(assert (>= leaf_1_2 18))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 1)))
(assert (or (= leaf_2_0 1241) (= leaf_2_0 1243)))
(assert (<= leaf_2_0 1243))
(assert (>= leaf_2_0 1241))
(assert (or (= leaf_2_1 1241) (= leaf_2_1 1243)))
(assert (<= leaf_2_1 1243))
(assert (>= leaf_2_1 1241))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 1241)
    (= leaf_1_1 1241)
    (= leaf_1_2 1241)
    (= leaf_1_3 1241)
    (= leaf_2_0 1241)
    (= leaf_2_1 1241)
    (= leaf_2_2 1241)
    (= leaf_2_3 1241)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 1241) (= #b01111 bv_1_0_a) (= #b00000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 1239) (= #b00100 bv_1_1_a) (= #b00100 bv_1_1_b))
        (and (= leaf_1_1 1240) (= #b00100 bv_1_1_a) (= #b10000 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 18) (= #b00000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b00001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 20) (= #b00010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b00100 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b01000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b00011 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 24) (= #b00101 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 25) (= #b01001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 26) (= #b00110 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 27) (= #b01010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 28) (= #b01100 bv_1_2_a) (= #b00000 bv_1_2_b)))))
(assert (=> (= root_1 12)
    (and (= leaf_1_3 0) (= #b00000 bv_1_3_a) (= #b00000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 1243)))
(assert (=> (= root_2 1)
    (or (and (= leaf_2_0 1241) (= #b01111 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 1243) (= bv_2_0_a bv_1) (= #b00000 bv_2_0_b)))))
(assert (= leaf_2_1_is_line_1 (= leaf_2_1 1243)))
(assert (=> (= root_2 1)
    (or (and (= leaf_2_1 1241) (= #b01111 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 1243) (= bv_2_1_a bv_1) (= #b00000 bv_2_1_b)))))
(assert (=> (= root_2 1) (and (= leaf_2_2 0) (= #b00000 bv_2_2_a) (= #b00000 bv_2_2_b))))
(assert (=> (= root_2 1) (and (= leaf_2_3 0) (= #b00000 bv_2_3_a) (= #b00000 bv_2_3_b))))
(assert (or (= leaf_1_0 1239)
    (= leaf_1_1 1239)
    (= leaf_1_2 1239)
    (= leaf_1_3 1239)
    (= leaf_2_0 1239)
    (= leaf_2_1 1239)
    (= leaf_2_2 1239)
    (= leaf_2_3 1239)
    (= leaf_1_0 1240)
    (= leaf_1_1 1240)
    (= leaf_1_2 1240)
    (= leaf_1_3 1240)
    (= leaf_2_0 1240)
    (= leaf_2_1 1240)
    (= leaf_2_2 1240)
    (= leaf_2_3 1240)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00000 bv_1_2_a)
                    (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b00000 bv_2_2_a)
                    (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b00000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i047 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i047.csv", col_types = cols("id" = col_integer(),"user" = col_integer(),"time" = col_integer(),"io" = col_character()))
df_i047 <- copy_to(con, df_i047)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o047.csv", col_types = cols("id" = col_integer(),"user" = col_integer(),"time" = col_integer(),"io" = col_character()))

df5 <- df_i047 %>% group_by(user) %>% summarise(time = max(time)) %>% ungroup()
df6 <- inner_join(df_i047, df5, na_matches="never")
out <- df6 %>% select(id, user, time, io)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       USER,
       TIME,
       io
FROM
  (SELECT id,
          LHS.user AS USER,
          LHS.time AS TIME,
          io
   FROM df_i047 AS LHS
   INNER JOIN
     (SELECT USER,
             MAX(TIME) AS TIME
      FROM df_i047
      GROUP BY USER) AS RHS ON (LHS.user = RHS.user
                                AND LHS.time = RHS.time))
