[     2.351][MainProcess][INFO] Parsing specification...
[     2.356][MainProcess][INFO] File read
[     2.357][MainProcess][DEBUG] Reading input files...
[     2.368][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i054.csv: ['datetime64[ns]', 'int64']
[     2.375][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o054.csv: ['datetime64[ns]', 'int64']
[     2.376][MainProcess][INFO] Parsing sketch...
[     2.376][MainProcess][DEBUG] Sketch creation: Line(T1, root=['mutate'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[])])
[     2.469][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 7, 'anti_join': 4, 'left_join': 1, 'union': 1, 'intersect': 2, 'semi_join': 1, 'cross_join': 1548, 'filter': 6, 'summarise': 4, 'mutate': 1}
[     2.469][MainProcess][DEBUG] {'natural_join': 0.0006337135614702154, 'natural_join3': 0.0006337135614702154, 'natural_join4': 0.0006337135614702154, 'inner_join': 0.004435994930291508, 'anti_join': 0.0025348542458808617, 'left_join': 0.0006337135614702154, 'union': 0.0006337135614702154, 'intersect': 0.0012674271229404308, 'semi_join': 0.0006337135614702154, 'cross_join': 0.9809885931558935, 'filter': 0.0038022813688212928, 'summarise': 0.0025348542458808617, 'mutate': 0.0006337135614702154}
[     2.469][MainProcess][DEBUG] {'natural_join': 0.0006337135614702154, 'natural_join3': 0.0006337135614702154, 'natural_join4': 0.0006337135614702154, 'inner_join': 0.004435994930291508, 'anti_join': 0.0025348542458808617, 'left_join': 0.0006337135614702154, 'union': 0.0006337135614702154, 'intersect': 0.0012674271229404308, 'semi_join': 0.0006337135614702154, 'cross_join': 0.9809885931558935, 'filter': 0.0038022813688212928, 'summarise': 0.0025348542458808617, 'mutate': 0.0006337135614702154}
[     2.470][MainProcess][INFO] Building synthesizer...
[     2.471][MainProcess][DEBUG] [Line(T1, root=['mutate'], var=[13], children=[Child(['??'], type=Table, var=[1582]),Child(['??'], type=SummariseCondition, var=[1581]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.519][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 48 constraints
[     2.521][MainProcess][DEBUG] Enumeration time: 0.05165600776672363
[     2.563][MainProcess][DEBUG] Synthesis time: 0.04170632362365723
[     2.563][MainProcess][INFO] Solution found: [mutate(input0, 'cumsumcount = cumsum(count)')]
[     2.564][MainProcess][DEBUG] Solution found using process 0
[     2.564][MainProcess][INFO] Statistics:
[     2.565][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     2.565][MainProcess][INFO] 		Rejected: 0 (approx)
[     2.565][MainProcess][INFO] 		Failed: 0 (approx)
[     2.565][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.565][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.565][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.565][MainProcess][INFO] 	Total time spent in enumerator init: 0.051656 (approx)
[     2.565][MainProcess][INFO] 	Total time spent in enumerator: 0.000679 (approx)
[     2.565][MainProcess][INFO] 		Enumerated 1472.719101 programs/s avg. (just enumeration time)
[     2.565][MainProcess][INFO] 		Enumerated 0.532773 programs/s avg. (overall)
[     2.565][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.039148 (approx)
[     2.565][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     2.565][MainProcess][INFO] Solution found: [mutate(input0, 'cumsumcount = cumsum(count)')]
[     2.565][MainProcess][INFO] Solution size: 1
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun bv_1_0_b () (_ BitVec 3))
(declare-fun bv_1_0_a () (_ BitVec 3))
(declare-fun bv_1_1_b () (_ BitVec 3))
(declare-fun bv_1_1_a () (_ BitVec 3))
(declare-fun bv_1_2_b () (_ BitVec 3))
(declare-fun bv_1_2_a () (_ BitVec 3))
(declare-fun bv_1_3_b () (_ BitVec 3))
(declare-fun bv_1_3_a () (_ BitVec 3))
(declare-fun bv_1 () (_ BitVec 3))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 13)))
(assert (or (= leaf_1_0 1582)))
(assert (<= leaf_1_0 1582))
(assert (>= leaf_1_0 1582))
(assert (or (= leaf_1_1 1581)))
(assert (<= leaf_1_1 1581))
(assert (>= leaf_1_1 1581))
(assert (or (= leaf_1_2 0)))
(assert (<= leaf_1_2 0))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (or (= leaf_1_0 1582) (= leaf_1_1 1582) (= leaf_1_2 1582) (= leaf_1_3 1582)))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_1 13)
    (or (and (= leaf_1_0 1582) (= #b011 bv_1_0_a) (= #b000 bv_1_0_b)))))
(assert (=> (= root_1 13)
    (or (and (= leaf_1_1 1581) (= #b001 bv_1_1_a) (= #b100 bv_1_1_b)))))
(assert (=> (= root_1 13) (and (= leaf_1_2 0) (= #b000 bv_1_2_a) (= #b000 bv_1_2_b))))
(assert (=> (= root_1 13) (and (= leaf_1_3 0) (= #b000 bv_1_3_a) (= #b000 bv_1_3_b))))
(assert (or (= leaf_1_0 1581) (= leaf_1_1 1581) (= leaf_1_2 1581) (= leaf_1_3 1581)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000 bv_1_2_a)
                    (distinct #b000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i054 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i054.csv", col_types = cols("created_at" = col_character(),"count" = col_integer()))
df_i054$created_at <- mdy(df_i054$created_at)
df_i054 <- copy_to(con, df_i054)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o054.csv", col_types = cols("created_at" = col_character(),"count" = col_integer()))
expected_output$created_at <- mdy(expected_output$created_at)

df2 <- df_i054 %>% mutate(cumsumcount = cumsum(count))
out <- df2 %>% select(created_at, count = cumsumcount)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT created_at,
       SUM(COUNT) OVER (ROWS UNBOUNDED PRECEDING) AS COUNT
FROM df_i054
