[     2.363][MainProcess][INFO] Parsing specification...
[     2.370][MainProcess][INFO] File read
[     2.371][MainProcess][DEBUG] Reading input files...
[     2.381][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i017.csv: ['int64', 'string', 'string']
[     2.388][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o017.csv: ['int64', 'string', 'string']
[     2.388][MainProcess][INFO] Parsing sketch...
[     2.389][MainProcess][DEBUG] Sketch creation: Line(T1, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.389][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.389][MainProcess][DEBUG] Sketch creation: Line(T3, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.457][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 22, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 1256, 'filter': 32, 'summarise': 14, 'mutate': 2}
[     2.457][MainProcess][DEBUG] {'natural_join': 0.0007451564828614009, 'natural_join3': 0.0007451564828614009, 'natural_join4': 0.0007451564828614009, 'inner_join': 0.01639344262295082, 'anti_join': 0.005216095380029807, 'left_join': 0.0007451564828614009, 'union': 0.0007451564828614009, 'intersect': 0.0022354694485842027, 'semi_join': 0.0007451564828614009, 'cross_join': 0.9359165424739195, 'filter': 0.02384500745156483, 'summarise': 0.010432190760059613, 'mutate': 0.0014903129657228018}
[     2.457][MainProcess][DEBUG] {'natural_join': 0.0007451564828614009, 'natural_join3': 0.0007451564828614009, 'natural_join4': 0.0007451564828614009, 'inner_join': 0.01639344262295082, 'anti_join': 0.005216095380029807, 'left_join': 0.0007451564828614009, 'union': 0.0007451564828614009, 'intersect': 0.0022354694485842027, 'semi_join': 0.0007451564828614009, 'cross_join': 0.9359165424739195, 'filter': 0.02384500745156483, 'summarise': 0.010432190760059613, 'mutate': 0.0014903129657228018}
[     2.457][MainProcess][INFO] Building synthesizer...
[     2.459][MainProcess][DEBUG] [Line(T1, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[1336]),Child(['??'], type=FilterCondition, var=[1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[1336]),Child(['??'], type=SummariseCondition, var=[1334, 1335]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])]), Line(T3, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[1336]),Child(['??'], type=Table, var=[1336]),Child(['??'], type=JoinCondition, var=[24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]),Child([None], type=None, var=[0])])]
[     2.787][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 166 constraints
[     2.797][MainProcess][DEBUG] Enumeration time: 0.33942127227783203
[     4.474][MainProcess][DEBUG] Synthesis time: 1.6766610145568848
[     4.475][MainProcess][INFO] Solution found: [filter(input0, "str_detect(SKU, 'FOO-', negate=TRUE)"), summarise(input0, 'ID = min(ID)', 'PRODUCT'), inner_join(input0, line1, 'ID')]
[     4.479][MainProcess][DEBUG] Solution found using process 0
[     4.480][MainProcess][INFO] Statistics:
[     4.480][MainProcess][INFO] 	Attempted programs: 186 (approx)
[     4.480][MainProcess][INFO] 		Rejected: 185 (approx)
[     4.480][MainProcess][INFO] 		Failed: 0 (approx)
[     4.480][MainProcess][INFO] 		Empty outputs: 91 (48.9%) (approx)
[     4.480][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     4.480][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     4.480][MainProcess][INFO] 	Total time spent in enumerator init: 0.339421 (approx)
[     4.480][MainProcess][INFO] 	Total time spent in enumerator: 0.406407 (approx)
[     4.480][MainProcess][INFO] 		Enumerated 457.668881 programs/s avg. (just enumeration time)
[     4.480][MainProcess][INFO] 		Enumerated 49.140755 programs/s avg. (overall)
[     4.480][MainProcess][INFO] 	Total time spent in evaluation & testing: 1.107722 (approx)
[     4.481][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.160664 (approx)
[     4.481][MainProcess][INFO] Solution found: [filter(input0, "str_detect(SKU, 'FOO-', negate=TRUE)"), summarise(input0, 'ID = min(ID)', 'PRODUCT'), inner_join(input0, line1, 'ID')]
[     4.481][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_2_0_b () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(declare-fun bv_2_0_a () (_ BitVec 4))
(declare-fun bv_2_1_b () (_ BitVec 4))
(declare-fun bv_2_1_a () (_ BitVec 4))
(declare-fun bv_2_2_b () (_ BitVec 4))
(declare-fun bv_2_2_a () (_ BitVec 4))
(declare-fun bv_2_3_b () (_ BitVec 4))
(declare-fun bv_2_3_a () (_ BitVec 4))
(declare-fun bv_3_0_b () (_ BitVec 4))
(declare-fun bv_2 () (_ BitVec 4))
(declare-fun bv_3_0_a () (_ BitVec 4))
(declare-fun bv_3_1_b () (_ BitVec 4))
(declare-fun bv_3_1_a () (_ BitVec 4))
(declare-fun bv_3_2_b () (_ BitVec 4))
(declare-fun bv_3_2_a () (_ BitVec 4))
(declare-fun bv_3_3_b () (_ BitVec 4))
(declare-fun bv_3_3_a () (_ BitVec 4))
(declare-fun bv_3 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 11)))
(assert (or (= leaf_1_0 1336)))
(assert (<= leaf_1_0 1336))
(assert (>= leaf_1_0 1336))
(assert (or (= leaf_1_1 1302)
    (= leaf_1_1 1303)
    (= leaf_1_1 1304)
    (= leaf_1_1 1305)
    (= leaf_1_1 1306)
    (= leaf_1_1 1307)
    (= leaf_1_1 1308)
    (= leaf_1_1 1309)
    (= leaf_1_1 1310)
    (= leaf_1_1 1311)
    (= leaf_1_1 1312)
    (= leaf_1_1 1313)
    (= leaf_1_1 1314)
    (= leaf_1_1 1315)
    (= leaf_1_1 1316)
    (= leaf_1_1 1317)
    (= leaf_1_1 1318)
    (= leaf_1_1 1319)
    (= leaf_1_1 1320)
    (= leaf_1_1 1321)
    (= leaf_1_1 1322)
    (= leaf_1_1 1323)
    (= leaf_1_1 1324)
    (= leaf_1_1 1325)
    (= leaf_1_1 1326)
    (= leaf_1_1 1327)
    (= leaf_1_1 1328)
    (= leaf_1_1 1329)
    (= leaf_1_1 1330)
    (= leaf_1_1 1331)
    (= leaf_1_1 1332)
    (= leaf_1_1 1333)))
(assert (<= leaf_1_1 1333))
(assert (>= leaf_1_1 1302))
(assert (or (= leaf_1_2 0)))
(assert (<= leaf_1_2 0))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 12)))
(assert (or (= leaf_2_0 1336) (= leaf_2_0 1338)))
(assert (<= leaf_2_0 1338))
(assert (>= leaf_2_0 1336))
(assert (or (= leaf_2_1 1334) (= leaf_2_1 1335)))
(assert (<= leaf_2_1 1335))
(assert (>= leaf_2_1 1334))
(assert (or (= leaf_2_2 17)
    (= leaf_2_2 18)
    (= leaf_2_2 19)
    (= leaf_2_2 20)
    (= leaf_2_2 21)
    (= leaf_2_2 22)
    (= leaf_2_2 23)))
(assert (<= leaf_2_2 23))
(assert (>= leaf_2_2 17))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 4)))
(assert (or (= leaf_3_0 1336) (= leaf_3_0 1338) (= leaf_3_0 1339)))
(assert (<= leaf_3_0 1339))
(assert (>= leaf_3_0 1336))
(assert (or (= leaf_3_1 1336) (= leaf_3_1 1338) (= leaf_3_1 1339)))
(assert (<= leaf_3_1 1339))
(assert (>= leaf_3_1 1336))
(assert (or (= leaf_3_2 24)
    (= leaf_3_2 25)
    (= leaf_3_2 26)
    (= leaf_3_2 27)
    (= leaf_3_2 28)
    (= leaf_3_2 29)
    (= leaf_3_2 30)
    (= leaf_3_2 31)
    (= leaf_3_2 32)
    (= leaf_3_2 33)
    (= leaf_3_2 34)
    (= leaf_3_2 35)
    (= leaf_3_2 36)
    (= leaf_3_2 37)
    (= leaf_3_2 38)
    (= leaf_3_2 39)
    (= leaf_3_2 40)
    (= leaf_3_2 41)
    (= leaf_3_2 42)
    (= leaf_3_2 43)
    (= leaf_3_2 44)
    (= leaf_3_2 45)))
(assert (<= leaf_3_2 45))
(assert (>= leaf_3_2 24))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 1336)
    (= leaf_1_1 1336)
    (= leaf_1_2 1336)
    (= leaf_1_3 1336)
    (= leaf_2_0 1336)
    (= leaf_2_1 1336)
    (= leaf_2_2 1336)
    (= leaf_2_3 1336)
    (= leaf_3_0 1336)
    (= leaf_3_1 1336)
    (= leaf_3_2 1336)
    (= leaf_3_3 1336)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_1 11)
    (or (and (= leaf_1_0 1336) (= #x7 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 11)
    (or (and (= leaf_1_1 1302) (= #x4 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1303) (= #x4 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1304) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1305) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1306) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1307) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1308) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1309) (= #x9 bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1310) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1311) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1312) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1313) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1314) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1315) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1316) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1317) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1318) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1319) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1320) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1321) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1322) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1323) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1324) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1325) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1326) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1327) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1328) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1329) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1330) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1331) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1332) (= #xd bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 1333) (= #xd bv_1_1_a) (= #x0 bv_1_1_b)))))
(assert (=> (= root_1 11) (and (= leaf_1_2 0) (= #x0 bv_1_2_a) (= #x0 bv_1_2_b))))
(assert (=> (= root_1 11) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 1338)))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_0 1336) (= #x7 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 1338) (= bv_2_0_a bv_1) (= #x0 bv_2_0_b)))))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_1 1334) (= #x1 bv_2_1_a) (= #x1 bv_2_1_b))
        (and (= leaf_2_1 1335) (= #x1 bv_2_1_a) (= #x8 bv_2_1_b)))))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_2 17) (= #x0 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 18) (= #x1 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 19) (= #x2 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 20) (= #x4 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 21) (= #x3 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 22) (= #x5 bv_2_2_a) (= #x0 bv_2_2_b))
        (and (= leaf_2_2 23) (= #x6 bv_2_2_a) (= #x0 bv_2_2_b)))))
(assert (=> (= root_2 12) (and (= leaf_2_3 0) (= #x0 bv_2_3_a) (= #x0 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 1338)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 1339)))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_0 1336) (= #x7 bv_3_0_a) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 1338) (= bv_3_0_a bv_1) (= #x0 bv_3_0_b))
        (and (= leaf_3_0 1339) (= bv_3_0_a bv_2) (= #x0 bv_3_0_b)))))
(assert (= leaf_3_1_is_line_1 (= leaf_3_1 1338)))
(assert (= leaf_3_1_is_line_2 (= leaf_3_1 1339)))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_1 1336) (= #x7 bv_3_1_a) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 1338) (= bv_3_1_a bv_1) (= #x0 bv_3_1_b))
        (and (= leaf_3_1 1339) (= bv_3_1_a bv_2) (= #x0 bv_3_1_b)))))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_2 24) (= #x5 bv_3_2_a) (= #x3 bv_3_2_b))
        (and (= leaf_3_2 25) (= #x3 bv_3_2_a) (= #x5 bv_3_2_b))
        (and (= leaf_3_2 26) (= #x9 bv_3_2_a) (= #x9 bv_3_2_b))
        (and (= leaf_3_2 27) (= #x5 bv_3_2_a) (= #xc bv_3_2_b))
        (and (= leaf_3_2 28) (= #x5 bv_3_2_a) (= #xa bv_3_2_b))
        (and (= leaf_3_2 29) (= #x3 bv_3_2_a) (= #xc bv_3_2_b))
        (and (= leaf_3_2 30) (= #x3 bv_3_2_a) (= #xa bv_3_2_b))
        (and (= leaf_3_2 31) (= #xc bv_3_2_a) (= #x5 bv_3_2_b))
        (and (= leaf_3_2 32) (= #xc bv_3_2_a) (= #x3 bv_3_2_b))
        (and (= leaf_3_2 33) (= #xa bv_3_2_a) (= #x5 bv_3_2_b))
        (and (= leaf_3_2 34) (= #xa bv_3_2_a) (= #x3 bv_3_2_b))
        (and (= leaf_3_2 35) (= #xc bv_3_2_a) (= #xa bv_3_2_b))
        (and (= leaf_3_2 36) (= #xa bv_3_2_a) (= #xc bv_3_2_b))
        (and (= leaf_3_2 37) (= #x6 bv_3_2_a) (= #x6 bv_3_2_b))
        (and (= leaf_3_2 38) (= #x1 bv_3_2_a) (= #x8 bv_3_2_b))
        (and (= leaf_3_2 39) (= #x4 bv_3_2_a) (= #x2 bv_3_2_b))
        (and (= leaf_3_2 40) (= #x1 bv_3_2_a) (= #x1 bv_3_2_b))
        (and (= leaf_3_2 41) (= #x2 bv_3_2_a) (= #x2 bv_3_2_b))
        (and (= leaf_3_2 42) (= #x4 bv_3_2_a) (= #x4 bv_3_2_b))
        (and (= leaf_3_2 43) (= #x3 bv_3_2_a) (= #x3 bv_3_2_b))
        (and (= leaf_3_2 44) (= #x5 bv_3_2_a) (= #x5 bv_3_2_b))
        (and (= leaf_3_2 45) (= #x6 bv_3_2_a) (= #x6 bv_3_2_b)))))
(assert (=> (= root_3 4) (and (= leaf_3_3 0) (= #x0 bv_3_3_a) (= #x0 bv_3_3_b))))
(assert (or (= leaf_1_0 1334)
    (= leaf_1_1 1334)
    (= leaf_1_2 1334)
    (= leaf_1_3 1334)
    (= leaf_2_0 1334)
    (= leaf_2_1 1334)
    (= leaf_2_2 1334)
    (= leaf_2_3 1334)
    (= leaf_3_0 1334)
    (= leaf_3_1 1334)
    (= leaf_3_2 1334)
    (= leaf_3_3 1334)
    (= leaf_1_0 1335)
    (= leaf_1_1 1335)
    (= leaf_1_2 1335)
    (= leaf_1_3 1335)
    (= leaf_2_0 1335)
    (= leaf_2_1 1335)
    (= leaf_2_2 1335)
    (= leaf_2_3 1335)
    (= leaf_3_0 1335)
    (= leaf_3_1 1335)
    (= leaf_3_2 1335)
    (= leaf_3_3 1335)))
(assert (or (= leaf_1_0 1302)
    (= leaf_1_1 1302)
    (= leaf_1_2 1302)
    (= leaf_1_3 1302)
    (= leaf_2_0 1302)
    (= leaf_2_1 1302)
    (= leaf_2_2 1302)
    (= leaf_2_3 1302)
    (= leaf_3_0 1302)
    (= leaf_3_1 1302)
    (= leaf_3_2 1302)
    (= leaf_3_3 1302)
    (= leaf_1_0 1303)
    (= leaf_1_1 1303)
    (= leaf_1_2 1303)
    (= leaf_1_3 1303)
    (= leaf_2_0 1303)
    (= leaf_2_1 1303)
    (= leaf_2_2 1303)
    (= leaf_2_3 1303)
    (= leaf_3_0 1303)
    (= leaf_3_1 1303)
    (= leaf_3_2 1303)
    (= leaf_3_3 1303)
    (= leaf_1_0 1311)
    (= leaf_1_1 1311)
    (= leaf_1_2 1311)
    (= leaf_1_3 1311)
    (= leaf_2_0 1311)
    (= leaf_2_1 1311)
    (= leaf_2_2 1311)
    (= leaf_2_3 1311)
    (= leaf_3_0 1311)
    (= leaf_3_1 1311)
    (= leaf_3_2 1311)
    (= leaf_3_3 1311)
    (= leaf_1_0 1310)
    (= leaf_1_1 1310)
    (= leaf_1_2 1310)
    (= leaf_1_3 1310)
    (= leaf_2_0 1310)
    (= leaf_2_1 1310)
    (= leaf_2_2 1310)
    (= leaf_2_3 1310)
    (= leaf_3_0 1310)
    (= leaf_3_1 1310)
    (= leaf_3_2 1310)
    (= leaf_3_3 1310)
    (= leaf_1_0 1313)
    (= leaf_1_1 1313)
    (= leaf_1_2 1313)
    (= leaf_1_3 1313)
    (= leaf_2_0 1313)
    (= leaf_2_1 1313)
    (= leaf_2_2 1313)
    (= leaf_2_3 1313)
    (= leaf_3_0 1313)
    (= leaf_3_1 1313)
    (= leaf_3_2 1313)
    (= leaf_3_3 1313)
    (= leaf_1_0 1312)
    (= leaf_1_1 1312)
    (= leaf_1_2 1312)
    (= leaf_1_3 1312)
    (= leaf_2_0 1312)
    (= leaf_2_1 1312)
    (= leaf_2_2 1312)
    (= leaf_2_3 1312)
    (= leaf_3_0 1312)
    (= leaf_3_1 1312)
    (= leaf_3_2 1312)
    (= leaf_3_3 1312)
    (= leaf_1_0 1315)
    (= leaf_1_1 1315)
    (= leaf_1_2 1315)
    (= leaf_1_3 1315)
    (= leaf_2_0 1315)
    (= leaf_2_1 1315)
    (= leaf_2_2 1315)
    (= leaf_2_3 1315)
    (= leaf_3_0 1315)
    (= leaf_3_1 1315)
    (= leaf_3_2 1315)
    (= leaf_3_3 1315)
    (= leaf_1_0 1314)
    (= leaf_1_1 1314)
    (= leaf_1_2 1314)
    (= leaf_1_3 1314)
    (= leaf_2_0 1314)
    (= leaf_2_1 1314)
    (= leaf_2_2 1314)
    (= leaf_2_3 1314)
    (= leaf_3_0 1314)
    (= leaf_3_1 1314)
    (= leaf_3_2 1314)
    (= leaf_3_3 1314)
    (= leaf_1_0 1317)
    (= leaf_1_1 1317)
    (= leaf_1_2 1317)
    (= leaf_1_3 1317)
    (= leaf_2_0 1317)
    (= leaf_2_1 1317)
    (= leaf_2_2 1317)
    (= leaf_2_3 1317)
    (= leaf_3_0 1317)
    (= leaf_3_1 1317)
    (= leaf_3_2 1317)
    (= leaf_3_3 1317)
    (= leaf_1_0 1316)
    (= leaf_1_1 1316)
    (= leaf_1_2 1316)
    (= leaf_1_3 1316)
    (= leaf_2_0 1316)
    (= leaf_2_1 1316)
    (= leaf_2_2 1316)
    (= leaf_2_3 1316)
    (= leaf_3_0 1316)
    (= leaf_3_1 1316)
    (= leaf_3_2 1316)
    (= leaf_3_3 1316)
    (= leaf_1_0 1319)
    (= leaf_1_1 1319)
    (= leaf_1_2 1319)
    (= leaf_1_3 1319)
    (= leaf_2_0 1319)
    (= leaf_2_1 1319)
    (= leaf_2_2 1319)
    (= leaf_2_3 1319)
    (= leaf_3_0 1319)
    (= leaf_3_1 1319)
    (= leaf_3_2 1319)
    (= leaf_3_3 1319)
    (= leaf_1_0 1318)
    (= leaf_1_1 1318)
    (= leaf_1_2 1318)
    (= leaf_1_3 1318)
    (= leaf_2_0 1318)
    (= leaf_2_1 1318)
    (= leaf_2_2 1318)
    (= leaf_2_3 1318)
    (= leaf_3_0 1318)
    (= leaf_3_1 1318)
    (= leaf_3_2 1318)
    (= leaf_3_3 1318)
    (= leaf_1_0 1321)
    (= leaf_1_1 1321)
    (= leaf_1_2 1321)
    (= leaf_1_3 1321)
    (= leaf_2_0 1321)
    (= leaf_2_1 1321)
    (= leaf_2_2 1321)
    (= leaf_2_3 1321)
    (= leaf_3_0 1321)
    (= leaf_3_1 1321)
    (= leaf_3_2 1321)
    (= leaf_3_3 1321)
    (= leaf_1_0 1320)
    (= leaf_1_1 1320)
    (= leaf_1_2 1320)
    (= leaf_1_3 1320)
    (= leaf_2_0 1320)
    (= leaf_2_1 1320)
    (= leaf_2_2 1320)
    (= leaf_2_3 1320)
    (= leaf_3_0 1320)
    (= leaf_3_1 1320)
    (= leaf_3_2 1320)
    (= leaf_3_3 1320)
    (= leaf_1_0 1323)
    (= leaf_1_1 1323)
    (= leaf_1_2 1323)
    (= leaf_1_3 1323)
    (= leaf_2_0 1323)
    (= leaf_2_1 1323)
    (= leaf_2_2 1323)
    (= leaf_2_3 1323)
    (= leaf_3_0 1323)
    (= leaf_3_1 1323)
    (= leaf_3_2 1323)
    (= leaf_3_3 1323)
    (= leaf_1_0 1322)
    (= leaf_1_1 1322)
    (= leaf_1_2 1322)
    (= leaf_1_3 1322)
    (= leaf_2_0 1322)
    (= leaf_2_1 1322)
    (= leaf_2_2 1322)
    (= leaf_2_3 1322)
    (= leaf_3_0 1322)
    (= leaf_3_1 1322)
    (= leaf_3_2 1322)
    (= leaf_3_3 1322)
    (= leaf_1_0 1325)
    (= leaf_1_1 1325)
    (= leaf_1_2 1325)
    (= leaf_1_3 1325)
    (= leaf_2_0 1325)
    (= leaf_2_1 1325)
    (= leaf_2_2 1325)
    (= leaf_2_3 1325)
    (= leaf_3_0 1325)
    (= leaf_3_1 1325)
    (= leaf_3_2 1325)
    (= leaf_3_3 1325)
    (= leaf_1_0 1324)
    (= leaf_1_1 1324)
    (= leaf_1_2 1324)
    (= leaf_1_3 1324)
    (= leaf_2_0 1324)
    (= leaf_2_1 1324)
    (= leaf_2_2 1324)
    (= leaf_2_3 1324)
    (= leaf_3_0 1324)
    (= leaf_3_1 1324)
    (= leaf_3_2 1324)
    (= leaf_3_3 1324)
    (= leaf_1_0 1327)
    (= leaf_1_1 1327)
    (= leaf_1_2 1327)
    (= leaf_1_3 1327)
    (= leaf_2_0 1327)
    (= leaf_2_1 1327)
    (= leaf_2_2 1327)
    (= leaf_2_3 1327)
    (= leaf_3_0 1327)
    (= leaf_3_1 1327)
    (= leaf_3_2 1327)
    (= leaf_3_3 1327)
    (= leaf_1_0 1326)
    (= leaf_1_1 1326)
    (= leaf_1_2 1326)
    (= leaf_1_3 1326)
    (= leaf_2_0 1326)
    (= leaf_2_1 1326)
    (= leaf_2_2 1326)
    (= leaf_2_3 1326)
    (= leaf_3_0 1326)
    (= leaf_3_1 1326)
    (= leaf_3_2 1326)
    (= leaf_3_3 1326)
    (= leaf_1_0 1329)
    (= leaf_1_1 1329)
    (= leaf_1_2 1329)
    (= leaf_1_3 1329)
    (= leaf_2_0 1329)
    (= leaf_2_1 1329)
    (= leaf_2_2 1329)
    (= leaf_2_3 1329)
    (= leaf_3_0 1329)
    (= leaf_3_1 1329)
    (= leaf_3_2 1329)
    (= leaf_3_3 1329)
    (= leaf_1_0 1328)
    (= leaf_1_1 1328)
    (= leaf_1_2 1328)
    (= leaf_1_3 1328)
    (= leaf_2_0 1328)
    (= leaf_2_1 1328)
    (= leaf_2_2 1328)
    (= leaf_2_3 1328)
    (= leaf_3_0 1328)
    (= leaf_3_1 1328)
    (= leaf_3_2 1328)
    (= leaf_3_3 1328)
    (= leaf_1_0 1331)
    (= leaf_1_1 1331)
    (= leaf_1_2 1331)
    (= leaf_1_3 1331)
    (= leaf_2_0 1331)
    (= leaf_2_1 1331)
    (= leaf_2_2 1331)
    (= leaf_2_3 1331)
    (= leaf_3_0 1331)
    (= leaf_3_1 1331)
    (= leaf_3_2 1331)
    (= leaf_3_3 1331)
    (= leaf_1_0 1330)
    (= leaf_1_1 1330)
    (= leaf_1_2 1330)
    (= leaf_1_3 1330)
    (= leaf_2_0 1330)
    (= leaf_2_1 1330)
    (= leaf_2_2 1330)
    (= leaf_2_3 1330)
    (= leaf_3_0 1330)
    (= leaf_3_1 1330)
    (= leaf_3_2 1330)
    (= leaf_3_3 1330)
    (= leaf_1_0 1333)
    (= leaf_1_1 1333)
    (= leaf_1_2 1333)
    (= leaf_1_3 1333)
    (= leaf_2_0 1333)
    (= leaf_2_1 1333)
    (= leaf_2_2 1333)
    (= leaf_2_3 1333)
    (= leaf_3_0 1333)
    (= leaf_3_1 1333)
    (= leaf_3_2 1333)
    (= leaf_3_3 1333)
    (= leaf_1_0 1332)
    (= leaf_1_1 1332)
    (= leaf_1_2 1332)
    (= leaf_1_3 1332)
    (= leaf_2_0 1332)
    (= leaf_2_1 1332)
    (= leaf_2_2 1332)
    (= leaf_2_3 1332)
    (= leaf_3_0 1332)
    (= leaf_3_1 1332)
    (= leaf_3_2 1332)
    (= leaf_3_3 1332)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #x0 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #x0 bv_2_2_a) (distinct #x0 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #x0 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #x0 bv_3_2_a) (distinct #x0 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #x0 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #x0 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #x0 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i017 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i017.csv", col_types = cols("ID" = col_integer(),"SKU" = col_character(),"PRODUCT" = col_character()))
df_i017 <- copy_to(con, df_i017)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o017.csv", col_types = cols("ID" = col_integer(),"SKU" = col_character(),"PRODUCT" = col_character()))

df41 <- df_i017 %>% filter(str_detect(SKU, 'FOO-', negate=TRUE))
df42 <- df_i017 %>% group_by(PRODUCT) %>% summarise(ID = min(ID)) %>% ungroup()
df43 <- inner_join(df_i017, df42, by=c('ID'), suffix = c('', '.other'), na_matches='never')
out <- df43 %>% select(ID, SKU, PRODUCT)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       SKU,
       PRODUCT
FROM
  (SELECT LHS.ID AS ID,
          SKU,
          LHS.PRODUCT AS PRODUCT,
          RHS.PRODUCT AS PRODUCT_other
   FROM df_i017 AS LHS
   INNER JOIN
     (SELECT PRODUCT,
             MIN(ID) AS ID
      FROM df_i017
      GROUP BY PRODUCT) AS RHS ON (LHS.ID = RHS.ID))
