[     2.361][MainProcess][INFO] Parsing specification...
[     2.366][MainProcess][INFO] File read
[     2.367][MainProcess][DEBUG] Reading input files...
[     2.376][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i005.csv: ['int64', 'string', 'int64']
[     2.382][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o005.csv: ['int64', 'string', 'int64']
[     2.382][MainProcess][INFO] Parsing sketch...
[     2.382][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.382][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.382][MainProcess][DEBUG] Sketch creation: Line(T3, root=['left_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     6.859][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 486, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 147186, 'filter': 7650, 'summarise': 56, 'mutate': 8}
[     6.859][MainProcess][DEBUG] {'natural_join': 6.4349236174566605e-06, 'natural_join3': 6.4349236174566605e-06, 'natural_join4': 6.4349236174566605e-06, 'inner_join': 0.003127372878083937, 'anti_join': 4.5044465322196625e-05, 'left_join': 6.4349236174566605e-06, 'union': 6.4349236174566605e-06, 'intersect': 1.9304770852369983e-05, 'semi_join': 6.4349236174566605e-06, 'cross_join': 0.9471306675589761, 'filter': 0.04922716567354345, 'summarise': 0.000360355722577573, 'mutate': 5.1479388939653284e-05}
[     6.860][MainProcess][DEBUG] {'natural_join': 6.4349236174566605e-06, 'natural_join3': 6.4349236174566605e-06, 'natural_join4': 6.4349236174566605e-06, 'inner_join': 0.003127372878083937, 'anti_join': 4.5044465322196625e-05, 'left_join': 6.4349236174566605e-06, 'union': 6.4349236174566605e-06, 'intersect': 1.9304770852369983e-05, 'semi_join': 6.4349236174566605e-06, 'cross_join': 0.9471306675589761, 'filter': 0.04922716567354345, 'summarise': 0.000360355722577573, 'mutate': 5.1479388939653284e-05}
[     6.860][MainProcess][INFO] Building synthesizer...
[     6.894][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[155354]),Child(['??'], type=SummariseCondition, var=[155346, 155347, 155348, 155349, 155350, 155351, 155352, 155353]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[155354]),Child(['??'], type=SummariseCondition, var=[155346, 155347, 155348, 155349, 155350, 155351, 155352, 155353]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])]), Line(T3, root=['left_join'], var=[6], children=[Child(['??'], type=Table, var=[155354]),Child(['??'], type=Table, var=[155354]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     8.153][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 166 constraints
[     8.161][MainProcess][DEBUG] Enumeration time: 1.3014817237854004
[    21.808][MainProcess][DEBUG] Synthesis time: 13.646344900131226
[    21.808][MainProcess][INFO] Solution found: [summarise(input0, 'id = min(id)', 'total'), summarise(input0, 'total = max(total)', 'customer'), left_join(line1, line0)]
[    21.870][MainProcess][DEBUG] Solution found using process 0
[    21.871][MainProcess][INFO] Statistics:
[    21.871][MainProcess][INFO] 	Attempted programs: 956 (approx)
[    21.871][MainProcess][INFO] 		Rejected: 955 (approx)
[    21.871][MainProcess][INFO] 		Failed: 0 (approx)
[    21.871][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[    21.871][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    21.871][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    21.871][MainProcess][INFO] 	Total time spent in enumerator init: 1.301482 (approx)
[    21.871][MainProcess][INFO] 	Total time spent in enumerator: 2.733815 (approx)
[    21.872][MainProcess][INFO] 		Enumerated 349.694450 programs/s avg. (just enumeration time)
[    21.872][MainProcess][INFO] 		Enumerated 45.136661 programs/s avg. (overall)
[    21.872][MainProcess][INFO] 	Total time spent in evaluation & testing: 10.004746 (approx)
[    21.872][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.903128 (approx)
[    21.872][MainProcess][INFO] Solution found: [summarise(input0, 'id = min(id)', 'total'), summarise(input0, 'total = max(total)', 'customer'), left_join(line1, line0)]
[    21.872][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 7))
(declare-fun bv_1_0_a () (_ BitVec 7))
(declare-fun bv_1_1_b () (_ BitVec 7))
(declare-fun bv_1_1_a () (_ BitVec 7))
(declare-fun bv_1_2_b () (_ BitVec 7))
(declare-fun bv_1_2_a () (_ BitVec 7))
(declare-fun bv_1_3_b () (_ BitVec 7))
(declare-fun bv_1_3_a () (_ BitVec 7))
(declare-fun bv_2_0_b () (_ BitVec 7))
(declare-fun bv_1 () (_ BitVec 7))
(declare-fun bv_2_0_a () (_ BitVec 7))
(declare-fun bv_2_1_b () (_ BitVec 7))
(declare-fun bv_2_1_a () (_ BitVec 7))
(declare-fun bv_2_2_b () (_ BitVec 7))
(declare-fun bv_2_2_a () (_ BitVec 7))
(declare-fun bv_2_3_b () (_ BitVec 7))
(declare-fun bv_2_3_a () (_ BitVec 7))
(declare-fun bv_3_0_b () (_ BitVec 7))
(declare-fun bv_2 () (_ BitVec 7))
(declare-fun bv_3_0_a () (_ BitVec 7))
(declare-fun bv_3_1_b () (_ BitVec 7))
(declare-fun bv_3_1_a () (_ BitVec 7))
(declare-fun bv_3_2_b () (_ BitVec 7))
(declare-fun bv_3_2_a () (_ BitVec 7))
(declare-fun bv_3_3_b () (_ BitVec 7))
(declare-fun bv_3_3_a () (_ BitVec 7))
(declare-fun bv_3 () (_ BitVec 7))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 155354)))
(assert (<= leaf_1_0 155354))
(assert (>= leaf_1_0 155354))
(assert (or (= leaf_1_1 155346)
    (= leaf_1_1 155347)
    (= leaf_1_1 155348)
    (= leaf_1_1 155349)
    (= leaf_1_1 155350)
    (= leaf_1_1 155351)
    (= leaf_1_1 155352)
    (= leaf_1_1 155353)))
(assert (<= leaf_1_1 155353))
(assert (>= leaf_1_1 155346))
(assert (or (= leaf_1_2 17)
    (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)))
(assert (<= leaf_1_2 23))
(assert (>= leaf_1_2 17))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 12)))
(assert (or (= leaf_2_0 155354) (= leaf_2_0 155356)))
(assert (<= leaf_2_0 155356))
(assert (>= leaf_2_0 155354))
(assert (or (= leaf_2_1 155346)
    (= leaf_2_1 155347)
    (= leaf_2_1 155348)
    (= leaf_2_1 155349)
    (= leaf_2_1 155350)
    (= leaf_2_1 155351)
    (= leaf_2_1 155352)
    (= leaf_2_1 155353)))
(assert (<= leaf_2_1 155353))
(assert (>= leaf_2_1 155346))
(assert (or (= leaf_2_2 17)
    (= leaf_2_2 18)
    (= leaf_2_2 19)
    (= leaf_2_2 20)
    (= leaf_2_2 21)
    (= leaf_2_2 22)
    (= leaf_2_2 23)))
(assert (<= leaf_2_2 23))
(assert (>= leaf_2_2 17))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 6)))
(assert (or (= leaf_3_0 155354) (= leaf_3_0 155356) (= leaf_3_0 155357)))
(assert (<= leaf_3_0 155357))
(assert (>= leaf_3_0 155354))
(assert (or (= leaf_3_1 155354) (= leaf_3_1 155356) (= leaf_3_1 155357)))
(assert (<= leaf_3_1 155357))
(assert (>= leaf_3_1 155354))
(assert (or (= leaf_3_2 0)))
(assert (<= leaf_3_2 0))
(assert (>= leaf_3_2 0))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 155354)
    (= leaf_1_1 155354)
    (= leaf_1_2 155354)
    (= leaf_1_3 155354)
    (= leaf_2_0 155354)
    (= leaf_2_1 155354)
    (= leaf_2_2 155354)
    (= leaf_2_3 155354)
    (= leaf_3_0 155354)
    (= leaf_3_1 155354)
    (= leaf_3_2 155354)
    (= leaf_3_3 155354)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 155354) (= #b0000111 bv_1_0_a) (= #b0000000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 155346) (= #b0000010 bv_1_1_a) (= #b0000010 bv_1_1_b))
        (and (= leaf_1_1 155347) (= #b0000010 bv_1_1_a) (= #b0001000 bv_1_1_b))
        (and (= leaf_1_1 155348) (= #b0000100 bv_1_1_a) (= #b0000100 bv_1_1_b))
        (and (= leaf_1_1 155349) (= #b0000100 bv_1_1_a) (= #b0010000 bv_1_1_b))
        (and (= leaf_1_1 155350) (= #b0000010 bv_1_1_a) (= #b0000010 bv_1_1_b))
        (and (= leaf_1_1 155351) (= #b0000010 bv_1_1_a) (= #b0100000 bv_1_1_b))
        (and (= leaf_1_1 155352) (= #b0000100 bv_1_1_a) (= #b0000100 bv_1_1_b))
        (and (= leaf_1_1 155353) (= #b0000100 bv_1_1_a) (= #b1000000 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 17) (= #b0000000 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 18) (= #b0000001 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b0000010 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 20) (= #b0000100 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b0000011 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b0000101 bv_1_2_a) (= #b0000000 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b0000110 bv_1_2_a) (= #b0000000 bv_1_2_b)))))
(assert (=> (= root_1 12)
    (and (= leaf_1_3 0) (= #b0000000 bv_1_3_a) (= #b0000000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 155356)))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_0 155354) (= #b0000111 bv_2_0_a) (= #b0000000 bv_2_0_b))
        (and (= leaf_2_0 155356) (= bv_2_0_a bv_1) (= #b0000000 bv_2_0_b)))))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_1 155346) (= #b0000010 bv_2_1_a) (= #b0000010 bv_2_1_b))
        (and (= leaf_2_1 155347) (= #b0000010 bv_2_1_a) (= #b0001000 bv_2_1_b))
        (and (= leaf_2_1 155348) (= #b0000100 bv_2_1_a) (= #b0000100 bv_2_1_b))
        (and (= leaf_2_1 155349) (= #b0000100 bv_2_1_a) (= #b0010000 bv_2_1_b))
        (and (= leaf_2_1 155350) (= #b0000010 bv_2_1_a) (= #b0000010 bv_2_1_b))
        (and (= leaf_2_1 155351) (= #b0000010 bv_2_1_a) (= #b0100000 bv_2_1_b))
        (and (= leaf_2_1 155352) (= #b0000100 bv_2_1_a) (= #b0000100 bv_2_1_b))
        (and (= leaf_2_1 155353) (= #b0000100 bv_2_1_a) (= #b1000000 bv_2_1_b)))))
(assert (=> (= root_2 12)
    (or (and (= leaf_2_2 17) (= #b0000000 bv_2_2_a) (= #b0000000 bv_2_2_b))
        (and (= leaf_2_2 18) (= #b0000001 bv_2_2_a) (= #b0000000 bv_2_2_b))
        (and (= leaf_2_2 19) (= #b0000010 bv_2_2_a) (= #b0000000 bv_2_2_b))
        (and (= leaf_2_2 20) (= #b0000100 bv_2_2_a) (= #b0000000 bv_2_2_b))
        (and (= leaf_2_2 21) (= #b0000011 bv_2_2_a) (= #b0000000 bv_2_2_b))
        (and (= leaf_2_2 22) (= #b0000101 bv_2_2_a) (= #b0000000 bv_2_2_b))
        (and (= leaf_2_2 23) (= #b0000110 bv_2_2_a) (= #b0000000 bv_2_2_b)))))
(assert (=> (= root_2 12)
    (and (= leaf_2_3 0) (= #b0000000 bv_2_3_a) (= #b0000000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 155356)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 155357)))
(assert (=> (= root_3 6)
    (or (and (= leaf_3_0 155354) (= #b0000111 bv_3_0_a) (= #b0000000 bv_3_0_b))
        (and (= leaf_3_0 155356) (= bv_3_0_a bv_1) (= #b0000000 bv_3_0_b))
        (and (= leaf_3_0 155357) (= bv_3_0_a bv_2) (= #b0000000 bv_3_0_b)))))
(assert (= leaf_3_1_is_line_1 (= leaf_3_1 155356)))
(assert (= leaf_3_1_is_line_2 (= leaf_3_1 155357)))
(assert (=> (= root_3 6)
    (or (and (= leaf_3_1 155354) (= #b0000111 bv_3_1_a) (= #b0000000 bv_3_1_b))
        (and (= leaf_3_1 155356) (= bv_3_1_a bv_1) (= #b0000000 bv_3_1_b))
        (and (= leaf_3_1 155357) (= bv_3_1_a bv_2) (= #b0000000 bv_3_1_b)))))
(assert (=> (= root_3 6)
    (and (= leaf_3_2 0) (= #b0000000 bv_3_2_a) (= #b0000000 bv_3_2_b))))
(assert (=> (= root_3 6)
    (and (= leaf_3_3 0) (= #b0000000 bv_3_3_a) (= #b0000000 bv_3_3_b))))
(assert (or (= leaf_1_0 155346)
    (= leaf_1_1 155346)
    (= leaf_1_2 155346)
    (= leaf_1_3 155346)
    (= leaf_2_0 155346)
    (= leaf_2_1 155346)
    (= leaf_2_2 155346)
    (= leaf_2_3 155346)
    (= leaf_3_0 155346)
    (= leaf_3_1 155346)
    (= leaf_3_2 155346)
    (= leaf_3_3 155346)
    (= leaf_1_0 155347)
    (= leaf_1_1 155347)
    (= leaf_1_2 155347)
    (= leaf_1_3 155347)
    (= leaf_2_0 155347)
    (= leaf_2_1 155347)
    (= leaf_2_2 155347)
    (= leaf_2_3 155347)
    (= leaf_3_0 155347)
    (= leaf_3_1 155347)
    (= leaf_3_2 155347)
    (= leaf_3_3 155347)
    (= leaf_1_0 155348)
    (= leaf_1_1 155348)
    (= leaf_1_2 155348)
    (= leaf_1_3 155348)
    (= leaf_2_0 155348)
    (= leaf_2_1 155348)
    (= leaf_2_2 155348)
    (= leaf_2_3 155348)
    (= leaf_3_0 155348)
    (= leaf_3_1 155348)
    (= leaf_3_2 155348)
    (= leaf_3_3 155348)
    (= leaf_1_0 155349)
    (= leaf_1_1 155349)
    (= leaf_1_2 155349)
    (= leaf_1_3 155349)
    (= leaf_2_0 155349)
    (= leaf_2_1 155349)
    (= leaf_2_2 155349)
    (= leaf_2_3 155349)
    (= leaf_3_0 155349)
    (= leaf_3_1 155349)
    (= leaf_3_2 155349)
    (= leaf_3_3 155349)))
(assert (or (= leaf_1_0 155350)
    (= leaf_1_1 155350)
    (= leaf_1_2 155350)
    (= leaf_1_3 155350)
    (= leaf_2_0 155350)
    (= leaf_2_1 155350)
    (= leaf_2_2 155350)
    (= leaf_2_3 155350)
    (= leaf_3_0 155350)
    (= leaf_3_1 155350)
    (= leaf_3_2 155350)
    (= leaf_3_3 155350)
    (= leaf_1_0 155351)
    (= leaf_1_1 155351)
    (= leaf_1_2 155351)
    (= leaf_1_3 155351)
    (= leaf_2_0 155351)
    (= leaf_2_1 155351)
    (= leaf_2_2 155351)
    (= leaf_2_3 155351)
    (= leaf_3_0 155351)
    (= leaf_3_1 155351)
    (= leaf_3_2 155351)
    (= leaf_3_3 155351)
    (= leaf_1_0 155352)
    (= leaf_1_1 155352)
    (= leaf_1_2 155352)
    (= leaf_1_3 155352)
    (= leaf_2_0 155352)
    (= leaf_2_1 155352)
    (= leaf_2_2 155352)
    (= leaf_2_3 155352)
    (= leaf_3_0 155352)
    (= leaf_3_1 155352)
    (= leaf_3_2 155352)
    (= leaf_3_3 155352)
    (= leaf_1_0 155353)
    (= leaf_1_1 155353)
    (= leaf_1_2 155353)
    (= leaf_1_3 155353)
    (= leaf_2_0 155353)
    (= leaf_2_1 155353)
    (= leaf_2_2 155353)
    (= leaf_2_3 155353)
    (= leaf_3_0 155353)
    (= leaf_3_1 155353)
    (= leaf_3_2 155353)
    (= leaf_3_3 155353)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b0000000 bv_1_2_a)
                    (distinct #b0000000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b0000000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b0000000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b0000000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b0000000 bv_2_2_a)
                    (distinct #b0000000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b0000000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b0000000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b0000000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b0000000 bv_3_2_a)
                    (distinct #b0000000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b0000000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b0000000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #b0000000 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i005 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i005.csv", col_types = cols("id" = col_integer(),"customer" = col_character(),"total" = col_integer()))
df_i005 <- copy_to(con, df_i005)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o005.csv", col_types = cols("minid" = col_integer(),"customer" = col_character(),"maxtotal" = col_integer()))

df545 <- df_i005 %>% group_by(total) %>% summarise(id = min(id)) %>% ungroup()
df546 <- df_i005 %>% group_by(customer) %>% summarise(total = max(total)) %>% ungroup()
df547 <- left_join(df546, df545, na_matches="never")
out <- df547 %>% select(minid = id, customer, maxtotal = total)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id AS minid,
       customer,
       total AS maxtotal
FROM
  (SELECT customer,
          LHS.total AS total,
          id
   FROM
     (SELECT customer,
             MAX(total) AS total
      FROM df_i005
      GROUP BY customer) AS LHS
   LEFT JOIN
     (SELECT total,
             MIN(id) AS id
      FROM df_i005
      GROUP BY total) AS RHS ON (LHS.total = RHS.total))
