[     2.380][MainProcess][INFO] Parsing specification...
[     2.385][MainProcess][INFO] File read
[     2.386][MainProcess][DEBUG] Reading input files...
[     2.394][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i032.csv: ['string', 'string', 'int64']
[     2.399][MainProcess][WARNING] Column names should be valid R identifiers. Trying to fix names. Conflicts may arise!
[     2.399][MainProcess][WARNING] Replacing column "Count.other" in table tests-examples/scythe/top_rated_posts/tables/o032.csv with Count_other
[     2.400][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o032.csv: ['string', 'int64', 'int64']
[     2.400][MainProcess][INFO] Parsing sketch...
[     2.400][MainProcess][DEBUG] Sketch creation: Line(T1, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.400][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.400][MainProcess][DEBUG] Sketch creation: Line(T3, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.442][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 10, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 2, 'filter': 12}
[     2.442][MainProcess][DEBUG] {'natural_join': 0.025, 'natural_join3': 0.025, 'natural_join4': 0.025, 'inner_join': 0.25, 'anti_join': 0.175, 'left_join': 0.025, 'union': 0.025, 'intersect': 0.075, 'semi_join': 0.025, 'cross_join': 0.05, 'filter': 0.3}
[     2.443][MainProcess][DEBUG] {'natural_join': 0.025, 'natural_join3': 0.025, 'natural_join4': 0.025, 'inner_join': 0.25, 'anti_join': 0.175, 'left_join': 0.025, 'union': 0.025, 'intersect': 0.075, 'semi_join': 0.025, 'cross_join': 0.05, 'filter': 0.3}
[     2.443][MainProcess][INFO] Building synthesizer...
[     2.444][MainProcess][DEBUG] [Line(T1, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[46]),Child(['??'], type=FilterCondition, var=[34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[46]),Child(['??'], type=FilterCondition, var=[34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[46]),Child(['??'], type=Table, var=[46]),Child(['??'], type=JoinCondition, var=[22, 23, 24, 25, 26, 27, 28, 29, 30, 31]),Child([None], type=None, var=[0])])]
[     2.638][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 154 constraints
[     2.646][MainProcess][DEBUG] Enumeration time: 0.20290660858154297
[    10.647][MainProcess][DEBUG] Synthesis time: 8.00104284286499
[    10.647][MainProcess][INFO] Solution found: [filter(input0, "Status != 'Active' | Status == 'Inactive'"), filter(input0, "Status != 'Inactive'"), inner_join(line1, line0, 'Section')]
[    10.653][MainProcess][DEBUG] Solution found using process 0
[    10.653][MainProcess][INFO] Statistics:
[    10.653][MainProcess][INFO] 	Attempted programs: 797 (approx)
[    10.653][MainProcess][INFO] 		Rejected: 796 (approx)
[    10.653][MainProcess][INFO] 		Failed: 0 (approx)
[    10.653][MainProcess][INFO] 		Empty outputs: 567 (71.1%) (approx)
[    10.653][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    10.653][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    10.653][MainProcess][INFO] 	Total time spent in enumerator init: 0.202907 (approx)
[    10.654][MainProcess][INFO] 	Total time spent in enumerator: 1.960512 (approx)
[    10.654][MainProcess][INFO] 		Enumerated 406.526524 programs/s avg. (just enumeration time)
[    10.654][MainProcess][INFO] 		Enumerated 80.043822 programs/s avg. (overall)
[    10.654][MainProcess][INFO] 	Total time spent in evaluation & testing: 5.375096 (approx)
[    10.654][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.660948 (approx)
[    10.654][MainProcess][INFO] Solution found: [filter(input0, "Status != 'Active' | Status == 'Inactive'"), filter(input0, "Status != 'Inactive'"), inner_join(line1, line0, 'Section')]
[    10.654][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 3))
(declare-fun bv_1_0_a () (_ BitVec 3))
(declare-fun bv_1_1_b () (_ BitVec 3))
(declare-fun bv_1_1_a () (_ BitVec 3))
(declare-fun bv_1_2_b () (_ BitVec 3))
(declare-fun bv_1_2_a () (_ BitVec 3))
(declare-fun bv_1_3_b () (_ BitVec 3))
(declare-fun bv_1_3_a () (_ BitVec 3))
(declare-fun bv_2_0_b () (_ BitVec 3))
(declare-fun bv_1 () (_ BitVec 3))
(declare-fun bv_2_0_a () (_ BitVec 3))
(declare-fun bv_2_1_b () (_ BitVec 3))
(declare-fun bv_2_1_a () (_ BitVec 3))
(declare-fun bv_2_2_b () (_ BitVec 3))
(declare-fun bv_2_2_a () (_ BitVec 3))
(declare-fun bv_2_3_b () (_ BitVec 3))
(declare-fun bv_2_3_a () (_ BitVec 3))
(declare-fun bv_3_0_b () (_ BitVec 3))
(declare-fun bv_2 () (_ BitVec 3))
(declare-fun bv_3_0_a () (_ BitVec 3))
(declare-fun bv_3_1_b () (_ BitVec 3))
(declare-fun bv_3_1_a () (_ BitVec 3))
(declare-fun bv_3_2_b () (_ BitVec 3))
(declare-fun bv_3_2_a () (_ BitVec 3))
(declare-fun bv_3_3_b () (_ BitVec 3))
(declare-fun bv_3_3_a () (_ BitVec 3))
(declare-fun bv_3 () (_ BitVec 3))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 11)))
(assert (or (= leaf_1_0 46)))
(assert (<= leaf_1_0 46))
(assert (>= leaf_1_0 46))
(assert (or (= leaf_1_1 34)
    (= leaf_1_1 35)
    (= leaf_1_1 36)
    (= leaf_1_1 37)
    (= leaf_1_1 38)
    (= leaf_1_1 39)
    (= leaf_1_1 40)
    (= leaf_1_1 41)
    (= leaf_1_1 42)
    (= leaf_1_1 43)
    (= leaf_1_1 44)
    (= leaf_1_1 45)))
(assert (<= leaf_1_1 45))
(assert (>= leaf_1_1 34))
(assert (or (= leaf_1_2 0)))
(assert (<= leaf_1_2 0))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 46) (= leaf_2_0 48)))
(assert (<= leaf_2_0 48))
(assert (>= leaf_2_0 46))
(assert (or (= leaf_2_1 34)
    (= leaf_2_1 35)
    (= leaf_2_1 36)
    (= leaf_2_1 37)
    (= leaf_2_1 38)
    (= leaf_2_1 39)
    (= leaf_2_1 40)
    (= leaf_2_1 41)
    (= leaf_2_1 42)
    (= leaf_2_1 43)
    (= leaf_2_1 44)
    (= leaf_2_1 45)))
(assert (<= leaf_2_1 45))
(assert (>= leaf_2_1 34))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 4)))
(assert (or (= leaf_3_0 46) (= leaf_3_0 48) (= leaf_3_0 49)))
(assert (<= leaf_3_0 49))
(assert (>= leaf_3_0 46))
(assert (or (= leaf_3_1 46) (= leaf_3_1 48) (= leaf_3_1 49)))
(assert (<= leaf_3_1 49))
(assert (>= leaf_3_1 46))
(assert (or (= leaf_3_2 22)
    (= leaf_3_2 23)
    (= leaf_3_2 24)
    (= leaf_3_2 25)
    (= leaf_3_2 26)
    (= leaf_3_2 27)
    (= leaf_3_2 28)
    (= leaf_3_2 29)
    (= leaf_3_2 30)
    (= leaf_3_2 31)))
(assert (<= leaf_3_2 31))
(assert (>= leaf_3_2 22))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 46)
    (= leaf_1_1 46)
    (= leaf_1_2 46)
    (= leaf_1_3 46)
    (= leaf_2_0 46)
    (= leaf_2_1 46)
    (= leaf_2_2 46)
    (= leaf_2_3 46)
    (= leaf_3_0 46)
    (= leaf_3_1 46)
    (= leaf_3_2 46)
    (= leaf_3_3 46)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_1 11)
    (or (and (= leaf_1_0 46) (= #b111 bv_1_0_a) (= #b000 bv_1_0_b)))))
(assert (=> (= root_1 11)
    (or (and (= leaf_1_1 34) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 35) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 36) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 37) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 38) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 39) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 40) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 41) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 42) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 43) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 44) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 45) (= #b100 bv_1_1_a) (= #b000 bv_1_1_b)))))
(assert (=> (= root_1 11) (and (= leaf_1_2 0) (= #b000 bv_1_2_a) (= #b000 bv_1_2_b))))
(assert (=> (= root_1 11) (and (= leaf_1_3 0) (= #b000 bv_1_3_a) (= #b000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 48)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 46) (= #b111 bv_2_0_a) (= #b000 bv_2_0_b))
        (and (= leaf_2_0 48) (= bv_2_0_a bv_1) (= #b000 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 34) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 35) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 36) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 37) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 38) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 39) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 40) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 41) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 42) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 43) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 44) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 45) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b)))))
(assert (=> (= root_2 11) (and (= leaf_2_2 0) (= #b000 bv_2_2_a) (= #b000 bv_2_2_b))))
(assert (=> (= root_2 11) (and (= leaf_2_3 0) (= #b000 bv_2_3_a) (= #b000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 48)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 49)))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_0 46) (= #b111 bv_3_0_a) (= #b000 bv_3_0_b))
        (and (= leaf_3_0 48) (= bv_3_0_a bv_1) (= #b000 bv_3_0_b))
        (and (= leaf_3_0 49) (= bv_3_0_a bv_2) (= #b000 bv_3_0_b)))))
(assert (= leaf_3_1_is_line_1 (= leaf_3_1 48)))
(assert (= leaf_3_1_is_line_2 (= leaf_3_1 49)))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_1 46) (= #b111 bv_3_1_a) (= #b000 bv_3_1_b))
        (and (= leaf_3_1 48) (= bv_3_1_a bv_1) (= #b000 bv_3_1_b))
        (and (= leaf_3_1 49) (= bv_3_1_a bv_2) (= #b000 bv_3_1_b)))))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_2 22) (= #b011 bv_3_2_a) (= #b101 bv_3_2_b))
        (and (= leaf_3_2 23) (= #b101 bv_3_2_a) (= #b011 bv_3_2_b))
        (and (= leaf_3_2 24) (= #b110 bv_3_2_a) (= #b110 bv_3_2_b))
        (and (= leaf_3_2 25) (= #b010 bv_3_2_a) (= #b100 bv_3_2_b))
        (and (= leaf_3_2 26) (= #b001 bv_3_2_a) (= #b001 bv_3_2_b))
        (and (= leaf_3_2 27) (= #b010 bv_3_2_a) (= #b010 bv_3_2_b))
        (and (= leaf_3_2 28) (= #b100 bv_3_2_a) (= #b100 bv_3_2_b))
        (and (= leaf_3_2 29) (= #b011 bv_3_2_a) (= #b011 bv_3_2_b))
        (and (= leaf_3_2 30) (= #b101 bv_3_2_a) (= #b101 bv_3_2_b))
        (and (= leaf_3_2 31) (= #b110 bv_3_2_a) (= #b110 bv_3_2_b)))))
(assert (=> (= root_3 4) (and (= leaf_3_3 0) (= #b000 bv_3_3_a) (= #b000 bv_3_3_b))))
(assert (or (= leaf_1_0 34)
    (= leaf_1_1 34)
    (= leaf_1_2 34)
    (= leaf_1_3 34)
    (= leaf_2_0 34)
    (= leaf_2_1 34)
    (= leaf_2_2 34)
    (= leaf_2_3 34)
    (= leaf_3_0 34)
    (= leaf_3_1 34)
    (= leaf_3_2 34)
    (= leaf_3_3 34)
    (= leaf_1_0 35)
    (= leaf_1_1 35)
    (= leaf_1_2 35)
    (= leaf_1_3 35)
    (= leaf_2_0 35)
    (= leaf_2_1 35)
    (= leaf_2_2 35)
    (= leaf_2_3 35)
    (= leaf_3_0 35)
    (= leaf_3_1 35)
    (= leaf_3_2 35)
    (= leaf_3_3 35)
    (= leaf_1_0 39)
    (= leaf_1_1 39)
    (= leaf_1_2 39)
    (= leaf_1_3 39)
    (= leaf_2_0 39)
    (= leaf_2_1 39)
    (= leaf_2_2 39)
    (= leaf_2_3 39)
    (= leaf_3_0 39)
    (= leaf_3_1 39)
    (= leaf_3_2 39)
    (= leaf_3_3 39)
    (= leaf_1_0 38)
    (= leaf_1_1 38)
    (= leaf_1_2 38)
    (= leaf_1_3 38)
    (= leaf_2_0 38)
    (= leaf_2_1 38)
    (= leaf_2_2 38)
    (= leaf_2_3 38)
    (= leaf_3_0 38)
    (= leaf_3_1 38)
    (= leaf_3_2 38)
    (= leaf_3_3 38)
    (= leaf_1_0 41)
    (= leaf_1_1 41)
    (= leaf_1_2 41)
    (= leaf_1_3 41)
    (= leaf_2_0 41)
    (= leaf_2_1 41)
    (= leaf_2_2 41)
    (= leaf_2_3 41)
    (= leaf_3_0 41)
    (= leaf_3_1 41)
    (= leaf_3_2 41)
    (= leaf_3_3 41)
    (= leaf_1_0 40)
    (= leaf_1_1 40)
    (= leaf_1_2 40)
    (= leaf_1_3 40)
    (= leaf_2_0 40)
    (= leaf_2_1 40)
    (= leaf_2_2 40)
    (= leaf_2_3 40)
    (= leaf_3_0 40)
    (= leaf_3_1 40)
    (= leaf_3_2 40)
    (= leaf_3_3 40)
    (= leaf_1_0 43)
    (= leaf_1_1 43)
    (= leaf_1_2 43)
    (= leaf_1_3 43)
    (= leaf_2_0 43)
    (= leaf_2_1 43)
    (= leaf_2_2 43)
    (= leaf_2_3 43)
    (= leaf_3_0 43)
    (= leaf_3_1 43)
    (= leaf_3_2 43)
    (= leaf_3_3 43)
    (= leaf_1_0 42)
    (= leaf_1_1 42)
    (= leaf_1_2 42)
    (= leaf_1_3 42)
    (= leaf_2_0 42)
    (= leaf_2_1 42)
    (= leaf_2_2 42)
    (= leaf_2_3 42)
    (= leaf_3_0 42)
    (= leaf_3_1 42)
    (= leaf_3_2 42)
    (= leaf_3_3 42)
    (= leaf_1_0 45)
    (= leaf_1_1 45)
    (= leaf_1_2 45)
    (= leaf_1_3 45)
    (= leaf_2_0 45)
    (= leaf_2_1 45)
    (= leaf_2_2 45)
    (= leaf_2_3 45)
    (= leaf_3_0 45)
    (= leaf_3_1 45)
    (= leaf_3_2 45)
    (= leaf_3_3 45)
    (= leaf_1_0 44)
    (= leaf_1_1 44)
    (= leaf_1_2 44)
    (= leaf_1_3 44)
    (= leaf_2_0 44)
    (= leaf_2_1 44)
    (= leaf_2_2 44)
    (= leaf_2_3 44)
    (= leaf_3_0 44)
    (= leaf_3_1 44)
    (= leaf_3_2 44)
    (= leaf_3_3 44)))
(assert (or (= leaf_1_0 36)
    (= leaf_1_1 36)
    (= leaf_1_2 36)
    (= leaf_1_3 36)
    (= leaf_2_0 36)
    (= leaf_2_1 36)
    (= leaf_2_2 36)
    (= leaf_2_3 36)
    (= leaf_3_0 36)
    (= leaf_3_1 36)
    (= leaf_3_2 36)
    (= leaf_3_3 36)
    (= leaf_1_0 37)
    (= leaf_1_1 37)
    (= leaf_1_2 37)
    (= leaf_1_3 37)
    (= leaf_2_0 37)
    (= leaf_2_1 37)
    (= leaf_2_2 37)
    (= leaf_2_3 37)
    (= leaf_3_0 37)
    (= leaf_3_1 37)
    (= leaf_3_2 37)
    (= leaf_3_3 37)
    (= leaf_1_0 39)
    (= leaf_1_1 39)
    (= leaf_1_2 39)
    (= leaf_1_3 39)
    (= leaf_2_0 39)
    (= leaf_2_1 39)
    (= leaf_2_2 39)
    (= leaf_2_3 39)
    (= leaf_3_0 39)
    (= leaf_3_1 39)
    (= leaf_3_2 39)
    (= leaf_3_3 39)
    (= leaf_1_0 38)
    (= leaf_1_1 38)
    (= leaf_1_2 38)
    (= leaf_1_3 38)
    (= leaf_2_0 38)
    (= leaf_2_1 38)
    (= leaf_2_2 38)
    (= leaf_2_3 38)
    (= leaf_3_0 38)
    (= leaf_3_1 38)
    (= leaf_3_2 38)
    (= leaf_3_3 38)
    (= leaf_1_0 41)
    (= leaf_1_1 41)
    (= leaf_1_2 41)
    (= leaf_1_3 41)
    (= leaf_2_0 41)
    (= leaf_2_1 41)
    (= leaf_2_2 41)
    (= leaf_2_3 41)
    (= leaf_3_0 41)
    (= leaf_3_1 41)
    (= leaf_3_2 41)
    (= leaf_3_3 41)
    (= leaf_1_0 40)
    (= leaf_1_1 40)
    (= leaf_1_2 40)
    (= leaf_1_3 40)
    (= leaf_2_0 40)
    (= leaf_2_1 40)
    (= leaf_2_2 40)
    (= leaf_2_3 40)
    (= leaf_3_0 40)
    (= leaf_3_1 40)
    (= leaf_3_2 40)
    (= leaf_3_3 40)
    (= leaf_1_0 43)
    (= leaf_1_1 43)
    (= leaf_1_2 43)
    (= leaf_1_3 43)
    (= leaf_2_0 43)
    (= leaf_2_1 43)
    (= leaf_2_2 43)
    (= leaf_2_3 43)
    (= leaf_3_0 43)
    (= leaf_3_1 43)
    (= leaf_3_2 43)
    (= leaf_3_3 43)
    (= leaf_1_0 42)
    (= leaf_1_1 42)
    (= leaf_1_2 42)
    (= leaf_1_3 42)
    (= leaf_2_0 42)
    (= leaf_2_1 42)
    (= leaf_2_2 42)
    (= leaf_2_3 42)
    (= leaf_3_0 42)
    (= leaf_3_1 42)
    (= leaf_3_2 42)
    (= leaf_3_3 42)
    (= leaf_1_0 45)
    (= leaf_1_1 45)
    (= leaf_1_2 45)
    (= leaf_1_3 45)
    (= leaf_2_0 45)
    (= leaf_2_1 45)
    (= leaf_2_2 45)
    (= leaf_2_3 45)
    (= leaf_3_0 45)
    (= leaf_3_1 45)
    (= leaf_3_2 45)
    (= leaf_3_3 45)
    (= leaf_1_0 44)
    (= leaf_1_1 44)
    (= leaf_1_2 44)
    (= leaf_1_3 44)
    (= leaf_2_0 44)
    (= leaf_2_1 44)
    (= leaf_2_2 44)
    (= leaf_2_3 44)
    (= leaf_3_0 44)
    (= leaf_3_1 44)
    (= leaf_3_2 44)
    (= leaf_3_3 44)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000 bv_1_2_a)
                    (distinct #b000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b000 bv_2_2_a)
                    (distinct #b000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b000 bv_3_2_a)
                    (distinct #b000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i032 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i032.csv", col_types = cols("Section" = col_character(),"Status" = col_character(),"Count" = col_integer()))
df_i032 <- copy_to(con, df_i032)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o032.csv", col_types = cols("Section" = col_character(),"Count" = col_integer(),"Count.other" = col_integer()))
expected_output <- rename(expected_output, Count_other = "Count.other")

df517 <- df_i032 %>% filter(Status != 'Active' | Status == 'Inactive')
df518 <- df_i032 %>% filter(Status != 'Inactive')
df519 <- inner_join(df518, df517, by=c('Section'), suffix = c('', '.other'), na_matches='never')
out <- df519 %>% select(Section, Count, Count_other = Count.other)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `Section`,
       `Count`,
       `Count_other` AS `Count_other`
FROM
  (SELECT `LHS`.`Section` AS `Section`,
          `LHS`.`Status` AS `Status`,
          `LHS`.`Count` AS `Count`,
          `RHS`.`Status` AS `Status_other`,
          `RHS`.`Count` AS `Count_other`
   FROM
     (SELECT *
      FROM `df_i032`
      WHERE (`Status` != 'Inactive')) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_i032`
      WHERE (`Status` != 'Active'
             OR `Status` = 'Inactive')) AS RHS ON (LHS.Section = RHS.Section))
