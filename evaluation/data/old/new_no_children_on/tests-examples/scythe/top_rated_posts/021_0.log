[     2.359][MainProcess][INFO] Parsing specification...
[     2.365][MainProcess][INFO] File read
[     2.366][MainProcess][DEBUG] Reading input files...
[     2.379][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i021.csv: ['int64', 'int64', 'string', 'datetime64[ns]']
[     2.387][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o021.csv: ['int64', 'string', 'datetime64[ns]']
[     2.387][MainProcess][INFO] Parsing sketch...
[     2.387][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.464][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 30, 'anti_join': 11, 'left_join': 1, 'union': 1, 'intersect': 4, 'semi_join': 1, 'cross_join': 1110, 'filter': 6, 'summarise': 11, 'mutate': 1}
[     2.465][MainProcess][DEBUG] {'natural_join': 0.0008481764206955047, 'natural_join3': 0.0008481764206955047, 'natural_join4': 0.0008481764206955047, 'inner_join': 0.02544529262086514, 'anti_join': 0.009329940627650551, 'left_join': 0.0008481764206955047, 'union': 0.0008481764206955047, 'intersect': 0.0033927056827820186, 'semi_join': 0.0008481764206955047, 'cross_join': 0.9414758269720102, 'filter': 0.005089058524173028, 'summarise': 0.009329940627650551, 'mutate': 0.0008481764206955047}
[     2.465][MainProcess][DEBUG] {'natural_join': 0.0008481764206955047, 'natural_join3': 0.0008481764206955047, 'natural_join4': 0.0008481764206955047, 'inner_join': 0.02544529262086514, 'anti_join': 0.009329940627650551, 'left_join': 0.0008481764206955047, 'union': 0.0008481764206955047, 'intersect': 0.0033927056827820186, 'semi_join': 0.0008481764206955047, 'cross_join': 0.9414758269720102, 'filter': 0.005089058524173028, 'summarise': 0.009329940627650551, 'mutate': 0.0008481764206955047}
[     2.465][MainProcess][INFO] Building synthesizer...
[     2.466][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[1176]),Child(['??'], type=SummariseCondition, var=[1175]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])])]
[     2.526][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 48 constraints
[     2.529][MainProcess][DEBUG] Enumeration time: 0.06422257423400879
[     2.698][MainProcess][DEBUG] Synthesis time: 0.16863155364990234
[     2.698][MainProcess][INFO] Solution found: [summarise(input0, 'maxSERVICEMONTH = max(SERVICEMONTH)', 'CHARGEID,CHARGETYPE')]
[     2.699][MainProcess][DEBUG] Solution found using process 0
[     2.699][MainProcess][INFO] Statistics:
[     2.699][MainProcess][INFO] 	Attempted programs: 11 (approx)
[     2.700][MainProcess][INFO] 		Rejected: 10 (approx)
[     2.700][MainProcess][INFO] 		Failed: 0 (approx)
[     2.700][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.700][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.700][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.700][MainProcess][INFO] 	Total time spent in enumerator init: 0.064223 (approx)
[     2.700][MainProcess][INFO] 	Total time spent in enumerator: 0.011783 (approx)
[     2.700][MainProcess][INFO] 		Enumerated 933.538586 programs/s avg. (just enumeration time)
[     2.700][MainProcess][INFO] 		Enumerated 5.473488 programs/s avg. (overall)
[     2.700][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.150859 (approx)
[     2.700][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.005227 (approx)
[     2.700][MainProcess][INFO] Solution found: [summarise(input0, 'maxSERVICEMONTH = max(SERVICEMONTH)', 'CHARGEID,CHARGETYPE')]
[     2.700][MainProcess][INFO] Solution size: 1
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun bv_1_0_b () (_ BitVec 5))
(declare-fun bv_1_0_a () (_ BitVec 5))
(declare-fun bv_1_1_b () (_ BitVec 5))
(declare-fun bv_1_1_a () (_ BitVec 5))
(declare-fun bv_1_2_b () (_ BitVec 5))
(declare-fun bv_1_2_a () (_ BitVec 5))
(declare-fun bv_1_3_b () (_ BitVec 5))
(declare-fun bv_1_3_a () (_ BitVec 5))
(declare-fun bv_1 () (_ BitVec 5))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 1176)))
(assert (<= leaf_1_0 1176))
(assert (>= leaf_1_0 1176))
(assert (or (= leaf_1_1 1175)))
(assert (<= leaf_1_1 1175))
(assert (>= leaf_1_1 1175))
(assert (or (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)
    (= leaf_1_2 26)
    (= leaf_1_2 27)
    (= leaf_1_2 28)))
(assert (<= leaf_1_2 28))
(assert (>= leaf_1_2 18))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (or (= leaf_1_0 1176) (= leaf_1_1 1176) (= leaf_1_2 1176) (= leaf_1_3 1176)))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 1176) (= #b01111 bv_1_0_a) (= #b00000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 1175) (= #b01000 bv_1_1_a) (= #b10000 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 18) (= #b00000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b00001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 20) (= #b00010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b00100 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b01000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b00011 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 24) (= #b00101 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 25) (= #b01001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 26) (= #b00110 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 27) (= #b01010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 28) (= #b01100 bv_1_2_a) (= #b00000 bv_1_2_b)))))
(assert (=> (= root_1 12)
    (and (= leaf_1_3 0) (= #b00000 bv_1_3_a) (= #b00000 bv_1_3_b))))
(assert (or (= leaf_1_0 1175) (= leaf_1_1 1175) (= leaf_1_2 1175) (= leaf_1_3 1175)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00000 bv_1_2_a)
                    (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i021 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i021.csv", col_types = cols("ID" = col_integer(),"CHARGEID" = col_integer(),"CHARGETYPE" = col_character(),"SERVICEMONTH" = col_character()))
df_i021$SERVICEMONTH <- mdy(df_i021$SERVICEMONTH)
df_i021 <- copy_to(con, df_i021)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o021.csv", col_types = cols("CHARGEID" = col_integer(),"CHARGETYPE" = col_character(),"maxSERVICEMONTH" = col_character()))
expected_output$maxSERVICEMONTH <- mdy(expected_output$maxSERVICEMONTH)

df12 <- df_i021 %>% group_by(CHARGEID,CHARGETYPE) %>% summarise(maxSERVICEMONTH = max(SERVICEMONTH)) %>% ungroup()
out <- df12 %>% select(CHARGEID, CHARGETYPE, maxSERVICEMONTH)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CHARGEID,
       CHARGETYPE,
       maxSERVICEMONTH
FROM
  (SELECT CHARGEID,
          CHARGETYPE,
          MAX(SERVICEMONTH) AS maxSERVICEMONTH
   FROM df_i021
   GROUP BY CHARGEID,
            CHARGETYPE)
