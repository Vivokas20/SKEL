[     2.357][MainProcess][INFO] Parsing specification...
[     2.362][MainProcess][INFO] File read
[     2.363][MainProcess][DEBUG] Reading input files...
[     2.377][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i007.csv: ['int64', 'int64', 'datetime64[ns]', 'string', 'int64']
[     2.386][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o007.csv: ['int64', 'int64', 'datetime64[ns]', 'string', 'int64']
[     2.386][MainProcess][INFO] Parsing sketch...
[     2.386][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.386][MainProcess][DEBUG] Sketch creation: Line(T2, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.460][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 73, 'anti_join': 16, 'left_join': 1, 'union': 1, 'intersect': 5, 'semi_join': 1, 'cross_join': 1110, 'filter': 6, 'summarise': 16, 'mutate': 1}
[     2.460][MainProcess][DEBUG] {'natural_join': 0.0008110300081103001, 'natural_join3': 0.0008110300081103001, 'natural_join4': 0.0008110300081103001, 'inner_join': 0.059205190592051905, 'anti_join': 0.012976480129764802, 'left_join': 0.0008110300081103001, 'union': 0.0008110300081103001, 'intersect': 0.0040551500405515, 'semi_join': 0.0008110300081103001, 'cross_join': 0.9002433090024331, 'filter': 0.004866180048661801, 'summarise': 0.012976480129764802, 'mutate': 0.0008110300081103001}
[     2.460][MainProcess][DEBUG] {'natural_join': 0.0008110300081103001, 'natural_join3': 0.0008110300081103001, 'natural_join4': 0.0008110300081103001, 'inner_join': 0.059205190592051905, 'anti_join': 0.012976480129764802, 'left_join': 0.0008110300081103001, 'union': 0.0008110300081103001, 'intersect': 0.0040551500405515, 'semi_join': 0.0008110300081103001, 'cross_join': 0.9002433090024331, 'filter': 0.004866180048661801, 'summarise': 0.012976480129764802, 'mutate': 0.0008110300081103001}
[     2.461][MainProcess][INFO] Building synthesizer...
[     2.462][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[1225]),Child(['??'], type=SummariseCondition, var=[1224]),Child(['??'], type=Cols, var=[19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]),Child([None], type=None, var=[0])]), Line(T2, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[1225]),Child(['??'], type=Table, var=[1225]),Child(['??'], type=JoinCondition, var=[35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107]),Child([None], type=None, var=[0])])]
[     3.104][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 103 constraints
[     3.112][MainProcess][DEBUG] Enumeration time: 0.6510753631591797
[    11.272][MainProcess][DEBUG] Synthesis time: 8.160520315170288
[    11.273][MainProcess][INFO] Solution found: [summarise(input0, 'maxdatetime = max(datetime)', 'home,player'), inner_join(input0, line0, 'player = player,datetime = maxdatetime')]
[    11.280][MainProcess][DEBUG] Solution found using process 0
[    11.280][MainProcess][INFO] Statistics:
[    11.280][MainProcess][INFO] 	Attempted programs: 827 (approx)
[    11.280][MainProcess][INFO] 		Rejected: 826 (approx)
[    11.281][MainProcess][INFO] 		Failed: 0 (approx)
[    11.281][MainProcess][INFO] 		Empty outputs: 515 (62.3%) (approx)
[    11.281][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    11.281][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    11.281][MainProcess][INFO] 	Total time spent in enumerator init: 0.651075 (approx)
[    11.281][MainProcess][INFO] 	Total time spent in enumerator: 1.603287 (approx)
[    11.281][MainProcess][INFO] 		Enumerated 515.815174 programs/s avg. (just enumeration time)
[    11.281][MainProcess][INFO] 		Enumerated 78.049604 programs/s avg. (overall)
[    11.281][MainProcess][INFO] 	Total time spent in evaluation & testing: 6.048771 (approx)
[    11.281][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.504342 (approx)
[    11.281][MainProcess][INFO] Solution found: [summarise(input0, 'maxdatetime = max(datetime)', 'home,player'), inner_join(input0, line0, 'player = player,datetime = maxdatetime')]
[    11.281][MainProcess][INFO] Solution size: 2
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 6))
(declare-fun bv_1_0_a () (_ BitVec 6))
(declare-fun bv_1_1_b () (_ BitVec 6))
(declare-fun bv_1_1_a () (_ BitVec 6))
(declare-fun bv_1_2_b () (_ BitVec 6))
(declare-fun bv_1_2_a () (_ BitVec 6))
(declare-fun bv_1_3_b () (_ BitVec 6))
(declare-fun bv_1_3_a () (_ BitVec 6))
(declare-fun bv_2_0_b () (_ BitVec 6))
(declare-fun bv_1 () (_ BitVec 6))
(declare-fun bv_2_0_a () (_ BitVec 6))
(declare-fun bv_2_1_b () (_ BitVec 6))
(declare-fun bv_2_1_a () (_ BitVec 6))
(declare-fun bv_2_2_b () (_ BitVec 6))
(declare-fun bv_2_2_a () (_ BitVec 6))
(declare-fun bv_2_3_b () (_ BitVec 6))
(declare-fun bv_2_3_a () (_ BitVec 6))
(declare-fun bv_2 () (_ BitVec 6))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 1225)))
(assert (<= leaf_1_0 1225))
(assert (>= leaf_1_0 1225))
(assert (or (= leaf_1_1 1224)))
(assert (<= leaf_1_1 1224))
(assert (>= leaf_1_1 1224))
(assert (or (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)
    (= leaf_1_2 26)
    (= leaf_1_2 27)
    (= leaf_1_2 28)
    (= leaf_1_2 29)
    (= leaf_1_2 30)
    (= leaf_1_2 31)
    (= leaf_1_2 32)
    (= leaf_1_2 33)
    (= leaf_1_2 34)))
(assert (<= leaf_1_2 34))
(assert (>= leaf_1_2 19))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 4)))
(assert (or (= leaf_2_0 1225) (= leaf_2_0 1227)))
(assert (<= leaf_2_0 1227))
(assert (>= leaf_2_0 1225))
(assert (or (= leaf_2_1 1225) (= leaf_2_1 1227)))
(assert (<= leaf_2_1 1227))
(assert (>= leaf_2_1 1225))
(assert (or (= leaf_2_2 35)
    (= leaf_2_2 36)
    (= leaf_2_2 37)
    (= leaf_2_2 38)
    (= leaf_2_2 39)
    (= leaf_2_2 40)
    (= leaf_2_2 41)
    (= leaf_2_2 42)
    (= leaf_2_2 43)
    (= leaf_2_2 44)
    (= leaf_2_2 45)
    (= leaf_2_2 46)
    (= leaf_2_2 47)
    (= leaf_2_2 48)
    (= leaf_2_2 49)
    (= leaf_2_2 50)
    (= leaf_2_2 51)
    (= leaf_2_2 52)
    (= leaf_2_2 53)
    (= leaf_2_2 54)
    (= leaf_2_2 55)
    (= leaf_2_2 56)
    (= leaf_2_2 57)
    (= leaf_2_2 58)
    (= leaf_2_2 59)
    (= leaf_2_2 60)
    (= leaf_2_2 61)
    (= leaf_2_2 62)
    (= leaf_2_2 63)
    (= leaf_2_2 64)
    (= leaf_2_2 65)
    (= leaf_2_2 66)
    (= leaf_2_2 67)
    (= leaf_2_2 68)
    (= leaf_2_2 69)
    (= leaf_2_2 70)
    (= leaf_2_2 71)
    (= leaf_2_2 72)
    (= leaf_2_2 73)
    (= leaf_2_2 74)
    (= leaf_2_2 75)
    (= leaf_2_2 76)
    (= leaf_2_2 77)
    (= leaf_2_2 78)
    (= leaf_2_2 79)
    (= leaf_2_2 80)
    (= leaf_2_2 81)
    (= leaf_2_2 82)
    (= leaf_2_2 83)
    (= leaf_2_2 84)
    (= leaf_2_2 85)
    (= leaf_2_2 86)
    (= leaf_2_2 87)
    (= leaf_2_2 88)
    (= leaf_2_2 89)
    (= leaf_2_2 90)
    (= leaf_2_2 91)
    (= leaf_2_2 92)
    (= leaf_2_2 93)
    (= leaf_2_2 94)
    (= leaf_2_2 95)
    (= leaf_2_2 96)
    (= leaf_2_2 97)
    (= leaf_2_2 98)
    (= leaf_2_2 99)
    (= leaf_2_2 100)
    (= leaf_2_2 101)
    (= leaf_2_2 102)
    (= leaf_2_2 103)
    (= leaf_2_2 104)
    (= leaf_2_2 105)
    (= leaf_2_2 106)
    (= leaf_2_2 107)))
(assert (<= leaf_2_2 107))
(assert (>= leaf_2_2 35))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 1225)
    (= leaf_1_1 1225)
    (= leaf_1_2 1225)
    (= leaf_1_3 1225)
    (= leaf_2_0 1225)
    (= leaf_2_1 1225)
    (= leaf_2_2 1225)
    (= leaf_2_3 1225)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 1225) (= #b011111 bv_1_0_a) (= #b000000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 1224) (= #b000001 bv_1_1_a) (= #b100000 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 19) (= #b000000 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 20) (= #b000001 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b000010 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b000100 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b001000 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 24) (= #b010000 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 25) (= #b000011 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 26) (= #b000101 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 27) (= #b001001 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 28) (= #b010001 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 29) (= #b000110 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 30) (= #b001010 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 31) (= #b010010 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 32) (= #b001100 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 33) (= #b010100 bv_1_2_a) (= #b000000 bv_1_2_b))
        (and (= leaf_1_2 34) (= #b011000 bv_1_2_a) (= #b000000 bv_1_2_b)))))
(assert (=> (= root_1 12)
    (and (= leaf_1_3 0) (= #b000000 bv_1_3_a) (= #b000000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 1227)))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_0 1225) (= #b011111 bv_2_0_a) (= #b000000 bv_2_0_b))
        (and (= leaf_2_0 1227) (= bv_2_0_a bv_1) (= #b000000 bv_2_0_b)))))
(assert (= leaf_2_1_is_line_1 (= leaf_2_1 1227)))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_1 1225) (= #b011111 bv_2_1_a) (= #b000000 bv_2_1_b))
        (and (= leaf_2_1 1227) (= bv_2_1_a bv_1) (= #b000000 bv_2_1_b)))))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_2 35) (= #b000110 bv_2_2_a) (= #b010100 bv_2_2_b))
        (and (= leaf_2_2 36) (= #b010100 bv_2_2_a) (= #b000110 bv_2_2_b))
        (and (= leaf_2_2 37) (= #b000101 bv_2_2_a) (= #b100100 bv_2_2_b))
        (and (= leaf_2_2 38) (= #b100100 bv_2_2_a) (= #b000101 bv_2_2_b))
        (and (= leaf_2_2 39) (= #b000110 bv_2_2_a) (= #b000110 bv_2_2_b))
        (and (= leaf_2_2 40) (= #b000110 bv_2_2_a) (= #b010010 bv_2_2_b))
        (and (= leaf_2_2 41) (= #b010100 bv_2_2_a) (= #b000110 bv_2_2_b))
        (and (= leaf_2_2 42) (= #b010100 bv_2_2_a) (= #b010010 bv_2_2_b))
        (and (= leaf_2_2 43) (= #b001100 bv_2_2_a) (= #b001010 bv_2_2_b))
        (and (= leaf_2_2 44) (= #b000101 bv_2_2_a) (= #b000011 bv_2_2_b))
        (and (= leaf_2_2 45) (= #b000101 bv_2_2_a) (= #b100010 bv_2_2_b))
        (and (= leaf_2_2 46) (= #b100100 bv_2_2_a) (= #b000011 bv_2_2_b))
        (and (= leaf_2_2 47) (= #b100100 bv_2_2_a) (= #b100010 bv_2_2_b))
        (and (= leaf_2_2 48) (= #b000110 bv_2_2_a) (= #b010100 bv_2_2_b))
        (and (= leaf_2_2 49) (= #b000110 bv_2_2_a) (= #b010010 bv_2_2_b))
        (and (= leaf_2_2 50) (= #b010100 bv_2_2_a) (= #b010100 bv_2_2_b))
        (and (= leaf_2_2 51) (= #b010100 bv_2_2_a) (= #b010010 bv_2_2_b))
        (and (= leaf_2_2 52) (= #b001100 bv_2_2_a) (= #b011000 bv_2_2_b))
        (and (= leaf_2_2 53) (= #b000101 bv_2_2_a) (= #b010001 bv_2_2_b))
        (and (= leaf_2_2 54) (= #b000101 bv_2_2_a) (= #b110000 bv_2_2_b))
        (and (= leaf_2_2 55) (= #b100100 bv_2_2_a) (= #b010001 bv_2_2_b))
        (and (= leaf_2_2 56) (= #b100100 bv_2_2_a) (= #b110000 bv_2_2_b))
        (and (= leaf_2_2 57) (= #b010010 bv_2_2_a) (= #b000110 bv_2_2_b))
        (and (= leaf_2_2 58) (= #b010010 bv_2_2_a) (= #b010100 bv_2_2_b))
        (and (= leaf_2_2 59) (= #b001010 bv_2_2_a) (= #b001100 bv_2_2_b))
        (and (= leaf_2_2 60) (= #b000011 bv_2_2_a) (= #b000101 bv_2_2_b))
        (and (= leaf_2_2 61) (= #b000011 bv_2_2_a) (= #b100100 bv_2_2_b))
        (and (= leaf_2_2 62) (= #b100010 bv_2_2_a) (= #b000101 bv_2_2_b))
        (and (= leaf_2_2 63) (= #b100010 bv_2_2_a) (= #b100100 bv_2_2_b))
        (and (= leaf_2_2 64) (= #b010010 bv_2_2_a) (= #b000110 bv_2_2_b))
        (and (= leaf_2_2 65) (= #b000011 bv_2_2_a) (= #b100010 bv_2_2_b))
        (and (= leaf_2_2 66) (= #b100010 bv_2_2_a) (= #b000011 bv_2_2_b))
        (and (= leaf_2_2 67) (= #b010010 bv_2_2_a) (= #b010100 bv_2_2_b))
        (and (= leaf_2_2 68) (= #b010010 bv_2_2_a) (= #b010010 bv_2_2_b))
        (and (= leaf_2_2 69) (= #b001010 bv_2_2_a) (= #b011000 bv_2_2_b))
        (and (= leaf_2_2 70) (= #b000011 bv_2_2_a) (= #b010001 bv_2_2_b))
        (and (= leaf_2_2 71) (= #b000011 bv_2_2_a) (= #b110000 bv_2_2_b))
        (and (= leaf_2_2 72) (= #b100010 bv_2_2_a) (= #b010001 bv_2_2_b))
        (and (= leaf_2_2 73) (= #b100010 bv_2_2_a) (= #b110000 bv_2_2_b))
        (and (= leaf_2_2 74) (= #b011000 bv_2_2_a) (= #b001100 bv_2_2_b))
        (and (= leaf_2_2 75) (= #b010001 bv_2_2_a) (= #b000101 bv_2_2_b))
        (and (= leaf_2_2 76) (= #b010001 bv_2_2_a) (= #b100100 bv_2_2_b))
        (and (= leaf_2_2 77) (= #b110000 bv_2_2_a) (= #b000101 bv_2_2_b))
        (and (= leaf_2_2 78) (= #b110000 bv_2_2_a) (= #b100100 bv_2_2_b))
        (and (= leaf_2_2 79) (= #b011000 bv_2_2_a) (= #b001010 bv_2_2_b))
        (and (= leaf_2_2 80) (= #b010001 bv_2_2_a) (= #b000011 bv_2_2_b))
        (and (= leaf_2_2 81) (= #b010001 bv_2_2_a) (= #b100010 bv_2_2_b))
        (and (= leaf_2_2 82) (= #b110000 bv_2_2_a) (= #b000011 bv_2_2_b))
        (and (= leaf_2_2 83) (= #b110000 bv_2_2_a) (= #b100010 bv_2_2_b))
        (and (= leaf_2_2 84) (= #b010001 bv_2_2_a) (= #b110000 bv_2_2_b))
        (and (= leaf_2_2 85) (= #b110000 bv_2_2_a) (= #b010001 bv_2_2_b))
        (and (= leaf_2_2 86) (= #b001001 bv_2_2_a) (= #b101000 bv_2_2_b))
        (and (= leaf_2_2 87) (= #b101000 bv_2_2_a) (= #b001001 bv_2_2_b))
        (and (= leaf_2_2 88) (= #b100001 bv_2_2_a) (= #b100001 bv_2_2_b))
        (and (= leaf_2_2 89) (= #b000100 bv_2_2_a) (= #b000010 bv_2_2_b))
        (and (= leaf_2_2 90) (= #b000100 bv_2_2_a) (= #b010000 bv_2_2_b))
        (and (= leaf_2_2 91) (= #b000010 bv_2_2_a) (= #b010000 bv_2_2_b))
        (and (= leaf_2_2 92) (= #b000001 bv_2_2_a) (= #b100000 bv_2_2_b))
        (and (= leaf_2_2 93) (= #b000001 bv_2_2_a) (= #b000001 bv_2_2_b))
        (and (= leaf_2_2 94) (= #b000010 bv_2_2_a) (= #b000010 bv_2_2_b))
        (and (= leaf_2_2 95) (= #b000100 bv_2_2_a) (= #b000100 bv_2_2_b))
        (and (= leaf_2_2 96) (= #b001000 bv_2_2_a) (= #b001000 bv_2_2_b))
        (and (= leaf_2_2 97) (= #b010000 bv_2_2_a) (= #b010000 bv_2_2_b))
        (and (= leaf_2_2 98) (= #b000011 bv_2_2_a) (= #b000011 bv_2_2_b))
        (and (= leaf_2_2 99) (= #b000101 bv_2_2_a) (= #b000101 bv_2_2_b))
        (and (= leaf_2_2 100) (= #b001001 bv_2_2_a) (= #b001001 bv_2_2_b))
        (and (= leaf_2_2 101) (= #b010001 bv_2_2_a) (= #b010001 bv_2_2_b))
        (and (= leaf_2_2 102) (= #b000110 bv_2_2_a) (= #b000110 bv_2_2_b))
        (and (= leaf_2_2 103) (= #b001010 bv_2_2_a) (= #b001010 bv_2_2_b))
        (and (= leaf_2_2 104) (= #b010010 bv_2_2_a) (= #b010010 bv_2_2_b))
        (and (= leaf_2_2 105) (= #b001100 bv_2_2_a) (= #b001100 bv_2_2_b))
        (and (= leaf_2_2 106) (= #b010100 bv_2_2_a) (= #b010100 bv_2_2_b))
        (and (= leaf_2_2 107) (= #b011000 bv_2_2_a) (= #b011000 bv_2_2_b)))))
(assert (=> (= root_2 4)
    (and (= leaf_2_3 0) (= #b000000 bv_2_3_a) (= #b000000 bv_2_3_b))))
(assert (or (= leaf_1_0 1224)
    (= leaf_1_1 1224)
    (= leaf_1_2 1224)
    (= leaf_1_3 1224)
    (= leaf_2_0 1224)
    (= leaf_2_1 1224)
    (= leaf_2_2 1224)
    (= leaf_2_3 1224)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000000 bv_1_2_a)
                    (distinct #b000000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b000000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b000000 bv_2_2_a)
                    (distinct #b000000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b000000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b000000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b000000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i007 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i007.csv", col_types = cols("id" = col_integer(),"home" = col_integer(),"datetime" = col_character(),"player" = col_character(),"resource" = col_integer()))
df_i007$datetime <- mdy(df_i007$datetime)
df_i007 <- copy_to(con, df_i007)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o007.csv", col_types = cols("id" = col_integer(),"home" = col_integer(),"datetime" = col_character(),"player" = col_character(),"resource" = col_integer()))
expected_output$datetime <- mdy(expected_output$datetime)

df305 <- df_i007 %>% group_by(home,player) %>% summarise(maxdatetime = max(datetime)) %>% ungroup()
df306 <- inner_join(df_i007, df305, by=c('player' = 'player','datetime' = 'maxdatetime'), suffix = c('', '.other'), na_matches='never') %>% mutate(maxdatetime = datetime)
out <- df306 %>% select(id, home, datetime, player, resource)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       home,
       datetime,
       player,
       RESOURCE
FROM
  (SELECT id,
          LHS.home AS home,
          datetime,
          LHS.player AS player,
          RESOURCE,
          RHS.home AS home_other
   FROM df_i007 AS LHS
   INNER JOIN
     (SELECT home,
             player,
             MAX(datetime) AS maxdatetime
      FROM df_i007
      GROUP BY home,
               player) AS RHS ON (LHS.player = RHS.player
                                  AND LHS.datetime = RHS.maxdatetime))
