[     2.969][MainProcess][INFO] Parsing specification...
[     2.975][MainProcess][INFO] File read
[     2.977][MainProcess][DEBUG] Reading input files...
[     2.994][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     2.995][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i010_1.csv: ['datetime64[ns]', 'string', 'object']
[     3.005][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     3.007][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i010_2.csv: ['datetime64[ns]', 'datetime64[ns]', 'object']
[     3.016][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     3.017][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o010.csv: ['datetime64[ns]', 'datetime64[ns]', 'object']
[     3.017][MainProcess][INFO] Parsing sketch...
[     3.017][MainProcess][DEBUG] Sketch creation: Line(T1, root=['anti_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Cols, var=[])])
[     3.090][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 104, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 0}
[     3.090][MainProcess][DEBUG] {'natural_join': 0.0196078431372549, 'natural_join3': 0.0392156862745098, 'natural_join4': 0.0784313725490196, 'inner_join': 0.5098039215686274, 'anti_join': 0.21568627450980393, 'left_join': 0.0196078431372549, 'union': 0.0196078431372549, 'intersect': 0.0784313725490196, 'semi_join': 0.0196078431372549, 'cross_join': 0.0}
[     3.090][MainProcess][DEBUG] {'natural_join': 0.0196078431372549, 'natural_join3': 0.0392156862745098, 'natural_join4': 0.0784313725490196, 'inner_join': 0.5098039215686274, 'anti_join': 0.21568627450980393, 'left_join': 0.0196078431372549, 'union': 0.0196078431372549, 'intersect': 0.0784313725490196, 'semi_join': 0.0196078431372549, 'cross_join': 0.0}
[     3.090][MainProcess][INFO] Building synthesizer...
[     3.092][MainProcess][DEBUG] [Line(T1, root=['anti_join'], var=[5], children=[Child(['??'], type=Table, var=[52, 53]),Child(['??'], type=Table, var=[52, 53]),Child(['??'], type=Cols, var=[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]),Child([None], type=None, var=[0])])]
[     3.153][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 42 constraints
[     3.157][MainProcess][DEBUG] Enumeration time: 0.06659507751464844
[     3.255][MainProcess][DEBUG] Synthesis time: 0.09741592407226562
[     3.255][MainProcess][INFO] Solution found: [anti_join(input1, input0, 'phone_number')]
[     3.256][MainProcess][DEBUG] Solution found using process 0
[     3.256][MainProcess][INFO] Statistics:
[     3.256][MainProcess][INFO] 	Attempted programs: 5 (approx)
[     3.256][MainProcess][INFO] 		Rejected: 4 (approx)
[     3.256][MainProcess][INFO] 		Failed: 0 (approx)
[     3.256][MainProcess][INFO] 		Empty outputs: 1 (20.0%) (approx)
[     3.256][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     3.256][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     3.256][MainProcess][INFO] 	Total time spent in enumerator init: 0.066595 (approx)
[     3.256][MainProcess][INFO] 	Total time spent in enumerator: 0.005533 (approx)
[     3.256][MainProcess][INFO] 		Enumerated 903.711109 programs/s avg. (just enumeration time)
[     3.256][MainProcess][INFO] 		Enumerated 2.144029 programs/s avg. (overall)
[     3.257][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.087959 (approx)
[     3.257][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.003201 (approx)
[     3.257][MainProcess][INFO] Solution found: [anti_join(input1, input0, 'phone_number')]
[     3.257][MainProcess][INFO] Solution size: 1
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 5)))
(assert (or (= leaf_1_0 52) (= leaf_1_0 53)))
(assert (<= leaf_1_0 53))
(assert (>= leaf_1_0 52))
(assert (or (= leaf_1_1 52) (= leaf_1_1 53)))
(assert (<= leaf_1_1 53))
(assert (>= leaf_1_1 52))
(assert (or (= leaf_1_2 15)
    (= leaf_1_2 16)
    (= leaf_1_2 17)
    (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)))
(assert (<= leaf_1_2 25))
(assert (>= leaf_1_2 15))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (or (= leaf_1_0 52) (= leaf_1_1 52) (= leaf_1_2 52) (= leaf_1_3 52)))
(assert (or (= leaf_1_0 53) (= leaf_1_1 53) (= leaf_1_2 53) (= leaf_1_3 53)))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 5)
    (or (and (= leaf_1_0 52) (= #xe bv_1_0_a) (= #x0 bv_1_0_b))
        (and (= leaf_1_0 53) (= #xb bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 5)
    (or (and (= leaf_1_1 52) (= #xe bv_1_1_a) (= #x0 bv_1_1_b))
        (and (= leaf_1_1 53) (= #xb bv_1_1_a) (= #x0 bv_1_1_b)))))
(assert (=> (= root_1 5)
    (or (and (= leaf_1_2 15) (= #x0 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 16) (= #x1 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 17) (= #x2 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 18) (= #x4 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 19) (= #x8 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 20) (= #x3 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 21) (= #x5 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 22) (= #x9 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 23) (= #x6 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 24) (= #xa bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 25) (= #xc bv_1_2_a) (= #x0 bv_1_2_b)))))
(assert (=> (= root_1 5) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i010_1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i010_1.csv", col_types = cols("id" = col_character(),"name" = col_character(),"phone_number" = col_character()))
df_i010_1$id <- parse_datetime(df_i010_1$id)
df_i010_1 <- copy_to(con, df_i010_1)
df_i010_2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i010_2.csv", col_types = cols("id" = col_character(),"date" = col_character(),"phone_number" = col_character()))
df_i010_2$id <- parse_datetime(df_i010_2$id)
df_i010_2$date <- parse_datetime(df_i010_2$date)
df_i010_2 <- copy_to(con, df_i010_2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o010.csv", col_types = cols("id" = col_character(),"date" = col_character(),"phone_number" = col_character()))
expected_output$id <- parse_datetime(expected_output$id)
expected_output$date <- parse_datetime(expected_output$date)

df6 <- anti_join(df_i010_2, df_i010_1, by=c('phone_number'), na_matches="never")
out <- df6 %>% select(id, date, phone_number)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id, date, phone_number
FROM
  (SELECT *
   FROM df_i010_2 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_i010_1 AS RHS
        WHERE (LHS.phone_number = RHS.phone_number) ))
