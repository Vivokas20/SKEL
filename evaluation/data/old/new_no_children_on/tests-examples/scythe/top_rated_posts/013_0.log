[     2.366][MainProcess][INFO] Parsing specification...
[     2.371][MainProcess][INFO] File read
[     2.372][MainProcess][DEBUG] Reading input files...
[     2.382][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i013.csv: ['string', 'int64']
[     2.388][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o013.csv: ['string', 'int64', 'int64']
[     2.388][MainProcess][INFO] Parsing sketch...
[     2.389][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.389][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.389][MainProcess][DEBUG] Sketch creation: Line(T3, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.428][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 7, 'anti_join': 4, 'left_join': 1, 'union': 1, 'intersect': 2, 'semi_join': 1, 'cross_join': 6, 'filter': 6, 'summarise': 4, 'mutate': 1}
[     2.428][MainProcess][DEBUG] {'natural_join': 0.027777777777777776, 'natural_join3': 0.027777777777777776, 'natural_join4': 0.027777777777777776, 'inner_join': 0.19444444444444445, 'anti_join': 0.1111111111111111, 'left_join': 0.027777777777777776, 'union': 0.027777777777777776, 'intersect': 0.05555555555555555, 'semi_join': 0.027777777777777776, 'cross_join': 0.16666666666666666, 'filter': 0.16666666666666666, 'summarise': 0.1111111111111111, 'mutate': 0.027777777777777776}
[     2.428][MainProcess][DEBUG] {'natural_join': 0.02777777777777778, 'natural_join3': 0.02777777777777778, 'natural_join4': 0.02777777777777778, 'inner_join': 0.19444444444444448, 'anti_join': 0.11111111111111112, 'left_join': 0.02777777777777778, 'union': 0.02777777777777778, 'intersect': 0.05555555555555556, 'semi_join': 0.02777777777777778, 'cross_join': 0.16666666666666669, 'filter': 0.16666666666666669, 'summarise': 0.11111111111111112, 'mutate': 0.02777777777777778}
[     2.428][MainProcess][INFO] Building synthesizer...
[     2.430][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[40]),Child(['??'], type=SummariseCondition, var=[39]),Child(['??'], type=Cols, var=[16, 17, 18, 19]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[40]),Child(['??'], type=FilterCondition, var=[33, 34, 35, 36, 37, 38]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T3, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[40]),Child(['??'], type=Table, var=[40]),Child(['??'], type=JoinCondition, var=[20, 21, 22, 23, 24, 25, 26]),Child([None], type=None, var=[0])])]
[     2.595][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 166 constraints
[     2.602][MainProcess][DEBUG] Enumeration time: 0.17362070083618164
[     9.093][MainProcess][DEBUG] Synthesis time: 6.49134635925293
[     9.094][MainProcess][INFO] Solution found: [summarise(input0, 'n = n()', 'orgName'), filter(line0, 'n > 1'), inner_join(line1, input0, 'orgName')]
[     9.099][MainProcess][DEBUG] Solution found using process 0
[     9.099][MainProcess][INFO] Statistics:
[     9.099][MainProcess][INFO] 	Attempted programs: 518 (approx)
[     9.099][MainProcess][INFO] 		Rejected: 517 (approx)
[     9.099][MainProcess][INFO] 		Failed: 0 (approx)
[     9.099][MainProcess][INFO] 		Empty outputs: 266 (51.4%) (approx)
[     9.099][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     9.100][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     9.100][MainProcess][INFO] 	Total time spent in enumerator init: 0.173621 (approx)
[     9.100][MainProcess][INFO] 	Total time spent in enumerator: 1.172338 (approx)
[     9.100][MainProcess][INFO] 		Enumerated 441.852180 programs/s avg. (just enumeration time)
[     9.100][MainProcess][INFO] 		Enumerated 61.625137 programs/s avg. (overall)
[     9.100][MainProcess][INFO] 	Total time spent in evaluation & testing: 4.875590 (approx)
[     9.100][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.440202 (approx)
[     9.100][MainProcess][INFO] Solution found: [summarise(input0, 'n = n()', 'orgName'), filter(line0, 'n > 1'), inner_join(line1, input0, 'orgName')]
[     9.100][MainProcess][INFO] Solution size: 3
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun type_3 () Int)
(declare-fun root_3 () Int)
(declare-fun leaf_3_0 () Int)
(declare-fun leaf_3_1 () Int)
(declare-fun leaf_3_2 () Int)
(declare-fun leaf_3_3 () Int)
(declare-fun leaf_3_3_is_line_1 () Bool)
(declare-fun leaf_3_2_is_line_1 () Bool)
(declare-fun leaf_3_1_is_line_1 () Bool)
(declare-fun leaf_3_0_is_line_1 () Bool)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun leaf_3_3_is_line_2 () Bool)
(declare-fun leaf_3_2_is_line_2 () Bool)
(declare-fun leaf_3_1_is_line_2 () Bool)
(declare-fun leaf_3_0_is_line_2 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 3))
(declare-fun bv_1_0_a () (_ BitVec 3))
(declare-fun bv_1_1_b () (_ BitVec 3))
(declare-fun bv_1_1_a () (_ BitVec 3))
(declare-fun bv_1_2_b () (_ BitVec 3))
(declare-fun bv_1_2_a () (_ BitVec 3))
(declare-fun bv_1_3_b () (_ BitVec 3))
(declare-fun bv_1_3_a () (_ BitVec 3))
(declare-fun bv_2_0_b () (_ BitVec 3))
(declare-fun bv_1 () (_ BitVec 3))
(declare-fun bv_2_0_a () (_ BitVec 3))
(declare-fun bv_2_1_b () (_ BitVec 3))
(declare-fun bv_2_1_a () (_ BitVec 3))
(declare-fun bv_2_2_b () (_ BitVec 3))
(declare-fun bv_2_2_a () (_ BitVec 3))
(declare-fun bv_2_3_b () (_ BitVec 3))
(declare-fun bv_2_3_a () (_ BitVec 3))
(declare-fun bv_3_0_b () (_ BitVec 3))
(declare-fun bv_2 () (_ BitVec 3))
(declare-fun bv_3_0_a () (_ BitVec 3))
(declare-fun bv_3_1_b () (_ BitVec 3))
(declare-fun bv_3_1_a () (_ BitVec 3))
(declare-fun bv_3_2_b () (_ BitVec 3))
(declare-fun bv_3_2_a () (_ BitVec 3))
(declare-fun bv_3_3_b () (_ BitVec 3))
(declare-fun bv_3_3_a () (_ BitVec 3))
(declare-fun bv_3 () (_ BitVec 3))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 40)))
(assert (<= leaf_1_0 40))
(assert (>= leaf_1_0 40))
(assert (or (= leaf_1_1 39)))
(assert (<= leaf_1_1 39))
(assert (>= leaf_1_1 39))
(assert (or (= leaf_1_2 16) (= leaf_1_2 17) (= leaf_1_2 18) (= leaf_1_2 19)))
(assert (<= leaf_1_2 19))
(assert (>= leaf_1_2 16))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 40) (= leaf_2_0 42)))
(assert (<= leaf_2_0 42))
(assert (>= leaf_2_0 40))
(assert (or (= leaf_2_1 33)
    (= leaf_2_1 34)
    (= leaf_2_1 35)
    (= leaf_2_1 36)
    (= leaf_2_1 37)
    (= leaf_2_1 38)))
(assert (<= leaf_2_1 38))
(assert (>= leaf_2_1 33))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (< type_3 1))
(assert (>= type_3 0))
(assert (or (= root_3 4)))
(assert (or (= leaf_3_0 40) (= leaf_3_0 42) (= leaf_3_0 43)))
(assert (<= leaf_3_0 43))
(assert (>= leaf_3_0 40))
(assert (or (= leaf_3_1 40) (= leaf_3_1 42) (= leaf_3_1 43)))
(assert (<= leaf_3_1 43))
(assert (>= leaf_3_1 40))
(assert (or (= leaf_3_2 20)
    (= leaf_3_2 21)
    (= leaf_3_2 22)
    (= leaf_3_2 23)
    (= leaf_3_2 24)
    (= leaf_3_2 25)
    (= leaf_3_2 26)))
(assert (<= leaf_3_2 26))
(assert (>= leaf_3_2 20))
(assert (or (= leaf_3_3 0)))
(assert (<= leaf_3_3 0))
(assert (>= leaf_3_3 0))
(assert (or (= leaf_1_0 40)
    (= leaf_1_1 40)
    (= leaf_1_2 40)
    (= leaf_1_3 40)
    (= leaf_2_0 40)
    (= leaf_2_1 40)
    (= leaf_2_2 40)
    (= leaf_2_3 40)
    (= leaf_3_0 40)
    (= leaf_3_1 40)
    (= leaf_3_2 40)
    (= leaf_3_3 40)))
(assert (or leaf_2_0_is_line_1
    leaf_2_1_is_line_1
    leaf_2_2_is_line_1
    leaf_2_3_is_line_1
    leaf_3_0_is_line_1
    leaf_3_1_is_line_1
    leaf_3_2_is_line_1
    leaf_3_3_is_line_1))
(assert (or leaf_3_0_is_line_2 leaf_3_1_is_line_2 leaf_3_2_is_line_2 leaf_3_3_is_line_2))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_3 1) (= type_3 0)))
(assert (=> (= root_3 2) (= type_3 0)))
(assert (=> (= root_3 3) (= type_3 0)))
(assert (=> (= root_3 4) (= type_3 0)))
(assert (=> (= root_3 5) (= type_3 0)))
(assert (=> (= root_3 6) (= type_3 0)))
(assert (=> (= root_3 7) (= type_3 0)))
(assert (=> (= root_3 8) (= type_3 0)))
(assert (=> (= root_3 9) (= type_3 0)))
(assert (=> (= root_3 10) (= type_3 0)))
(assert (=> (= root_3 11) (= type_3 0)))
(assert (=> (= root_3 12) (= type_3 0)))
(assert (=> (= root_3 13) (= type_3 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 40) (= #b011 bv_1_0_a) (= #b000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 39) (= #b000 bv_1_1_a) (= #b100 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 16) (= #b000 bv_1_2_a) (= #b000 bv_1_2_b))
        (and (= leaf_1_2 17) (= #b001 bv_1_2_a) (= #b000 bv_1_2_b))
        (and (= leaf_1_2 18) (= #b010 bv_1_2_a) (= #b000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b011 bv_1_2_a) (= #b000 bv_1_2_b)))))
(assert (=> (= root_1 12) (and (= leaf_1_3 0) (= #b000 bv_1_3_a) (= #b000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 42)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 40) (= #b011 bv_2_0_a) (= #b000 bv_2_0_b))
        (and (= leaf_2_0 42) (= bv_2_0_a bv_1) (= #b000 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 33) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 34) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 35) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 36) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 37) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b))
        (and (= leaf_2_1 38) (= #b100 bv_2_1_a) (= #b000 bv_2_1_b)))))
(assert (=> (= root_2 11) (and (= leaf_2_2 0) (= #b000 bv_2_2_a) (= #b000 bv_2_2_b))))
(assert (=> (= root_2 11) (and (= leaf_2_3 0) (= #b000 bv_2_3_a) (= #b000 bv_2_3_b))))
(assert (= leaf_3_0_is_line_1 (= leaf_3_0 42)))
(assert (= leaf_3_0_is_line_2 (= leaf_3_0 43)))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_0 40) (= #b011 bv_3_0_a) (= #b000 bv_3_0_b))
        (and (= leaf_3_0 42) (= bv_3_0_a bv_1) (= #b000 bv_3_0_b))
        (and (= leaf_3_0 43) (= bv_3_0_a bv_2) (= #b000 bv_3_0_b)))))
(assert (= leaf_3_1_is_line_1 (= leaf_3_1 42)))
(assert (= leaf_3_1_is_line_2 (= leaf_3_1 43)))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_1 40) (= #b011 bv_3_1_a) (= #b000 bv_3_1_b))
        (and (= leaf_3_1 42) (= bv_3_1_a bv_1) (= #b000 bv_3_1_b))
        (and (= leaf_3_1 43) (= bv_3_1_a bv_2) (= #b000 bv_3_1_b)))))
(assert (=> (= root_3 4)
    (or (and (= leaf_3_2 20) (= #b101 bv_3_2_a) (= #b101 bv_3_2_b))
        (and (= leaf_3_2 21) (= #b011 bv_3_2_a) (= #b110 bv_3_2_b))
        (and (= leaf_3_2 22) (= #b110 bv_3_2_a) (= #b011 bv_3_2_b))
        (and (= leaf_3_2 23) (= #b001 bv_3_2_a) (= #b100 bv_3_2_b))
        (and (= leaf_3_2 24) (= #b001 bv_3_2_a) (= #b001 bv_3_2_b))
        (and (= leaf_3_2 25) (= #b010 bv_3_2_a) (= #b010 bv_3_2_b))
        (and (= leaf_3_2 26) (= #b011 bv_3_2_a) (= #b011 bv_3_2_b)))))
(assert (=> (= root_3 4) (and (= leaf_3_3 0) (= #b000 bv_3_3_a) (= #b000 bv_3_3_b))))
(assert (or (= leaf_1_0 39)
    (= leaf_1_1 39)
    (= leaf_1_2 39)
    (= leaf_1_3 39)
    (= leaf_2_0 39)
    (= leaf_2_1 39)
    (= leaf_2_2 39)
    (= leaf_2_3 39)
    (= leaf_3_0 39)
    (= leaf_3_1 39)
    (= leaf_3_2 39)
    (= leaf_3_3 39)))
(assert (or (= leaf_1_0 33)
    (= leaf_1_1 33)
    (= leaf_1_2 33)
    (= leaf_1_3 33)
    (= leaf_2_0 33)
    (= leaf_2_1 33)
    (= leaf_2_2 33)
    (= leaf_2_3 33)
    (= leaf_3_0 33)
    (= leaf_3_1 33)
    (= leaf_3_2 33)
    (= leaf_3_3 33)
    (= leaf_1_0 34)
    (= leaf_1_1 34)
    (= leaf_1_2 34)
    (= leaf_1_3 34)
    (= leaf_2_0 34)
    (= leaf_2_1 34)
    (= leaf_2_2 34)
    (= leaf_2_3 34)
    (= leaf_3_0 34)
    (= leaf_3_1 34)
    (= leaf_3_2 34)
    (= leaf_3_3 34)
    (= leaf_1_0 35)
    (= leaf_1_1 35)
    (= leaf_1_2 35)
    (= leaf_1_3 35)
    (= leaf_2_0 35)
    (= leaf_2_1 35)
    (= leaf_2_2 35)
    (= leaf_2_3 35)
    (= leaf_3_0 35)
    (= leaf_3_1 35)
    (= leaf_3_2 35)
    (= leaf_3_3 35)
    (= leaf_1_0 36)
    (= leaf_1_1 36)
    (= leaf_1_2 36)
    (= leaf_1_3 36)
    (= leaf_2_0 36)
    (= leaf_2_1 36)
    (= leaf_2_2 36)
    (= leaf_2_3 36)
    (= leaf_3_0 36)
    (= leaf_3_1 36)
    (= leaf_3_2 36)
    (= leaf_3_3 36)
    (= leaf_1_0 37)
    (= leaf_1_1 37)
    (= leaf_1_2 37)
    (= leaf_1_3 37)
    (= leaf_2_0 37)
    (= leaf_2_1 37)
    (= leaf_2_2 37)
    (= leaf_2_3 37)
    (= leaf_3_0 37)
    (= leaf_3_1 37)
    (= leaf_3_2 37)
    (= leaf_3_3 37)
    (= leaf_1_0 38)
    (= leaf_1_1 38)
    (= leaf_1_2 38)
    (= leaf_1_3 38)
    (= leaf_2_0 38)
    (= leaf_2_1 38)
    (= leaf_2_2 38)
    (= leaf_2_3 38)
    (= leaf_3_0 38)
    (= leaf_3_1 38)
    (= leaf_3_2 38)
    (= leaf_3_3 38)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 2))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 1))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 3))
    (distinct root_3 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (=> (and (or leaf_3_0_is_line_1
             leaf_3_1_is_line_1
             leaf_3_2_is_line_1
             leaf_3_3_is_line_1)
         (= root_1 5))
    (distinct root_3 5)))
(assert (=> (and (or leaf_3_0_is_line_2
             leaf_3_1_is_line_2
             leaf_3_2_is_line_2
             leaf_3_3_is_line_2)
         (= root_2 5))
    (distinct root_3 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_3_0 leaf_3_1)
                    (and (= leaf_3_0 0) (= leaf_3_1 0)))
                (or (distinct leaf_3_0 leaf_3_2)
                    (and (= leaf_3_0 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_0 leaf_3_3)
                    (and (= leaf_3_0 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_1 leaf_3_2)
                    (and (= leaf_3_1 0) (= leaf_3_2 0)))
                (or (distinct leaf_3_1 leaf_3_3)
                    (and (= leaf_3_1 0) (= leaf_3_3 0)))
                (or (distinct leaf_3_2 leaf_3_3)
                    (and (= leaf_3_2 0) (= leaf_3_3 0))))))
  (=> (= root_3 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000 bv_1_2_a)
                    (distinct #b000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b000 bv_2_2_a)
                    (distinct #b000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_3 1) (and (< leaf_3_0 leaf_3_1) (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 2)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a) bv_3))))
(assert (=> (= root_3 3)
    (and (< leaf_3_0 leaf_3_1)
         (< leaf_3_1 leaf_3_2)
         (< leaf_3_2 leaf_3_3)
         (= (bvor bv_3_0_a bv_3_1_a bv_3_2_a bv_3_3_a) bv_3))))
(assert (=> (= root_3 4)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (let ((a!1 (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
                (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
                (=> (= #b000 bv_3_2_a)
                    (distinct #b000 (bvand bv_3_0_a bv_3_1_a)))
                (= bv_3_0_a bv_3))))
  (=> (= root_3 5) a!1)))
(assert (=> (= root_3 6)
    (and (distinct #b000 (bvand bv_3_0_a bv_3_1_a))
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 7) (= (bvor bv_3_0_a bv_3_1_a) bv_3)))
(assert (=> (= root_3 8)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_1_a bv_3_2_a) bv_3_2_a)
         (= bv_3_2_a bv_3))))
(assert (=> (= root_3 9)
    (and (distinct #b000 (bvand bv_3_0_a bv_3_1_a)) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 10)
    (and (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= (bvand bv_3_0_a bv_3_1_a bv_3_2_b) bv_3_2_b)
         (= (bvor bv_3_0_a bv_3_1_a) bv_3))))
(assert (=> (= root_3 11)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a) (= bv_3_0_a bv_3))))
(assert (=> (= root_3 12)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvand bv_3_0_a bv_3_2_a) bv_3_2_a)
         (= #b000 (bvand bv_3_1_b bv_3_2_a))
         (= (bvor bv_3_1_b bv_3_2_a) bv_3))))
(assert (=> (= root_3 13)
    (and (= (bvand bv_3_0_a bv_3_1_a) bv_3_1_a)
         (= (bvor bv_3_0_a bv_3_1_b) bv_3))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i013 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i013.csv", col_types = cols("orgName" = col_character(),"id" = col_integer()))
df_i013 <- copy_to(con, df_i013)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o013.csv", col_types = cols("orgName" = col_character(),"n" = col_integer(),"id" = col_integer()))

df355 <- df_i013 %>% group_by(orgName) %>% summarise(n = n()) %>% ungroup()
df356 <- df355 %>% filter(n > 1)
df357 <- inner_join(df356, df_i013, by=c('orgName'), suffix = c('', '.other'), na_matches='never')
out <- df357 %>% select(orgName, n, id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT orgName,
       n,
       id
FROM
  (SELECT LHS.orgName AS orgName,
          n,
          id
   FROM
     (SELECT *
      FROM
        (SELECT orgName,
                COUNT(*) AS n
         FROM df_i013
         GROUP BY orgName)
      WHERE (n > 1.0)) AS LHS
   INNER JOIN df_i013 AS RHS ON (LHS.orgName = RHS.orgName))
