[     2.352][MainProcess][INFO] Parsing specification...
[     2.357][MainProcess][INFO] File read
[     2.358][MainProcess][DEBUG] Reading input files...
[     2.369][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i036.csv: ['string', 'datetime64[ns]', 'Float64']
[     2.376][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o036.csv: ['string', 'datetime64[ns]', 'Float64']
[     2.377][MainProcess][INFO] Parsing sketch...
[     2.377][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.377][MainProcess][DEBUG] Sketch creation: Line(T2, root=['inner_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=JoinCondition, var=[])])
[     2.450][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 12, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 1110, 'filter': 6, 'summarise': 7, 'mutate': 1}
[     2.450][MainProcess][DEBUG] {'natural_join': 0.0008680555555555555, 'natural_join3': 0.0008680555555555555, 'natural_join4': 0.0008680555555555555, 'inner_join': 0.010416666666666666, 'anti_join': 0.006076388888888889, 'left_join': 0.0008680555555555555, 'union': 0.0008680555555555555, 'intersect': 0.0026041666666666665, 'semi_join': 0.0008680555555555555, 'cross_join': 0.9635416666666666, 'filter': 0.005208333333333333, 'summarise': 0.006076388888888889, 'mutate': 0.0008680555555555555}
[     2.450][MainProcess][DEBUG] {'natural_join': 0.0008680555555555555, 'natural_join3': 0.0008680555555555555, 'natural_join4': 0.0008680555555555555, 'inner_join': 0.010416666666666666, 'anti_join': 0.006076388888888889, 'left_join': 0.0008680555555555555, 'union': 0.0008680555555555555, 'intersect': 0.0026041666666666665, 'semi_join': 0.0008680555555555555, 'cross_join': 0.9635416666666666, 'filter': 0.005208333333333333, 'summarise': 0.006076388888888889, 'mutate': 0.0008680555555555555}
[     2.450][MainProcess][INFO] Building synthesizer...
[     2.452][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[1153]),Child(['??'], type=SummariseCondition, var=[1152]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])]), Line(T2, root=['inner_join'], var=[4], children=[Child(['??'], type=Table, var=[1153]),Child(['??'], type=Table, var=[1153]),Child(['??'], type=JoinCondition, var=[24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]),Child([None], type=None, var=[0])])]
[     2.559][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 103 constraints
[     2.564][MainProcess][DEBUG] Enumeration time: 0.11338257789611816
[     3.721][MainProcess][DEBUG] Synthesis time: 1.1569736003875732
[     3.721][MainProcess][INFO] Solution found: [summarise(input0, 'maxdate = max(date)', 'username'), inner_join(line0, input0, 'username = username,maxdate = date')]
[     3.723][MainProcess][DEBUG] Solution found using process 0
[     3.723][MainProcess][INFO] Statistics:
[     3.723][MainProcess][INFO] 	Attempted programs: 71 (approx)
[     3.723][MainProcess][INFO] 		Rejected: 70 (approx)
[     3.723][MainProcess][INFO] 		Failed: 0 (approx)
[     3.723][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     3.724][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     3.724][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     3.724][MainProcess][INFO] 	Total time spent in enumerator init: 0.113383 (approx)
[     3.724][MainProcess][INFO] 	Total time spent in enumerator: 0.107899 (approx)
[     3.724][MainProcess][INFO] 		Enumerated 658.024536 programs/s avg. (just enumeration time)
[     3.724][MainProcess][INFO] 		Enumerated 23.372654 programs/s avg. (overall)
[     3.724][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.996858 (approx)
[     3.724][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.051110 (approx)
[     3.724][MainProcess][INFO] Solution found: [summarise(input0, 'maxdate = max(date)', 'username'), inner_join(line0, input0, 'username = username,maxdate = date')]
[     3.724][MainProcess][INFO] Solution size: 2
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_2_0_b () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(declare-fun bv_2_0_a () (_ BitVec 4))
(declare-fun bv_2_1_b () (_ BitVec 4))
(declare-fun bv_2_1_a () (_ BitVec 4))
(declare-fun bv_2_2_b () (_ BitVec 4))
(declare-fun bv_2_2_a () (_ BitVec 4))
(declare-fun bv_2_3_b () (_ BitVec 4))
(declare-fun bv_2_3_a () (_ BitVec 4))
(declare-fun bv_2 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 1153)))
(assert (<= leaf_1_0 1153))
(assert (>= leaf_1_0 1153))
(assert (or (= leaf_1_1 1152)))
(assert (<= leaf_1_1 1152))
(assert (>= leaf_1_1 1152))
(assert (or (= leaf_1_2 17)
    (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)))
(assert (<= leaf_1_2 23))
(assert (>= leaf_1_2 17))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 4)))
(assert (or (= leaf_2_0 1153) (= leaf_2_0 1155)))
(assert (<= leaf_2_0 1155))
(assert (>= leaf_2_0 1153))
(assert (or (= leaf_2_1 1153) (= leaf_2_1 1155)))
(assert (<= leaf_2_1 1155))
(assert (>= leaf_2_1 1153))
(assert (or (= leaf_2_2 24)
    (= leaf_2_2 25)
    (= leaf_2_2 26)
    (= leaf_2_2 27)
    (= leaf_2_2 28)
    (= leaf_2_2 29)
    (= leaf_2_2 30)
    (= leaf_2_2 31)
    (= leaf_2_2 32)
    (= leaf_2_2 33)
    (= leaf_2_2 34)
    (= leaf_2_2 35)))
(assert (<= leaf_2_2 35))
(assert (>= leaf_2_2 24))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 1153)
    (= leaf_1_1 1153)
    (= leaf_1_2 1153)
    (= leaf_1_3 1153)
    (= leaf_2_0 1153)
    (= leaf_2_1 1153)
    (= leaf_2_2 1153)
    (= leaf_2_3 1153)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 1153) (= #x7 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 1152) (= #x1 bv_1_1_a) (= #x8 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 17) (= #x0 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 18) (= #x1 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 19) (= #x2 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 20) (= #x4 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 21) (= #x3 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 22) (= #x5 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 23) (= #x6 bv_1_2_a) (= #x0 bv_1_2_b)))))
(assert (=> (= root_1 12) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 1155)))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_0 1153) (= #x7 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 1155) (= bv_2_0_a bv_1) (= #x0 bv_2_0_b)))))
(assert (= leaf_2_1_is_line_1 (= leaf_2_1 1155)))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_1 1153) (= #x7 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 1155) (= bv_2_1_a bv_1) (= #x0 bv_2_1_b)))))
(assert (=> (= root_2 4)
    (or (and (= leaf_2_2 24) (= #x3 bv_2_2_a) (= #xa bv_2_2_b))
        (and (= leaf_2_2 25) (= #xa bv_2_2_a) (= #x3 bv_2_2_b))
        (and (= leaf_2_2 26) (= #x5 bv_2_2_a) (= #xc bv_2_2_b))
        (and (= leaf_2_2 27) (= #xc bv_2_2_a) (= #x5 bv_2_2_b))
        (and (= leaf_2_2 28) (= #x9 bv_2_2_a) (= #x9 bv_2_2_b))
        (and (= leaf_2_2 29) (= #x1 bv_2_2_a) (= #x8 bv_2_2_b))
        (and (= leaf_2_2 30) (= #x1 bv_2_2_a) (= #x1 bv_2_2_b))
        (and (= leaf_2_2 31) (= #x2 bv_2_2_a) (= #x2 bv_2_2_b))
        (and (= leaf_2_2 32) (= #x4 bv_2_2_a) (= #x4 bv_2_2_b))
        (and (= leaf_2_2 33) (= #x3 bv_2_2_a) (= #x3 bv_2_2_b))
        (and (= leaf_2_2 34) (= #x5 bv_2_2_a) (= #x5 bv_2_2_b))
        (and (= leaf_2_2 35) (= #x6 bv_2_2_a) (= #x6 bv_2_2_b)))))
(assert (=> (= root_2 4) (and (= leaf_2_3 0) (= #x0 bv_2_3_a) (= #x0 bv_2_3_b))))
(assert (or (= leaf_1_0 1152)
    (= leaf_1_1 1152)
    (= leaf_1_2 1152)
    (= leaf_1_3 1152)
    (= leaf_2_0 1152)
    (= leaf_2_1 1152)
    (= leaf_2_2 1152)
    (= leaf_2_3 1152)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #x0 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #x0 bv_2_2_a) (distinct #x0 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #x0 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i036 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i036.csv", col_types = cols("username" = col_character(),"date" = col_character(),"value" = col_double()))
df_i036$date <- ymd(df_i036$date)
df_i036 <- copy_to(con, df_i036)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o036.csv", col_types = cols("username" = col_character(),"date" = col_character(),"value" = col_double()))
expected_output$date <- ymd(expected_output$date)

df60 <- df_i036 %>% group_by(username) %>% summarise(maxdate = max(date)) %>% ungroup()
df61 <- inner_join(df60, df_i036, by=c('username' = 'username','maxdate' = 'date'), suffix = c('', '.other'), na_matches='never') %>% mutate(date = maxdate)
out <- df61 %>% select(username, date, value)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT username,
       maxdate AS date,
       value
FROM
  (SELECT LHS.username AS username,
          maxdate,
          value
   FROM
     (SELECT username,
             MAX(date) AS maxdate
      FROM df_i036
      GROUP BY username) AS LHS
   INNER JOIN df_i036 AS RHS ON (LHS.username = RHS.username
                                 AND LHS.maxdate = RHS.date))
