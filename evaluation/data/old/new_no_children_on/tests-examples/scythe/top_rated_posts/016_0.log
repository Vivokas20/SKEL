[     2.364][MainProcess][INFO] Parsing specification...
[     2.369][MainProcess][INFO] File read
[     2.370][MainProcess][DEBUG] Reading input files...
[     2.380][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i016.csv: ['int64', 'int64', 'string']
[     2.386][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o016.csv: ['int64', 'string']
[     2.386][MainProcess][INFO] Parsing sketch...
[     2.387][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.427][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 22, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 130, 'unite': 9, 'summarise': 28, 'mutate': 4}
[     2.427][MainProcess][DEBUG] {'natural_join': 0.004784688995215311, 'natural_join3': 0.004784688995215311, 'natural_join4': 0.004784688995215311, 'inner_join': 0.10526315789473684, 'anti_join': 0.03349282296650718, 'left_join': 0.004784688995215311, 'union': 0.004784688995215311, 'intersect': 0.014354066985645933, 'semi_join': 0.004784688995215311, 'cross_join': 0.6220095693779905, 'unite': 0.0430622009569378, 'summarise': 0.1339712918660287, 'mutate': 0.019138755980861243}
[     2.427][MainProcess][DEBUG] {'natural_join': 0.004784688995215311, 'natural_join3': 0.004784688995215311, 'natural_join4': 0.004784688995215311, 'inner_join': 0.10526315789473684, 'anti_join': 0.03349282296650718, 'left_join': 0.004784688995215311, 'union': 0.004784688995215311, 'intersect': 0.014354066985645933, 'semi_join': 0.004784688995215311, 'cross_join': 0.6220095693779905, 'unite': 0.0430622009569378, 'summarise': 0.1339712918660287, 'mutate': 0.019138755980861243}
[     2.428][MainProcess][INFO] Building synthesizer...
[     2.429][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[180]),Child(['??'], type=SummariseCondition, var=[176, 177, 178, 179]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])])]
[     2.483][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 48 constraints
[     2.486][MainProcess][DEBUG] Enumeration time: 0.05838656425476074
[     2.790][MainProcess][DEBUG] Synthesis time: 0.3034088611602783
[     2.790][MainProcess][INFO] Solution found: [summarise(input0, "concatEMPLOYEE = string_agg(EMPLOYEE, ', ')", 'COMPANY_ID')]
[     2.791][MainProcess][DEBUG] Solution found using process 0
[     2.791][MainProcess][INFO] Statistics:
[     2.791][MainProcess][INFO] 	Attempted programs: 24 (approx)
[     2.791][MainProcess][INFO] 		Rejected: 23 (approx)
[     2.791][MainProcess][INFO] 		Failed: 0 (approx)
[     2.791][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.791][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.791][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.791][MainProcess][INFO] 	Total time spent in enumerator init: 0.058387 (approx)
[     2.792][MainProcess][INFO] 	Total time spent in enumerator: 0.025070 (approx)
[     2.792][MainProcess][INFO] 		Enumerated 957.312234 programs/s avg. (just enumeration time)
[     2.792][MainProcess][INFO] 		Enumerated 11.440527 programs/s avg. (overall)
[     2.792][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.266598 (approx)
[     2.792][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.011094 (approx)
[     2.792][MainProcess][INFO] Solution found: [summarise(input0, "concatEMPLOYEE = string_agg(EMPLOYEE, ', ')", 'COMPANY_ID')]
[     2.792][MainProcess][INFO] Solution size: 1
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 180)))
(assert (<= leaf_1_0 180))
(assert (>= leaf_1_0 180))
(assert (or (= leaf_1_1 176) (= leaf_1_1 177) (= leaf_1_1 178) (= leaf_1_1 179)))
(assert (<= leaf_1_1 179))
(assert (>= leaf_1_1 176))
(assert (or (= leaf_1_2 17)
    (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)))
(assert (<= leaf_1_2 23))
(assert (>= leaf_1_2 17))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (or (= leaf_1_0 180) (= leaf_1_1 180) (= leaf_1_2 180) (= leaf_1_3 180)))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_1 12) (or (and (= leaf_1_0 180) (= #x7 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 176) (= #x2 bv_1_1_a) (= #x8 bv_1_1_b))
        (and (= leaf_1_1 177) (= #x2 bv_1_1_a) (= #x8 bv_1_1_b))
        (and (= leaf_1_1 178) (= #x2 bv_1_1_a) (= #x8 bv_1_1_b))
        (and (= leaf_1_1 179) (= #x2 bv_1_1_a) (= #x8 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 17) (= #x0 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 18) (= #x1 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 19) (= #x2 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 20) (= #x4 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 21) (= #x3 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 22) (= #x5 bv_1_2_a) (= #x0 bv_1_2_b))
        (and (= leaf_1_2 23) (= #x6 bv_1_2_a) (= #x0 bv_1_2_b)))))
(assert (=> (= root_1 12) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (or (= leaf_1_0 176)
    (= leaf_1_1 176)
    (= leaf_1_2 176)
    (= leaf_1_3 176)
    (= leaf_1_0 177)
    (= leaf_1_1 177)
    (= leaf_1_2 177)
    (= leaf_1_3 177)
    (= leaf_1_0 178)
    (= leaf_1_1 178)
    (= leaf_1_2 178)
    (= leaf_1_3 178)
    (= leaf_1_0 179)
    (= leaf_1_1 179)
    (= leaf_1_2 179)
    (= leaf_1_3 179)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #x0 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= bv_1_0_a bv_1))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i016 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i016.csv", col_types = cols("ID" = col_integer(),"COMPANY_ID" = col_integer(),"EMPLOYEE" = col_character()))
df_i016 <- copy_to(con, df_i016)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o016.csv", col_types = cols("COMPANY_ID" = col_integer(),"concatEMPLOYEE" = col_character()))

string_agg <- function(v,s) {paste0("", Reduce(function(x, y) paste(x, y, sep = s), v))}

df25 <- df_i016 %>% group_by(COMPANY_ID) %>% summarise(concatEMPLOYEE = string_agg(EMPLOYEE, ', ')) %>% ungroup()
out <- df25 %>% select(COMPANY_ID, concatEMPLOYEE)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `COMPANY_ID`,
       `concatEMPLOYEE`
FROM
  (SELECT `COMPANY_ID`,
          string_agg(`EMPLOYEE`, ', ') AS concatEMPLOYEE
   FROM df_i016
   GROUP BY COMPANY_ID)
