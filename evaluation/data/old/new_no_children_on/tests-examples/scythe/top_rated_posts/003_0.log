[     2.350][MainProcess][INFO] Parsing specification...
[     2.354][MainProcess][INFO] File read
[     2.355][MainProcess][DEBUG] Reading input files...
[     2.363][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i003.csv: ['string']
[     2.368][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o003.csv: ['string']
[     2.368][MainProcess][INFO] Parsing sketch...
[     2.368][MainProcess][DEBUG] Sketch creation: Line(T1, root=['mutate'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[])])
[     2.407][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 3, 'anti_join': 2, 'left_join': 1, 'union': 1, 'intersect': 1, 'semi_join': 1, 'cross_join': 130, 'unite': 1, 'summarise': 8, 'mutate': 4}
[     2.407][MainProcess][DEBUG] {'natural_join': 0.0064516129032258064, 'natural_join3': 0.0064516129032258064, 'natural_join4': 0.0064516129032258064, 'inner_join': 0.01935483870967742, 'anti_join': 0.012903225806451613, 'left_join': 0.0064516129032258064, 'union': 0.0064516129032258064, 'intersect': 0.0064516129032258064, 'semi_join': 0.0064516129032258064, 'cross_join': 0.8387096774193549, 'unite': 0.0064516129032258064, 'summarise': 0.05161290322580645, 'mutate': 0.025806451612903226}
[     2.407][MainProcess][DEBUG] {'natural_join': 0.0064516129032258064, 'natural_join3': 0.0064516129032258064, 'natural_join4': 0.0064516129032258064, 'inner_join': 0.01935483870967742, 'anti_join': 0.012903225806451613, 'left_join': 0.0064516129032258064, 'union': 0.0064516129032258064, 'intersect': 0.0064516129032258064, 'semi_join': 0.0064516129032258064, 'cross_join': 0.8387096774193549, 'unite': 0.0064516129032258064, 'summarise': 0.05161290322580645, 'mutate': 0.025806451612903226}
[     2.407][MainProcess][INFO] Building synthesizer...
[     2.409][MainProcess][DEBUG] [Line(T1, root=['mutate'], var=[13], children=[Child(['??'], type=Table, var=[154]),Child(['??'], type=SummariseCondition, var=[150, 151, 152, 153]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.452][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 48 constraints
[     2.454][MainProcess][DEBUG] Enumeration time: 0.046794891357421875
[     2.524][MainProcess][DEBUG] Synthesis time: 0.0697031021118164
[     2.524][MainProcess][INFO] Solution found: [mutate(input0, "concatc = string_agg(c, ', ')")]
[     2.525][MainProcess][DEBUG] Solution found using process 0
[     2.525][MainProcess][INFO] Statistics:
[     2.525][MainProcess][INFO] 	Attempted programs: 4 (approx)
[     2.525][MainProcess][INFO] 		Rejected: 3 (approx)
[     2.525][MainProcess][INFO] 		Failed: 0 (approx)
[     2.526][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.526][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.526][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.526][MainProcess][INFO] 	Total time spent in enumerator init: 0.046795 (approx)
[     2.526][MainProcess][INFO] 	Total time spent in enumerator: 0.003489 (approx)
[     2.526][MainProcess][INFO] 		Enumerated 1146.376221 programs/s avg. (just enumeration time)
[     2.526][MainProcess][INFO] 		Enumerated 2.164363 programs/s avg. (overall)
[     2.526][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.063282 (approx)
[     2.526][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.001903 (approx)
[     2.526][MainProcess][INFO] Solution found: [mutate(input0, "concatc = string_agg(c, ', ')")]
[     2.526][MainProcess][INFO] Solution size: 1
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun bv_1_0_b () (_ BitVec 2))
(declare-fun bv_1_0_a () (_ BitVec 2))
(declare-fun bv_1_1_b () (_ BitVec 2))
(declare-fun bv_1_1_a () (_ BitVec 2))
(declare-fun bv_1_2_b () (_ BitVec 2))
(declare-fun bv_1_2_a () (_ BitVec 2))
(declare-fun bv_1_3_b () (_ BitVec 2))
(declare-fun bv_1_3_a () (_ BitVec 2))
(declare-fun bv_1 () (_ BitVec 2))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 13)))
(assert (or (= leaf_1_0 154)))
(assert (<= leaf_1_0 154))
(assert (>= leaf_1_0 154))
(assert (or (= leaf_1_1 150) (= leaf_1_1 151) (= leaf_1_1 152) (= leaf_1_1 153)))
(assert (<= leaf_1_1 153))
(assert (>= leaf_1_1 150))
(assert (or (= leaf_1_2 0)))
(assert (<= leaf_1_2 0))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (or (= leaf_1_0 154) (= leaf_1_1 154) (= leaf_1_2 154) (= leaf_1_3 154)))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_1 13)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 13)
    (or (and (= leaf_1_1 150) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 151) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 152) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 153) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b)))))
(assert (=> (= root_1 13) (and (= leaf_1_2 0) (= #b00 bv_1_2_a) (= #b00 bv_1_2_b))))
(assert (=> (= root_1 13) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (or (= leaf_1_0 150)
    (= leaf_1_1 150)
    (= leaf_1_2 150)
    (= leaf_1_3 150)
    (= leaf_1_0 151)
    (= leaf_1_1 151)
    (= leaf_1_2 151)
    (= leaf_1_3 151)
    (= leaf_1_0 152)
    (= leaf_1_1 152)
    (= leaf_1_2 152)
    (= leaf_1_3 152)
    (= leaf_1_0 153)
    (= leaf_1_1 153)
    (= leaf_1_2 153)
    (= leaf_1_3 153)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00 bv_1_2_a) (distinct #b00 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= bv_1_0_a bv_1))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i003 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i003.csv", col_types = cols("c" = col_character()))
df_i003 <- copy_to(con, df_i003)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o003.csv", col_types = cols("concatc" = col_character()))

string_agg <- function(v,s) {paste0("", Reduce(function(x, y) paste(x, y, sep = s), v))}

df5 <- df_i003 %>% mutate(concatc = string_agg(c, ', '))
out <- df5 %>% select(concatc) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT string_agg(`c`, ', ') AS concatc
FROM df_i003
