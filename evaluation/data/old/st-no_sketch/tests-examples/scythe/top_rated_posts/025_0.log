[     2.370][MainProcess][INFO] Parsing specification...
[     2.375][MainProcess][INFO] File read
[     2.376][MainProcess][DEBUG] Reading input files...
[     2.384][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i025.csv: ['int64', 'string']
[     2.389][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o025.csv: ['int64', 'string']
[     2.425][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 7, 'anti_join': 4, 'left_join': 1, 'union': 1, 'intersect': 2, 'semi_join': 1, 'cross_join': 6, 'filter': 84, 'summarise': 4, 'mutate': 1}
[     2.425][MainProcess][DEBUG] {'natural_join': 0.008771929824561403, 'natural_join3': 0.008771929824561403, 'natural_join4': 0.008771929824561403, 'inner_join': 0.06140350877192982, 'anti_join': 0.03508771929824561, 'left_join': 0.008771929824561403, 'union': 0.008771929824561403, 'intersect': 0.017543859649122806, 'semi_join': 0.008771929824561403, 'cross_join': 0.05263157894736842, 'filter': 0.7368421052631579, 'summarise': 0.03508771929824561, 'mutate': 0.008771929824561403}
[     2.426][MainProcess][DEBUG] {'natural_join': 0.008771929824561403, 'natural_join3': 0.008771929824561403, 'natural_join4': 0.008771929824561403, 'inner_join': 0.06140350877192982, 'anti_join': 0.03508771929824561, 'left_join': 0.008771929824561403, 'union': 0.008771929824561403, 'intersect': 0.017543859649122806, 'semi_join': 0.008771929824561403, 'cross_join': 0.05263157894736842, 'filter': 0.7368421052631579, 'summarise': 0.03508771929824561, 'mutate': 0.008771929824561403}
[     2.426][MainProcess][INFO] Building synthesizer...
[     2.788][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 218 constraints
[     2.815][MainProcess][DEBUG] Enumeration time: 0.3894994258880615
[     9.071][MainProcess][DEBUG] Synthesis time: 6.255991220474243
[     9.072][MainProcess][INFO] Solution found: [mutate(input0, 'row_number_ = row_number()'), filter(line0, 'row_number_ >= 3 & row_number_ < 5')]
[     9.076][MainProcess][DEBUG] Solution found using process 0
[     9.076][MainProcess][INFO] Statistics:
[     9.076][MainProcess][INFO] 	Attempted programs: 244 (approx)
[     9.076][MainProcess][INFO] 		Rejected: 243 (approx)
[     9.076][MainProcess][INFO] 		Failed: 0 (approx)
[     9.076][MainProcess][INFO] 		Empty outputs: 94 (38.5%) (approx)
[     9.076][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     9.076][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     9.076][MainProcess][INFO] 	Total time spent in enumerator init: 0.389499 (approx)
[     9.076][MainProcess][INFO] 	Total time spent in enumerator: 0.540499 (approx)
[     9.076][MainProcess][INFO] 		Enumerated 451.434716 programs/s avg. (just enumeration time)
[     9.077][MainProcess][INFO] 		Enumerated 29.113998 programs/s avg. (overall)
[     9.077][MainProcess][INFO] 	Total time spent in evaluation & testing: 5.553652 (approx)
[     9.077][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.159968 (approx)
[     9.077][MainProcess][INFO] Solution found: [mutate(input0, 'row_number_ = row_number()'), filter(line0, 'row_number_ >= 3 & row_number_ < 5')]
[     9.077][MainProcess][INFO] Solution size: 2

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i025 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i025.csv", col_types = cols("Id" = col_integer(),"Value" = col_character()))
df_i025 <- copy_to(con, df_i025)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o025.csv", col_types = cols("Id" = col_integer(),"Value" = col_character()))

df250 <- df_i025 %>% mutate(row_number_ = row_number())
df251 <- df250 %>% filter(row_number_ >= 3 & row_number_ < 5)
out <- df251 %>% select(Id, Value) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Value
FROM
  (SELECT Id,
          Value,
          ROW_NUMBER() OVER () AS row_number_
   FROM df_i025)
WHERE (row_number_ >= 3.0
       AND row_number_ < 5.0)
ORDER BY Id
