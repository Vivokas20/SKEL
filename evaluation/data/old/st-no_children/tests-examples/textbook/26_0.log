[     5.694][MainProcess][INFO] Parsing specification...
[     5.702][MainProcess][INFO] File read
[     5.703][MainProcess][DEBUG] Reading input files...
[     5.715][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'Float64']
[     5.729][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/flights.txt: ['int64', 'string', 'string', 'int64', 'datetime64[ns]', 'datetime64[ns]', 'int64']
[     5.735][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/26.out: ['string']
[     5.735][MainProcess][INFO] Parsing sketch...
[     5.735][MainProcess][DEBUG] Sketch creation: Line(T1, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     5.735][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     5.735][MainProcess][DEBUG] Sketch creation: Line(T3, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     5.735][MainProcess][DEBUG] Sketch creation: Line(T4, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     6.059][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 2956, 'anti_join': 224, 'left_join': 4, 'union': 4, 'intersect': 40, 'semi_join': 4, 'cross_join': 26200, 'filter': 3156, 'summarise': 448, 'mutate': 8}
[     6.059][MainProcess][DEBUG] {'natural_join': 0.00012094823415578132, 'natural_join3': 0.00024189646831156264, 'natural_join4': 0.0004837929366231253, 'inner_join': 0.0893807450411224, 'anti_join': 0.006773101112723754, 'left_join': 0.00012094823415578132, 'union': 0.00012094823415578132, 'intersect': 0.0012094823415578133, 'semi_join': 0.00012094823415578132, 'cross_join': 0.7922109337203677, 'filter': 0.09542815674891146, 'summarise': 0.013546202225447508, 'mutate': 0.00024189646831156264}
[     6.059][MainProcess][DEBUG] {'natural_join': 0.00012094823415578132, 'natural_join3': 0.00024189646831156264, 'natural_join4': 0.0004837929366231253, 'inner_join': 0.0893807450411224, 'anti_join': 0.006773101112723754, 'left_join': 0.00012094823415578132, 'union': 0.00012094823415578132, 'intersect': 0.0012094823415578133, 'semi_join': 0.00012094823415578132, 'cross_join': 0.7922109337203677, 'filter': 0.09542815674891146, 'summarise': 0.013546202225447508, 'mutate': 0.00024189646831156264}
[     6.060][MainProcess][INFO] Building synthesizer...
[     6.063][MainProcess][DEBUG] [Line(T1, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[]),Child([None], type=None, var=[0])]), Line(T3, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[    18.519][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 454 constraints
[    20.167][MainProcess][DEBUG] Enumeration time: 14.106893301010132
[    42.283][MainProcess][DEBUG] Synthesis time: 22.1162428855896
[    42.283][MainProcess][INFO] Solution found: [filter(input1, "origin == 'Los Angeles' & destination == 'Honolulu'"), summarise(input1, 'price = min(price)', 'destination'), natural_join(input0, line1), filter(line2, 'salary <= price')]
[    42.305][MainProcess][DEBUG] Solution found using process 0
[    42.306][MainProcess][INFO] Statistics:
[    42.306][MainProcess][INFO] 	Attempted programs: 896 (approx)
[    42.306][MainProcess][INFO] 		Rejected: 895 (approx)
[    42.306][MainProcess][INFO] 		Failed: 0 (approx)
[    42.306][MainProcess][INFO] 		Empty outputs: 487 (54.4%) (approx)
[    42.306][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    42.306][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    42.306][MainProcess][INFO] 	Total time spent in enumerator init: 14.106893 (approx)
[    42.306][MainProcess][INFO] 	Total time spent in enumerator: 17.494161 (approx)
[    42.306][MainProcess][INFO] 		Enumerated 51.217088 programs/s avg. (just enumeration time)
[    42.307][MainProcess][INFO] 		Enumerated 22.027418 programs/s avg. (overall)
[    42.307][MainProcess][INFO] 	Total time spent in evaluation & testing: 3.701567 (approx)
[    42.307][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.910209 (approx)
[    42.307][MainProcess][INFO] Solution found: [filter(input1, "origin == 'Los Angeles' & destination == 'Honolulu'"), summarise(input1, 'price = min(price)', 'destination'), natural_join(input0, line1), filter(line2, 'salary <= price')]
[    42.307][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_employees <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols("eid" = col_integer(),"ename" = col_character(),"salary" = col_double()))
df_employees <- copy_to(con, df_employees)
df_flights <- read_csv("tests-examples/textbook/tables/flights.txt", col_types = cols("flno" = col_integer(),"origin" = col_character(),"destination" = col_character(),"distance" = col_integer(),"departs" = col_character(),"arrives" = col_character(),"price" = col_integer()))
df_flights$departs <- parse_datetime(df_flights$departs)
df_flights$arrives <- parse_datetime(df_flights$arrives)
df_flights <- copy_to(con, df_flights)
expected_output <- read_csv("tests-examples/textbook/tables/26.out", col_types = cols("ename" = col_character()))

df281 <- df_flights %>% filter(origin == 'Los Angeles' & destination == 'Honolulu')
df282 <- df_flights %>% group_by(destination) %>% summarise(price = min(price)) %>% ungroup()
df283 <- full_join(df_employees, df282, by=character(), na_matches="never")
df284 <- df283 %>% filter(salary <= price)
out <- df284 %>% select(ename) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT ename
FROM
  (SELECT eid,
          ename,
          salary,
          destination,
          price
   FROM df_employees AS LHS
   CROSS JOIN
     (SELECT destination,
             MIN(price) AS price
      FROM df_flights
      GROUP BY destination) AS RHS)
WHERE (salary <= price)
