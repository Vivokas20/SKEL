[     2.270][MainProcess][INFO] Parsing specification...
[     2.276][MainProcess][INFO] File read
[     2.277][MainProcess][DEBUG] Reading input files...
[     2.283][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     2.289][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'Float64']
[     2.295][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/34.out: ['string', 'Float64']
[     2.295][MainProcess][INFO] Parsing sketch...
[     2.295][MainProcess][DEBUG] Sketch creation: Line(T1, root=['mutate'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[])])
[     2.295][MainProcess][DEBUG] Sketch creation: Line(T2, root=['anti_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Cols, var=[])])
[     2.295][MainProcess][DEBUG] Sketch creation: Line(T3, root=['cross_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=CrossJoinCondition, var=[])])
[     2.366][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 120, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 4440, 'filter': 12, 'summarise': 22, 'mutate': 2}
[     2.366][MainProcess][DEBUG] {'natural_join': 0.0008517887563884157, 'natural_join3': 0.0017035775127768314, 'natural_join4': 0.0034071550255536627, 'inner_join': 0.02555366269165247, 'anti_join': 0.009369676320272573, 'left_join': 0.0008517887563884157, 'union': 0.0008517887563884157, 'intersect': 0.0034071550255536627, 'semi_join': 0.0008517887563884157, 'cross_join': 0.9454855195911414, 'filter': 0.002555366269165247, 'summarise': 0.004684838160136286, 'mutate': 0.00042589437819420784}
[     2.367][MainProcess][DEBUG] {'natural_join': 0.0008517887563884158, 'natural_join3': 0.0017035775127768316, 'natural_join4': 0.003407155025553663, 'inner_join': 0.025553662691652473, 'anti_join': 0.009369676320272574, 'left_join': 0.0008517887563884158, 'union': 0.0008517887563884158, 'intersect': 0.003407155025553663, 'semi_join': 0.0008517887563884158, 'cross_join': 0.9454855195911415, 'filter': 0.0025553662691652473, 'summarise': 0.004684838160136287, 'mutate': 0.0004258943781942079}
[     2.367][MainProcess][INFO] Building synthesizer...
[     2.368][MainProcess][DEBUG] [Line(T1, root=['mutate'], var=[13], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['anti_join'], var=[5], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Cols, var=[]),Child([None], type=None, var=[0])]), Line(T3, root=['cross_join'], var=[10], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=CrossJoinCondition, var=[]),Child([None], type=None, var=[0])])]
[     4.166][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 317 constraints
[     4.324][MainProcess][DEBUG] Enumeration time: 1.957465648651123
[     5.410][MainProcess][DEBUG] Synthesis time: 1.0850188732147217
[     5.410][MainProcess][INFO] Solution found: [mutate(input1, 'meansalary = mean(salary)'), anti_join(line0, input0, ''), cross_join(line1, line1, 'meansalary <= salary.other & meansalary <= meansalary.other')]
[     5.414][MainProcess][DEBUG] Solution found using process 0
[     5.414][MainProcess][INFO] Statistics:
[     5.414][MainProcess][INFO] 	Attempted programs: 55 (approx)
[     5.414][MainProcess][INFO] 		Rejected: 54 (approx)
[     5.414][MainProcess][INFO] 		Failed: 0 (approx)
[     5.414][MainProcess][INFO] 		Empty outputs: 11 (20.0%) (approx)
[     5.414][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     5.414][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     5.414][MainProcess][INFO] 	Total time spent in enumerator init: 1.957466 (approx)
[     5.415][MainProcess][INFO] 	Total time spent in enumerator: 0.236426 (approx)
[     5.415][MainProcess][INFO] 		Enumerated 232.630816 programs/s avg. (just enumeration time)
[     5.415][MainProcess][INFO] 		Enumerated 11.594322 programs/s avg. (overall)
[     5.415][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.797305 (approx)
[     5.415][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.050048 (approx)
[     5.415][MainProcess][INFO] Solution found: [mutate(input1, 'meansalary = mean(salary)'), anti_join(line0, input0, ''), cross_join(line1, line1, 'meansalary <= salary.other & meansalary <= meansalary.other')]
[     5.415][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_certified <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols("eid" = col_integer(),"aid" = col_integer()))
df_certified <- copy_to(con, df_certified)
df_employees <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols("eid" = col_integer(),"ename" = col_character(),"salary" = col_double()))
df_employees <- copy_to(con, df_employees)
expected_output <- read_csv("tests-examples/textbook/tables/34.out", col_types = cols("ename" = col_character(),"salary" = col_double()))

df40 <- df_employees %>% mutate(meansalary = mean(salary))
df41 <- anti_join(df40, df_certified, by=c(), na_matches="never")
df42 <- full_join(df41, df41, by=character(), suffix = c("", ".other"), na_matches="never") %>% filter(meansalary <= salary.other & meansalary <= meansalary.other)
out <- df42 %>% select(ename = ename.other, salary = salary.other) %>% distinct() %>% arrange(ename)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT ename_other AS ename,
                salary_other AS salary
FROM
  (SELECT LHS.eid AS eid,
          LHS.ename AS ename,
          LHS.salary AS salary,
          LHS.meansalary AS meansalary,
          RHS.eid AS eid_other,
          RHS.ename AS ename_other,
          RHS.salary AS salary_other,
          RHS.meansalary AS meansalary_other
   FROM
     (SELECT *
      FROM
        (SELECT eid,
                ename,
                salary,
                AVG(salary) OVER () AS meansalary
         FROM df_employees) AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_certified AS RHS
           WHERE (LHS.eid = RHS.eid) )) AS LHS
   CROSS JOIN
     (SELECT *
      FROM
        (SELECT eid,
                ename,
                salary,
                AVG(salary) OVER () AS meansalary
         FROM df_employees) AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_certified AS RHS
           WHERE (LHS.eid = RHS.eid) )) AS RHS)
WHERE (meansalary <= salary_other
       AND meansalary <= meansalary_other)
ORDER BY ename
