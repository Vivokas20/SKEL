[     1.661][MainProcess][INFO] Parsing specification...
[     1.665][MainProcess][INFO] File read
[     1.666][MainProcess][DEBUG] Reading input files...
[     1.672][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i005.csv: ['int64', 'string', 'int64']
[     1.675][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o005.csv: ['int64', 'string', 'int64']
[     1.675][MainProcess][INFO] Parsing sketch...
[     1.676][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child([0], type=Table, var=[]),Child(['total = max(total)'], type=SummariseCondition, var=[]),Child(['customer'], type=Cols, var=[])])
[     1.676][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child([0], type=Table, var=[]),Child(['id = min(id)'], type=SummariseCondition, var=[]),Child(['customer, total'], type=Cols, var=[])])
[     1.676][MainProcess][DEBUG] Sketch creation: Line(T3, root=['left_join'], var=[], children=[Child([0], type=Line, var=[]),Child([1], type=Line, var=[])])
[     4.771][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 486, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 147186, 'filter': 7650, 'summarise': 56, 'mutate': 8}
[     4.771][MainProcess][DEBUG] {'natural_join': 6.4349236174566605e-06, 'natural_join3': 6.4349236174566605e-06, 'natural_join4': 6.4349236174566605e-06, 'inner_join': 0.003127372878083937, 'anti_join': 4.5044465322196625e-05, 'left_join': 6.4349236174566605e-06, 'union': 6.4349236174566605e-06, 'intersect': 1.9304770852369983e-05, 'semi_join': 6.4349236174566605e-06, 'cross_join': 0.9471306675589761, 'filter': 0.04922716567354345, 'summarise': 0.000360355722577573, 'mutate': 5.1479388939653284e-05}
[     4.771][MainProcess][DEBUG] {'natural_join': 6.4349236174566605e-06, 'natural_join3': 6.4349236174566605e-06, 'natural_join4': 6.4349236174566605e-06, 'inner_join': 0.003127372878083937, 'anti_join': 4.5044465322196625e-05, 'left_join': 6.4349236174566605e-06, 'union': 6.4349236174566605e-06, 'intersect': 1.9304770852369983e-05, 'semi_join': 6.4349236174566605e-06, 'cross_join': 0.9471306675589761, 'filter': 0.04922716567354345, 'summarise': 0.000360355722577573, 'mutate': 5.1479388939653284e-05}
[     4.771][MainProcess][INFO] Building synthesizer...
[     4.800][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child([0], type=Table, var=[155354]),Child(['total = max(total)'], type=SummariseCondition, var=[155348]),Child(['customer'], type=Cols, var=[18]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child([0], type=Table, var=[155354]),Child(['id = min(id)'], type=SummariseCondition, var=[155350]),Child(['customer, total'], type=Cols, var=[22]),Child([None], type=None, var=[0])]), Line(T3, root=['left_join'], var=[6], children=[Child([0], type=Line, var=[155356]),Child([1], type=Line, var=[155357]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     5.748][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 138 constraints
[     5.752][MainProcess][DEBUG] Enumeration time: 0.9803147315979004
[     5.798][MainProcess][DEBUG] Synthesis time: 0.04600858688354492
[     5.798][MainProcess][INFO] Solution found: [summarise(input0, 'total = max(total)', 'customer'), summarise(input0, 'id = min(id)', 'customer,total'), left_join(line0, line1)]
[     5.818][MainProcess][DEBUG] Solution found using process 0
[     5.818][MainProcess][INFO] Statistics:
[     5.818][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     5.818][MainProcess][INFO] 		Rejected: 0 (approx)
[     5.818][MainProcess][INFO] 		Failed: 0 (approx)
[     5.818][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     5.818][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     5.818][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     5.818][MainProcess][INFO] 	Total time spent in enumerator init: 0.980315 (approx)
[     5.819][MainProcess][INFO] 	Total time spent in enumerator: 0.001060 (approx)
[     5.819][MainProcess][INFO] 		Enumerated 942.964029 programs/s avg. (just enumeration time)
[     5.819][MainProcess][INFO] 		Enumerated 0.189805 programs/s avg. (overall)
[     5.819][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.042240 (approx)
[     5.819][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     5.819][MainProcess][INFO] Solution found: [summarise(input0, 'total = max(total)', 'customer'), summarise(input0, 'id = min(id)', 'customer,total'), left_join(line0, line1)]
[     5.819][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i005 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i005.csv", col_types = cols("id" = col_integer(),"customer" = col_character(),"total" = col_integer()))
df_i005 <- copy_to(con, df_i005)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o005.csv", col_types = cols("minid" = col_integer(),"customer" = col_character(),"maxtotal" = col_integer()))

df4 <- df_i005 %>% group_by(customer) %>% summarise(total = max(total)) %>% ungroup()
df5 <- df_i005 %>% group_by(customer,total) %>% summarise(id = min(id)) %>% ungroup()
df6 <- left_join(df4, df5, na_matches="never")
out <- df6 %>% select(minid = id, customer, maxtotal = total)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id AS minid,
       customer,
       total AS maxtotal
FROM
  (SELECT LHS.customer AS customer,
          LHS.total AS total,
          id
   FROM
     (SELECT customer,
             MAX(total) AS total
      FROM df_i005
      GROUP BY customer) AS LHS
   LEFT JOIN
     (SELECT customer,
             total,
             MIN(id) AS id
      FROM df_i005
      GROUP BY customer,
               total) AS RHS ON (LHS.customer = RHS.customer
                                 AND LHS.total = RHS.total))
