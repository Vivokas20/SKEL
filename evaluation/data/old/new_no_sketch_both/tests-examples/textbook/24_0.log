[     6.417][MainProcess][INFO] Parsing specification...
[     6.463][MainProcess][INFO] File read
[     6.465][MainProcess][DEBUG] Reading input files...
[     6.484][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     6.491][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'Float64']
[     6.496][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     6.501][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/24.out: ['string']
[     6.561][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 711, 'anti_join': 198, 'left_join': 9, 'union': 9, 'intersect': 54, 'semi_join': 9, 'cross_join': 54, 'filter': 18}
[     6.561][MainProcess][DEBUG] {'natural_join': 0.007633587786259542, 'natural_join3': 0.022900763358778626, 'natural_join4': 0.06870229007633588, 'inner_join': 0.6030534351145038, 'anti_join': 0.16793893129770993, 'left_join': 0.007633587786259542, 'union': 0.007633587786259542, 'intersect': 0.04580152671755725, 'semi_join': 0.007633587786259542, 'cross_join': 0.04580152671755725, 'filter': 0.015267175572519083}
[     6.561][MainProcess][DEBUG] {'natural_join': 0.007633587786259542, 'natural_join3': 0.022900763358778626, 'natural_join4': 0.06870229007633588, 'inner_join': 0.6030534351145038, 'anti_join': 0.16793893129770993, 'left_join': 0.007633587786259542, 'union': 0.007633587786259542, 'intersect': 0.04580152671755725, 'semi_join': 0.007633587786259542, 'cross_join': 0.04580152671755725, 'filter': 0.015267175572519083}
[     6.561][MainProcess][INFO] Building synthesizer...
[     6.735][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 87 constraints
[     6.750][MainProcess][DEBUG] There is no solution for current loc (1).
[     6.751][MainProcess][DEBUG] Enumeration time: 0.18931794166564941
[     6.751][MainProcess][DEBUG] Synthesis time: 0.0004165172576904297
[     6.751][MainProcess][INFO] Increasing the number of lines of code to 2.
[     7.084][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 201 constraints
[     7.108][MainProcess][DEBUG] Enumeration time: 0.35693931579589844
[     7.216][MainProcess][DEBUG] Synthesis time: 0.10695815086364746
[     7.216][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, 'salary != 80000')]
[     7.218][MainProcess][DEBUG] Solution found using process 0
[     7.218][MainProcess][INFO] Statistics:
[     7.218][MainProcess][INFO] 	Attempted programs: 3 (approx)
[     7.218][MainProcess][INFO] 		Rejected: 2 (approx)
[     7.218][MainProcess][INFO] 		Failed: 0 (approx)
[     7.218][MainProcess][INFO] 		Empty outputs: 1 (33.3%) (approx)
[     7.218][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     7.218][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     7.218][MainProcess][INFO] 	Total time spent in enumerator init: 0.546257 (approx)
[     7.218][MainProcess][INFO] 	Total time spent in enumerator: 0.006045 (approx)
[     7.219][MainProcess][INFO] 		Enumerated 496.308603 programs/s avg. (just enumeration time)
[     7.219][MainProcess][INFO] 		Enumerated 0.552238 programs/s avg. (overall)
[     7.219][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.097047 (approx)
[     7.219][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.002954 (approx)
[     7.219][MainProcess][INFO] Solution found: [natural_join3(input0, input1, input2), filter(line0, 'salary != 80000')]
[     7.219][MainProcess][INFO] Solution size: 2

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_aircraft <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols("aid" = col_integer(),"aname" = col_character(),"crusingrange" = col_integer()))
df_aircraft <- copy_to(con, df_aircraft)
df_employees <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols("eid" = col_integer(),"ename" = col_character(),"salary" = col_double()))
df_employees <- copy_to(con, df_employees)
df_certified <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols("eid" = col_integer(),"aid" = col_integer()))
df_certified <- copy_to(con, df_certified)
expected_output <- read_csv("tests-examples/textbook/tables/24.out", col_types = cols("aname" = col_character()))

df5 <- full_join(df_aircraft, df_employees, by=character(), na_matches="never") %>% inner_join(df_certified, na_matches="never")
df6 <- df5 %>% filter(salary != 80000)
out <- df6 %>% select(aname) %>% distinct() %>% arrange(aname)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT aname
FROM
  (SELECT LHS.aid AS aid,
          aname,
          crusingrange,
          LHS.eid AS eid,
          ename,
          salary
   FROM
     (SELECT aid,
             aname,
             crusingrange,
             eid,
             ename,
             salary
      FROM df_aircraft AS LHS
      CROSS JOIN df_employees AS RHS) AS LHS
   INNER JOIN df_certified AS RHS ON (LHS.aid = RHS.aid
                                      AND LHS.eid = RHS.eid))
WHERE (salary != 80000.0)
ORDER BY aname
