[     2.364][MainProcess][INFO] Parsing specification...
[     2.369][MainProcess][INFO] File read
[     2.371][MainProcess][DEBUG] Reading input files...
[     2.379][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i005.csv: ['int64', 'string', 'int64']
[     2.385][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o005.csv: ['int64', 'string', 'int64']
[     2.385][MainProcess][INFO] Parsing sketch...
[     2.385][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.385][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.385][MainProcess][DEBUG] Sketch creation: Line(T3, root=['left_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     6.804][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 486, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 147186, 'filter': 7650, 'summarise': 56, 'mutate': 8}
[     6.805][MainProcess][DEBUG] {'natural_join': 6.4349236174566605e-06, 'natural_join3': 6.4349236174566605e-06, 'natural_join4': 6.4349236174566605e-06, 'inner_join': 0.003127372878083937, 'anti_join': 4.5044465322196625e-05, 'left_join': 6.4349236174566605e-06, 'union': 6.4349236174566605e-06, 'intersect': 1.9304770852369983e-05, 'semi_join': 6.4349236174566605e-06, 'cross_join': 0.9471306675589761, 'filter': 0.04922716567354345, 'summarise': 0.000360355722577573, 'mutate': 5.1479388939653284e-05}
[     6.805][MainProcess][DEBUG] {'natural_join': 6.4349236174566605e-06, 'natural_join3': 6.4349236174566605e-06, 'natural_join4': 6.4349236174566605e-06, 'inner_join': 0.003127372878083937, 'anti_join': 4.5044465322196625e-05, 'left_join': 6.4349236174566605e-06, 'union': 6.4349236174566605e-06, 'intersect': 1.9304770852369983e-05, 'semi_join': 6.4349236174566605e-06, 'cross_join': 0.9471306675589761, 'filter': 0.04922716567354345, 'summarise': 0.000360355722577573, 'mutate': 5.1479388939653284e-05}
[     6.805][MainProcess][INFO] Building synthesizer...
[     6.839][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[155354]),Child(['??'], type=SummariseCondition, var=[155346, 155347, 155348, 155349, 155350, 155351, 155352, 155353]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[155354]),Child(['??'], type=SummariseCondition, var=[155346, 155347, 155348, 155349, 155350, 155351, 155352, 155353]),Child(['??'], type=Cols, var=[17, 18, 19, 20, 21, 22, 23]),Child([None], type=None, var=[0])]), Line(T3, root=['left_join'], var=[6], children=[Child(['??'], type=Table, var=[155354]),Child(['??'], type=Table, var=[155354]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     8.065][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 169 constraints
[     8.073][MainProcess][DEBUG] Enumeration time: 1.268235206604004
[    24.816][MainProcess][DEBUG] Synthesis time: 16.742677450180054
[    24.816][MainProcess][INFO] Solution found: [summarise(input0, 'total = max(total)', 'customer'), summarise(input0, 'id = min(id)', 'total'), left_join(line0, line1)]
[    24.895][MainProcess][DEBUG] Solution found using process 0
[    24.895][MainProcess][INFO] Statistics:
[    24.895][MainProcess][INFO] 	Attempted programs: 1202 (approx)
[    24.895][MainProcess][INFO] 		Rejected: 1201 (approx)
[    24.895][MainProcess][INFO] 		Failed: 0 (approx)
[    24.895][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[    24.895][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    24.896][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    24.896][MainProcess][INFO] 	Total time spent in enumerator init: 1.268235 (approx)
[    24.896][MainProcess][INFO] 	Total time spent in enumerator: 3.556145 (approx)
[    24.896][MainProcess][INFO] 		Enumerated 338.006424 programs/s avg. (just enumeration time)
[    24.896][MainProcess][INFO] 		Enumerated 49.635625 programs/s avg. (overall)
[    24.896][MainProcess][INFO] 	Total time spent in evaluation & testing: 12.148767 (approx)
[    24.896][MainProcess][INFO] 	Total time spent blocking cubes/programs: 1.032087 (approx)
[    24.896][MainProcess][INFO] Solution found: [summarise(input0, 'total = max(total)', 'customer'), summarise(input0, 'id = min(id)', 'total'), left_join(line0, line1)]
[    24.896][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i005 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i005.csv", col_types = cols("id" = col_integer(),"customer" = col_character(),"total" = col_integer()))
df_i005 <- copy_to(con, df_i005)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o005.csv", col_types = cols("minid" = col_integer(),"customer" = col_character(),"maxtotal" = col_integer()))

df749 <- df_i005 %>% group_by(customer) %>% summarise(total = max(total)) %>% ungroup()
df750 <- df_i005 %>% group_by(total) %>% summarise(id = min(id)) %>% ungroup()
df751 <- left_join(df749, df750, na_matches="never")
out <- df751 %>% select(minid = id, customer, maxtotal = total)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id AS minid,
       customer,
       total AS maxtotal
FROM
  (SELECT customer,
          LHS.total AS total,
          id
   FROM
     (SELECT customer,
             MAX(total) AS total
      FROM df_i005
      GROUP BY customer) AS LHS
   LEFT JOIN
     (SELECT total,
             MIN(id) AS id
      FROM df_i005
      GROUP BY total) AS RHS ON (LHS.total = RHS.total))
