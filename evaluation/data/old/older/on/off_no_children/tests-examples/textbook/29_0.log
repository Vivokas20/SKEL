[     1.646][MainProcess][INFO] Parsing specification...
[     1.650][MainProcess][INFO] File read
[     1.651][MainProcess][DEBUG] Reading input files...
[     1.656][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.664][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/flights.txt: ['int64', 'string', 'string', 'int64', 'datetime64[ns]', 'datetime64[ns]', 'int64']
[     1.668][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/29.out: ['int64']
[     1.668][MainProcess][INFO] Parsing sketch...
[     1.668][MainProcess][DEBUG] Sketch creation: Line(T1, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     1.668][MainProcess][DEBUG] Sketch creation: Line(T2, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     1.668][MainProcess][DEBUG] Sketch creation: Line(T3, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     1.668][MainProcess][DEBUG] Sketch creation: Line(T4, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.359][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 6356, 'anti_join': 224, 'left_join': 4, 'union': 4, 'intersect': 40, 'semi_join': 4, 'cross_join': 121144, 'filter': 3496, 'summarise': 448, 'mutate': 8}
[     2.359][MainProcess][DEBUG] {'natural_join': 3.0359148729469626e-05, 'natural_join3': 6.071829745893925e-05, 'natural_join4': 0.0001214365949178785, 'inner_join': 0.048240687331127234, 'anti_join': 0.0017001123288502991, 'left_join': 3.0359148729469626e-05, 'union': 3.0359148729469626e-05, 'intersect': 0.00030359148729469627, 'semi_join': 3.0359148729469626e-05, 'cross_join': 0.9194571784207171, 'filter': 0.026533895989556452, 'summarise': 0.0034002246577005983, 'mutate': 6.071829745893925e-05}
[     2.360][MainProcess][DEBUG] {'natural_join': 3.0359148729469626e-05, 'natural_join3': 6.071829745893925e-05, 'natural_join4': 0.0001214365949178785, 'inner_join': 0.048240687331127234, 'anti_join': 0.0017001123288502991, 'left_join': 3.0359148729469626e-05, 'union': 3.0359148729469626e-05, 'intersect': 0.00030359148729469627, 'semi_join': 3.0359148729469626e-05, 'cross_join': 0.9194571784207171, 'filter': 0.026533895989556452, 'summarise': 0.0034002246577005983, 'mutate': 6.071829745893925e-05}
[     2.360][MainProcess][INFO] Building synthesizer...
[     2.366][MainProcess][DEBUG] [Line(T1, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[]),Child([None], type=None, var=[0])]), Line(T3, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[    30.846][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 454 constraints
[    36.527][MainProcess][DEBUG] Enumeration time: 34.16690969467163
[   359.232][MainProcess][DEBUG] Synthesis time: 322.7050313949585
[   359.232][MainProcess][INFO] Solution found: [filter(input1, "origin != 'Los Angeles' & destination == 'Los Angeles'"), summarise(line0, 'mindistance = min(distance)', 'destination,flno'), natural_join(input0, line1), filter(line2, "destination == 'Chicago' | mindistance <= crusingrange")]
[   359.372][MainProcess][DEBUG] Solution found using process 0
[   359.373][MainProcess][INFO] Statistics:
[   359.373][MainProcess][INFO] 	Attempted programs: 4789 (approx)
[   359.373][MainProcess][INFO] 		Rejected: 4788 (approx)
[   359.373][MainProcess][INFO] 		Failed: 0 (approx)
[   359.373][MainProcess][INFO] 		Empty outputs: 421 (8.8%) (approx)
[   359.373][MainProcess][INFO] 		Redundant lines: 0 (approx)
[   359.373][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[   359.373][MainProcess][INFO] 	Total time spent in enumerator init: 34.166910 (approx)
[   359.373][MainProcess][INFO] 	Total time spent in enumerator: 301.085757 (approx)
[   359.373][MainProcess][INFO] 		Enumerated 15.905767 programs/s avg. (just enumeration time)
[   359.373][MainProcess][INFO] 		Enumerated 13.345974 programs/s avg. (overall)
[   359.373][MainProcess][INFO] 	Total time spent in evaluation & testing: 17.968989 (approx)
[   359.373][MainProcess][INFO] 	Total time spent blocking cubes/programs: 3.620688 (approx)
[   359.373][MainProcess][INFO] Solution found: [filter(input1, "origin != 'Los Angeles' & destination == 'Los Angeles'"), summarise(line0, 'mindistance = min(distance)', 'destination,flno'), natural_join(input0, line1), filter(line2, "destination == 'Chicago' | mindistance <= crusingrange")]
[   359.373][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_aircraft <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols("aid" = col_integer(),"aname" = col_character(),"crusingrange" = col_integer()))
df_aircraft <- copy_to(con, df_aircraft)
df_flights <- read_csv("tests-examples/textbook/tables/flights.txt", col_types = cols("flno" = col_integer(),"origin" = col_character(),"destination" = col_character(),"distance" = col_integer(),"departs" = col_character(),"arrives" = col_character(),"price" = col_integer()))
df_flights$departs <- parse_datetime(df_flights$departs)
df_flights$arrives <- parse_datetime(df_flights$arrives)
df_flights <- copy_to(con, df_flights)
expected_output <- read_csv("tests-examples/textbook/tables/29.out", col_types = cols("aid" = col_integer()))

df1602 <- df_flights %>% filter(origin != 'Los Angeles' & destination == 'Los Angeles')
df1603 <- df1602 %>% group_by(destination,flno) %>% summarise(mindistance = min(distance)) %>% ungroup()
df1604 <- full_join(df_aircraft, df1603, by=character(), na_matches="never")
df1605 <- df1604 %>% filter(destination == 'Chicago' | mindistance <= crusingrange)
out <- df1605 %>% select(aid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `aid`
FROM
  (SELECT `aid`,
          `aname`,
          `crusingrange`,
          `destination`,
          `flno`,
          `mindistance`
   FROM `df_aircraft` AS `LHS`
   CROSS JOIN
     (SELECT `destination`,
             `flno`,
             MIN(`distance`) AS `mindistance`
      FROM `df_flights`
      WHERE (`origin` != 'Los Angeles'
             AND `destination` = 'Los Angeles')
      GROUP BY `destination`,
               `flno`) AS `RHS`)
WHERE (`destination` = 'Chicago'
       OR mindistance <= crusingrange)
