[     2.006][MainProcess][INFO] Parsing specification...
[     2.011][MainProcess][INFO] File read
[     2.012][MainProcess][DEBUG] Reading input files...
[     2.017][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'Float64']
[     2.027][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/flights.txt: ['int64', 'string', 'string', 'int64', 'datetime64[ns]', 'datetime64[ns]', 'int64']
[     2.031][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/26.out: ['string']
[     2.031][MainProcess][INFO] Parsing sketch...
[     2.031][MainProcess][DEBUG] Sketch creation: Line(T1, root=['??'], var=[], children=[Child([1], type=Table, var=[]),Child(["origin == 'Los Angeles' & destination == 'Honolulu'"], type=Unknown, var=[])])
[     2.031][MainProcess][DEBUG] Sketch creation: Line(T2, root=['??'], var=[], children=[Child([0], type=Line, var=[]),Child(['price = min(price)'], type=Unknown, var=[]),Child(["''"], type=Unknown, var=[])])
[     2.031][MainProcess][DEBUG] Sketch creation: Line(T3, root=['??'], var=[], children=[Child([0], type=Table, var=[]),Child([1], type=Line, var=[])])
[     2.031][MainProcess][DEBUG] Sketch creation: Line(T4, root=['??'], var=[], children=[Child([2], type=Line, var=[]),Child(['salary < price'], type=Unknown, var=[])])
[     2.221][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 2956, 'anti_join': 224, 'left_join': 4, 'union': 4, 'intersect': 40, 'semi_join': 4, 'cross_join': 26200, 'filter': 3156, 'summarise': 448, 'mutate': 8}
[     2.221][MainProcess][DEBUG] {'natural_join': 0.00012094823415578132, 'natural_join3': 0.00024189646831156264, 'natural_join4': 0.0004837929366231253, 'inner_join': 0.0893807450411224, 'anti_join': 0.006773101112723754, 'left_join': 0.00012094823415578132, 'union': 0.00012094823415578132, 'intersect': 0.0012094823415578133, 'semi_join': 0.00012094823415578132, 'cross_join': 0.7922109337203677, 'filter': 0.09542815674891146, 'summarise': 0.013546202225447508, 'mutate': 0.00024189646831156264}
[     2.221][MainProcess][DEBUG] {'natural_join': 0.00012094823415578132, 'natural_join3': 0.00024189646831156264, 'natural_join4': 0.0004837929366231253, 'inner_join': 0.0893807450411224, 'anti_join': 0.006773101112723754, 'left_join': 0.00012094823415578132, 'union': 0.00012094823415578132, 'intersect': 0.0012094823415578133, 'semi_join': 0.00012094823415578132, 'cross_join': 0.7922109337203677, 'filter': 0.09542815674891146, 'summarise': 0.013546202225447508, 'mutate': 0.00024189646831156264}
[     2.221][MainProcess][INFO] Building synthesizer...
[     2.223][MainProcess][DEBUG] [Line(T1, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([1], type=Table, var=[[8952], [7419]]),Child(["origin == 'Los Angeles' & destination == 'Honolulu'"], type=Unknown, var=[[8952], [7419]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([0], type=Line, var=[[8954], [8947], [24]]),Child(['price = min(price)'], type=Unknown, var=[[8954], [8947], [24]]),Child(["''"], type=Unknown, var=[[8954], [8947], [24]]),Child([None], type=None, var=[0])]), Line(T3, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([0], type=Table, var=[[8951], [8955]]),Child([1], type=Line, var=[[8951], [8955]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([2], type=Line, var=[[8956], [7385]]),Child(['salary < price'], type=Unknown, var=[[8956], [7385]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[    10.102][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 561 constraints
[    10.724][MainProcess][DEBUG] Enumeration time: 8.50284719467163
[    10.811][MainProcess][DEBUG] Synthesis time: 0.08687400817871094
[    10.811][MainProcess][INFO] Solution found: [filter(input1, "origin == 'Los Angeles' & destination == 'Honolulu'"), summarise(line0, 'price = min(price)', ''), natural_join(input0, line1), filter(line2, 'salary < price')]
[    10.828][MainProcess][DEBUG] Solution found using process 0
[    10.828][MainProcess][INFO] Statistics:
[    10.828][MainProcess][INFO] 	Attempted programs: 3 (approx)
[    10.828][MainProcess][INFO] 		Rejected: 2 (approx)
[    10.828][MainProcess][INFO] 		Failed: 0 (approx)
[    10.828][MainProcess][INFO] 		Empty outputs: 2 (66.7%) (approx)
[    10.828][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    10.828][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    10.828][MainProcess][INFO] 	Total time spent in enumerator init: 8.502847 (approx)
[    10.828][MainProcess][INFO] 	Total time spent in enumerator: 0.027086 (approx)
[    10.828][MainProcess][INFO] 		Enumerated 110.756296 programs/s avg. (just enumeration time)
[    10.828][MainProcess][INFO] 		Enumerated 0.294819 programs/s avg. (overall)
[    10.828][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.054824 (approx)
[    10.828][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.003551 (approx)
[    10.828][MainProcess][INFO] Solution found: [filter(input1, "origin == 'Los Angeles' & destination == 'Honolulu'"), summarise(line0, 'price = min(price)', ''), natural_join(input0, line1), filter(line2, 'salary < price')]
[    10.829][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_employees <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols("eid" = col_integer(),"ename" = col_character(),"salary" = col_double()))
df_employees <- copy_to(con, df_employees)
df_flights <- read_csv("tests-examples/textbook/tables/flights.txt", col_types = cols("flno" = col_integer(),"origin" = col_character(),"destination" = col_character(),"distance" = col_integer(),"departs" = col_character(),"arrives" = col_character(),"price" = col_integer()))
df_flights$departs <- parse_datetime(df_flights$departs)
df_flights$arrives <- parse_datetime(df_flights$arrives)
df_flights <- copy_to(con, df_flights)
expected_output <- read_csv("tests-examples/textbook/tables/26.out", col_types = cols("ename" = col_character()))

df9 <- df_flights %>% filter(origin == 'Los Angeles' & destination == 'Honolulu')
df10 <- df9 %>% group_by() %>% summarise(price = min(price)) %>% ungroup()
df11 <- full_join(df_employees, df10, by=character(), na_matches="never")
df12 <- df11 %>% filter(salary < price)
out <- df12 %>% select(ename) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `ename`
FROM
  (SELECT `eid`,
          `ename`,
          `salary`,
          `price`
   FROM `df_employees` AS `LHS`
   CROSS JOIN
     (SELECT MIN(`price`) AS `price`
      FROM `df_flights`
      WHERE (`origin` = 'Los Angeles'
             AND `destination` = 'Honolulu')) AS RHS)
WHERE (salary < price)
