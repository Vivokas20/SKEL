[     1.694][MainProcess][INFO] Parsing specification...
[     1.699][MainProcess][INFO] File read
[     1.700][MainProcess][DEBUG] Reading input files...
[     1.705][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.708][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.712][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/25.out: ['int64', 'int64']
[     1.712][MainProcess][INFO] Parsing sketch...
[     1.712][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['n=n()'], type=SummariseCondition, var=[]),Child(['eid'], type=Cols, var=[])])
[     1.712][MainProcess][DEBUG] Sketch creation: Line(T2, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     1.712][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     1.712][MainProcess][DEBUG] Sketch creation: Line(T4, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['crusingrange = max(crusingrange)'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     1.887][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 920, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 29664, 'filter': 2232, 'summarise': 66, 'mutate': 6}
[     1.887][MainProcess][DEBUG] {'natural_join': 0.00012125621438098702, 'natural_join3': 0.00024251242876197404, 'natural_join4': 0.0004850248575239481, 'inner_join': 0.027888929307627017, 'anti_join': 0.0013338183581908573, 'left_join': 0.00012125621438098702, 'union': 0.00012125621438098702, 'intersect': 0.0004850248575239481, 'semi_join': 0.00012125621438098702, 'cross_join': 0.8992360858493997, 'filter': 0.06766096762459076, 'summarise': 0.002000727537286286, 'mutate': 0.00018188432157148054}
[     1.887][MainProcess][DEBUG] {'natural_join': 0.00012125621438098702, 'natural_join3': 0.00024251242876197404, 'natural_join4': 0.0004850248575239481, 'inner_join': 0.027888929307627017, 'anti_join': 0.0013338183581908573, 'left_join': 0.00012125621438098702, 'union': 0.00012125621438098702, 'intersect': 0.0004850248575239481, 'semi_join': 0.00012125621438098702, 'cross_join': 0.8992360858493997, 'filter': 0.06766096762459076, 'summarise': 0.002000727537286286, 'mutate': 0.00018188432157148054}
[     1.887][MainProcess][INFO] Building synthesizer...
[     1.889][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[]),Child(['n=n()'], type=SummariseCondition, var=[8791]),Child(['eid'], type=Cols, var=[22]),Child([None], type=None, var=[0])]), Line(T2, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child([None], type=None, var=[0])]), Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T4, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[]),Child(['crusingrange = max(crusingrange)'], type=SummariseCondition, var=[8792]),Child(['??'], type=Cols, var=[]),Child([None], type=None, var=[0])])]
[    11.014][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 417 constraints
[    12.404][MainProcess][DEBUG] Enumeration time: 10.516582489013672
[    29.076][MainProcess][DEBUG] Synthesis time: 16.67241144180298
[    29.076][MainProcess][INFO] Solution found: [summarise(input1, 'n = n()', 'eid'), natural_join3(input0, input1, line0), filter(line1, 'n > 3 & n <= crusingrange'), summarise(line2, 'crusingrange = max(crusingrange)', 'eid')]
[    29.096][MainProcess][DEBUG] Solution found using process 0
[    29.096][MainProcess][INFO] Statistics:
[    29.096][MainProcess][INFO] 	Attempted programs: 1151 (approx)
[    29.096][MainProcess][INFO] 		Rejected: 135 (approx)
[    29.096][MainProcess][INFO] 		Failed: 1015 (approx)
[    29.096][MainProcess][INFO] 		Empty outputs: 19 (1.7%) (approx)
[    29.096][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    29.096][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    29.096][MainProcess][INFO] 	Total time spent in enumerator init: 10.516582 (approx)
[    29.096][MainProcess][INFO] 	Total time spent in enumerator: 9.747476 (approx)
[    29.096][MainProcess][INFO] 		Enumerated 118.081852 programs/s avg. (just enumeration time)
[    29.097][MainProcess][INFO] 		Enumerated 40.355585 programs/s avg. (overall)
[    29.097][MainProcess][INFO] 	Total time spent in evaluation & testing: 1.178306 (approx)
[    29.097][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.869024 (approx)
[    29.097][MainProcess][INFO] Solution found: [summarise(input1, 'n = n()', 'eid'), natural_join3(input0, input1, line0), filter(line1, 'n > 3 & n <= crusingrange'), summarise(line2, 'crusingrange = max(crusingrange)', 'eid')]
[    29.097][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_aircraft <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols("aid" = col_integer(),"aname" = col_character(),"crusingrange" = col_integer()))
df_aircraft <- copy_to(con, df_aircraft)
df_certified <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols("eid" = col_integer(),"aid" = col_integer()))
df_certified <- copy_to(con, df_certified)
expected_output <- read_csv("tests-examples/textbook/tables/25.out", col_types = cols("eid" = col_integer(),"maxcrusingrange" = col_integer()))

df1277 <- df_certified %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df1278 <- inner_join(df_aircraft, df_certified, na_matches="never") %>% inner_join(df1277, na_matches="never")
df1279 <- df1278 %>% filter(n > 3 & n <= crusingrange)
df1280 <- df1279 %>% group_by(eid) %>% summarise(crusingrange = max(crusingrange)) %>% ungroup()
out <- df1280 %>% select(eid, maxcrusingrange = crusingrange)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT eid,
       crusingrange AS maxcrusingrange
FROM
  (SELECT eid,
          MAX(crusingrange) AS crusingrange
   FROM
     (SELECT aid,
             aname,
             crusingrange,
             LHS.eid AS eid,
             n
      FROM
        (SELECT LHS.aid AS aid,
                aname,
                crusingrange,
                eid
         FROM df_aircraft AS LHS
         INNER JOIN df_certified AS RHS ON (LHS.aid = RHS.aid)) AS LHS
      INNER JOIN
        (SELECT eid,
                COUNT(*) AS n
         FROM df_certified
         GROUP BY eid) AS RHS ON (LHS.eid = RHS.eid))
   WHERE (n > 3.0
          AND n <= crusingrange)
   GROUP BY eid)
