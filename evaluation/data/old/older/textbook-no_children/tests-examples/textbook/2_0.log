[     1.623][MainProcess][INFO] Parsing specification...
[     1.629][MainProcess][INFO] File read
[     1.629][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.629][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.629][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.630][MainProcess][DEBUG] Reading input files...
[     1.637][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-1.txt: ['string', 'string']
[     1.643][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-2.txt: ['string', 'string']
[     1.648][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-3.txt: ['string', 'string']
[     1.654][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-4.txt: ['string', 'string', 'int64']
[     1.659][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2.out: ['int64']
[     1.659][MainProcess][INFO] Parsing sketch...
[     1.659][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join4'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     1.659][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     1.659][MainProcess][DEBUG] Sketch creation: Line(T3, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     1.736][MainProcess][DEBUG] {'natural_join': 16, 'natural_join3': 64, 'natural_join4': 256, 'inner_join': 5008, 'anti_join': 352, 'left_join': 16, 'union': 16, 'intersect': 96, 'semi_join': 16, 'cross_join': 33280, 'filter': 264, 'summarise': 176, 'mutate': 8}
[     1.736][MainProcess][DEBUG] {'natural_join': 0.0004043671653861706, 'natural_join3': 0.0016174686615446825, 'natural_join4': 0.00646987464617873, 'inner_join': 0.12656692276587142, 'anti_join': 0.008896077638495753, 'left_join': 0.0004043671653861706, 'union': 0.0004043671653861706, 'intersect': 0.002426202992317024, 'semi_join': 0.0004043671653861706, 'cross_join': 0.841083704003235, 'filter': 0.006672058228871815, 'summarise': 0.004448038819247877, 'mutate': 0.0002021835826930853}
[     1.736][MainProcess][DEBUG] {'natural_join': 0.0004043671653861706, 'natural_join3': 0.0016174686615446825, 'natural_join4': 0.00646987464617873, 'inner_join': 0.12656692276587142, 'anti_join': 0.008896077638495753, 'left_join': 0.0004043671653861706, 'union': 0.0004043671653861706, 'intersect': 0.002426202992317024, 'semi_join': 0.0004043671653861706, 'cross_join': 0.841083704003235, 'filter': 0.006672058228871815, 'summarise': 0.004448038819247877, 'mutate': 0.0002021835826930853}
[     1.736][MainProcess][INFO] Building synthesizer...
[     1.737][MainProcess][DEBUG] {1: Line(T1, root=['natural_join4'], var=[3], children=[Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=Table, var=[2503, 2504, 2505, 2506])]), 2: Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=FilterCondition, var=[2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), 3: Line(T3, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[2503, 2504, 2505, 2506]),Child(['??'], type=SummariseCondition, var=[2501, 2502]),Child(['??'], type=Cols, var=[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]),Child([None], type=None, var=[0])])}
[     2.177][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 151 constraints
[     2.187][MainProcess][DEBUG] Enumeration time: 0.45135927200317383
[    28.573][MainProcess][DEBUG] Synthesis time: 26.385196924209595
[    28.573][MainProcess][INFO] Solution found: [natural_join4(input0, input1, input2, input3), filter(line0, "F_name == 'faculty1' & major != 'History'"), summarise(line1, 'age = max(age)', 'F_key')]
[    28.582][MainProcess][DEBUG] Solution found using process 0
[    28.583][MainProcess][INFO] Statistics:
[    28.583][MainProcess][INFO] 	Attempted programs: 4240 (approx)
[    28.583][MainProcess][INFO] 		Rejected: 302 (approx)
[    28.583][MainProcess][INFO] 		Failed: 3937 (approx)
[    28.583][MainProcess][INFO] 		Empty outputs: 11 (0.3%) (approx)
[    28.583][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    28.583][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    28.583][MainProcess][INFO] 	Total time spent in enumerator init: 0.451359 (approx)
[    28.583][MainProcess][INFO] 	Total time spent in enumerator: 16.743575 (approx)
[    28.583][MainProcess][INFO] 		Enumerated 253.231469 programs/s avg. (just enumeration time)
[    28.583][MainProcess][INFO] 		Enumerated 151.258620 programs/s avg. (overall)
[    28.583][MainProcess][INFO] 	Total time spent in evaluation & testing: 2.501374 (approx)
[    28.583][MainProcess][INFO] 	Total time spent blocking cubes/programs: 2.444389 (approx)
[    28.583][MainProcess][INFO] Solution found: [natural_join4(input0, input1, input2, input3), filter(line0, "F_name == 'faculty1' & major != 'History'"), summarise(line1, 'age = max(age)', 'F_key')]
[    28.583][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_2_1 <- read_csv("tests-examples/textbook/tables/2-1.txt", col_types = cols("C_name" = col_character(),"F_key" = col_character()))
df_2_1 <- copy_to(con, df_2_1)
df_2_2 <- read_csv("tests-examples/textbook/tables/2-2.txt", col_types = cols("S_key" = col_character(),"C_name" = col_character()))
df_2_2 <- copy_to(con, df_2_2)
df_2_3 <- read_csv("tests-examples/textbook/tables/2-3.txt", col_types = cols("F_key" = col_character(),"F_name" = col_character()))
df_2_3 <- copy_to(con, df_2_3)
df_2_4 <- read_csv("tests-examples/textbook/tables/2-4.txt", col_types = cols("S_key" = col_character(),"major" = col_character(),"age" = col_integer()))
df_2_4 <- copy_to(con, df_2_4)
expected_output <- read_csv("tests-examples/textbook/tables/2.out", col_types = cols("maxage" = col_integer()))

df4141 <- inner_join(df_2_1, df_2_2, na_matches="never") %>% inner_join(df_2_3, na_matches="never") %>% inner_join(df_2_4, na_matches="never")
df4142 <- df4141 %>% filter(F_name == 'faculty1' & major != 'History')
df4143 <- df4142 %>% group_by(F_key) %>% summarise(age = max(age)) %>% ungroup()
out <- df4143 %>% select(maxage = age) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `age` AS `maxage`
FROM
  (SELECT `F_key`,
          MAX(`age`) AS `age`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`C_name` AS `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `LHS`.`S_key` AS `S_key`,
                `LHS`.`F_name` AS `F_name`,
                `RHS`.`major` AS `major`,
                `RHS`.`age` AS `age`
         FROM
           (SELECT `LHS`.`C_name` AS `C_name`,
                   `LHS`.`F_key` AS `F_key`,
                   `LHS`.`S_key` AS `S_key`,
                   `RHS`.`F_name` AS `F_name`
            FROM
              (SELECT `LHS`.`C_name` AS `C_name`,
                      `LHS`.`F_key` AS `F_key`,
                      `RHS`.`S_key` AS `S_key`
               FROM `df_2_1` AS `LHS`
               INNER JOIN `df_2_2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
            INNER JOIN `df_2_3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
         INNER JOIN `df_2_4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`F_name` = 'faculty1'
             AND `major` != 'History'))
   GROUP BY F_key)
