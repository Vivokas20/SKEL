[     1.499][MainProcess][INFO] Parsing specification...
[     1.505][MainProcess][INFO] File read
[     1.506][MainProcess][DEBUG] Reading input files...
[     1.513][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-1.txt: ['string', 'string']
[     1.519][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-2.txt: ['string', 'string']
[     1.524][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-3.txt: ['string', 'string']
[     1.529][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16.out: ['string']
[     1.529][MainProcess][INFO] Parsing sketch...
[     1.529][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     1.529][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     1.529][MainProcess][DEBUG] Sketch creation: Line(T3, root=['anti_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Cols, var=[])])
[     1.529][MainProcess][DEBUG] Sketch creation: Line(T4, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     1.567][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 846, 'anti_join': 99, 'left_join': 9, 'union': 9, 'intersect': 36, 'semi_join': 9, 'cross_join': 288, 'filter': 6, 'summarise': 33, 'mutate': 3}
[     1.567][MainProcess][DEBUG] {'natural_join': 0.006185567010309278, 'natural_join3': 0.018556701030927835, 'natural_join4': 0.05567010309278351, 'inner_join': 0.5814432989690722, 'anti_join': 0.06804123711340206, 'left_join': 0.006185567010309278, 'union': 0.006185567010309278, 'intersect': 0.024742268041237112, 'semi_join': 0.006185567010309278, 'cross_join': 0.1979381443298969, 'filter': 0.004123711340206186, 'summarise': 0.02268041237113402, 'mutate': 0.002061855670103093}
[     1.567][MainProcess][DEBUG] {'natural_join': 0.006185567010309278, 'natural_join3': 0.018556701030927835, 'natural_join4': 0.05567010309278351, 'inner_join': 0.5814432989690722, 'anti_join': 0.06804123711340206, 'left_join': 0.006185567010309278, 'union': 0.006185567010309278, 'intersect': 0.024742268041237112, 'semi_join': 0.006185567010309278, 'cross_join': 0.1979381443298969, 'filter': 0.004123711340206186, 'summarise': 0.02268041237113402, 'mutate': 0.002061855670103093}
[     1.567][MainProcess][INFO] Building synthesizer...
[     1.568][MainProcess][DEBUG] {1: Line(T1, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[158, 159, 160]),Child(['??'], type=Table, var=[158, 159, 160]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), 2: Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[158, 159, 160]),Child(['??'], type=FilterCondition, var=[155, 156]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), 3: Line(T3, root=['anti_join'], var=[5], children=[Child(['??'], type=Table, var=[158, 159, 160]),Child(['??'], type=Table, var=[158, 159, 160]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])]), 4: Line(T4, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[158, 159, 160]),Child(['??'], type=SummariseCondition, var=[157]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])])}
[     1.690][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 215 constraints
[     1.695][MainProcess][DEBUG] Enumeration time: 0.12827658653259277
[   505.841][MainProcess][DEBUG] Synthesis time: 504.1453881263733
[   505.841][MainProcess][INFO] Solution found: [natural_join(input0, input2), filter(line0, "S_name != 'AWS'"), anti_join(input1, line1, ''), summarise(line2, 'n = n()', 'P_name')]
[   505.888][MainProcess][DEBUG] Solution found using process 0
[   505.889][MainProcess][INFO] Statistics:
[   505.889][MainProcess][INFO] 	Attempted programs: 16828 (approx)
[   505.889][MainProcess][INFO] 		Rejected: 348 (approx)
[   505.889][MainProcess][INFO] 		Failed: 16479 (approx)
[   505.889][MainProcess][INFO] 		Empty outputs: 72 (0.4%) (approx)
[   505.889][MainProcess][INFO] 		Redundant lines: 0 (approx)
[   505.889][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[   505.889][MainProcess][INFO] 	Total time spent in enumerator init: 0.128277 (approx)
[   505.889][MainProcess][INFO] 	Total time spent in enumerator: 445.315001 (approx)
[   505.889][MainProcess][INFO] 		Enumerated 37.788981 programs/s avg. (just enumeration time)
[   505.889][MainProcess][INFO] 		Enumerated 33.300377 programs/s avg. (overall)
[   505.889][MainProcess][INFO] 	Total time spent in evaluation & testing: 1.178593 (approx)
[   505.889][MainProcess][INFO] 	Total time spent blocking cubes/programs: 12.923823 (approx)
[   505.889][MainProcess][INFO] Solution found: [natural_join(input0, input2), filter(line0, "S_name != 'AWS'"), anti_join(input1, line1, ''), summarise(line2, 'n = n()', 'P_name')]
[   505.889][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_16_1 <- read_csv("tests-examples/textbook/tables/16-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_16_1 <- copy_to(con, df_16_1)
df_16_2 <- read_csv("tests-examples/textbook/tables/16-2.txt", col_types = cols("P_id" = col_character(),"P_name" = col_character()))
df_16_2 <- copy_to(con, df_16_2)
df_16_3 <- read_csv("tests-examples/textbook/tables/16-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_16_3 <- copy_to(con, df_16_3)
expected_output <- read_csv("tests-examples/textbook/tables/16.out", col_types = cols("P_name" = col_character()))

df16753 <- inner_join(df_16_1, df_16_3, na_matches="never")
df16754 <- df16753 %>% filter(S_name != 'AWS')
df16755 <- anti_join(df_16_2, df16754, by=c(), na_matches="never")
df16756 <- df16755 %>% group_by(P_name) %>% summarise(n = n()) %>% ungroup()
out <- df16756 %>% select(P_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `P_name`
FROM
  (SELECT `P_name`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_16_2` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM
                (SELECT `LHS`.`S_key` AS `S_key`,
                        `LHS`.`P_id` AS `P_id`,
                        `RHS`.`S_name` AS `S_name`
                 FROM `df_16_1` AS `LHS`
                 INNER JOIN `df_16_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
              WHERE (`S_name` != 'AWS')) AS RHS
           WHERE (LHS.P_id = RHS.P_id) ))
   GROUP BY P_name)
