[     1.639][MainProcess][INFO] Parsing specification...
[     1.644][MainProcess][INFO] File read
[     1.645][MainProcess][DEBUG] Reading input files...
[     1.650][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.653][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.658][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/25.out: ['int64', 'int64']
[     1.658][MainProcess][INFO] Parsing sketch...
[     1.658][MainProcess][DEBUG] Sketch creation: Line(T1, root=['??'], var=[], children=[Child([1], type=Table, var=[]),Child(['n=n()'], type=Unknown, var=[]),Child(['eid'], type=Unknown, var=[])])
[     1.658][MainProcess][DEBUG] Sketch creation: Line(T2, root=['??'], var=[], children=[Child([0], type=Table, var=[]),Child([1], type=Table, var=[]),Child([0], type=Line, var=[])])
[     1.658][MainProcess][DEBUG] Sketch creation: Line(T3, root=['??'], var=[], children=[Child([1], type=Line, var=[]),Child(['n > 3'], type=Unknown, var=[])])
[     1.658][MainProcess][DEBUG] Sketch creation: Line(T4, root=['??'], var=[], children=[Child([2], type=Line, var=[]),Child(['crusingrange = max(crusingrange)'], type=Unknown, var=[]),Child(['eid'], type=Unknown, var=[])])
[     1.847][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 920, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 29664, 'filter': 2232, 'summarise': 66, 'mutate': 6}
[     1.847][MainProcess][DEBUG] {'natural_join': 0.00012125621438098702, 'natural_join3': 0.00024251242876197404, 'natural_join4': 0.0004850248575239481, 'inner_join': 0.027888929307627017, 'anti_join': 0.0013338183581908573, 'left_join': 0.00012125621438098702, 'union': 0.00012125621438098702, 'intersect': 0.0004850248575239481, 'semi_join': 0.00012125621438098702, 'cross_join': 0.8992360858493997, 'filter': 0.06766096762459076, 'summarise': 0.002000727537286286, 'mutate': 0.00018188432157148054}
[     1.847][MainProcess][DEBUG] {'natural_join': 0.00012125621438098702, 'natural_join3': 0.00024251242876197404, 'natural_join4': 0.0004850248575239481, 'inner_join': 0.027888929307627017, 'anti_join': 0.0013338183581908573, 'left_join': 0.00012125621438098702, 'union': 0.00012125621438098702, 'intersect': 0.0004850248575239481, 'semi_join': 0.00012125621438098702, 'cross_join': 0.8992360858493997, 'filter': 0.06766096762459076, 'summarise': 0.002000727537286286, 'mutate': 0.00018188432157148054}
[     1.847][MainProcess][INFO] Building synthesizer...
[     1.850][MainProcess][DEBUG] {1: Line(T1, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([1], type=Table, var=[[8795], [8791], [17, 22, 252]]),Child(['n=n()'], type=Unknown, var=[[8795], [8791], [17, 22, 252]]),Child(['eid'], type=Unknown, var=[[8795], [8791], [17, 22, 252]]),Child([None], type=None, var=[0])]), 2: Line(T2, root=['??'], var=[2], children=[Child([0], type=Table, var=[[8794], [8795], [8797]]),Child([1], type=Table, var=[[8794], [8795], [8797]]),Child([0], type=Line, var=[[8794], [8795], [8797]]),Child([None], type=None, var=[0])]), 3: Line(T3, root=['??'], var=[1, 6, 7, 9, 11, 13], children=[Child([1], type=Line, var=[[8798], [7686]]),Child(['n > 3'], type=Unknown, var=[[8798], [7686]]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), 4: Line(T4, root=['??'], var=[2, 4, 5, 8, 10, 12], children=[Child([2], type=Line, var=[[8799], [8792], [17, 22, 252]]),Child(['crusingrange = max(crusingrange)'], type=Unknown, var=[[8799], [8792], [17, 22, 252]]),Child(['eid'], type=Unknown, var=[[8799], [8792], [17, 22, 252]]),Child([None], type=None, var=[0])])}
[     2.944][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 273 constraints
[     3.122][MainProcess][DEBUG] Enumeration time: 1.274848461151123
[     3.210][MainProcess][DEBUG] Synthesis time: 0.08628726005554199
[     3.210][MainProcess][INFO] Solution found: [summarise(input1, 'n = n()', 'eid'), natural_join3(input0, input1, line0), filter(line1, 'n > 3'), summarise(line2, 'crusingrange = max(crusingrange)', 'eid')]
[     3.220][MainProcess][DEBUG] Solution found using process 0
[     3.221][MainProcess][INFO] Statistics:
[     3.221][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     3.221][MainProcess][INFO] 		Rejected: 0 (approx)
[     3.221][MainProcess][INFO] 		Failed: 0 (approx)
[     3.221][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     3.221][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     3.221][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     3.221][MainProcess][INFO] 	Total time spent in enumerator init: 1.274848 (approx)
[     3.221][MainProcess][INFO] 	Total time spent in enumerator: 0.003805 (approx)
[     3.221][MainProcess][INFO] 		Enumerated 262.801003 programs/s avg. (just enumeration time)
[     3.221][MainProcess][INFO] 		Enumerated 0.366441 programs/s avg. (overall)
[     3.221][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.077840 (approx)
[     3.221][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     3.221][MainProcess][INFO] Solution found: [summarise(input1, 'n = n()', 'eid'), natural_join3(input0, input1, line0), filter(line1, 'n > 3'), summarise(line2, 'crusingrange = max(crusingrange)', 'eid')]
[     3.221][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_aircraft <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols("aid" = col_integer(),"aname" = col_character(),"crusingrange" = col_integer()))
df_aircraft <- copy_to(con, df_aircraft)
df_certified <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols("eid" = col_integer(),"aid" = col_integer()))
df_certified <- copy_to(con, df_certified)
expected_output <- read_csv("tests-examples/textbook/tables/25.out", col_types = cols("eid" = col_integer(),"maxcrusingrange" = col_integer()))

df5 <- df_certified %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df6 <- inner_join(df_aircraft, df_certified, na_matches="never") %>% inner_join(df5, na_matches="never")
df7 <- df6 %>% filter(n > 3)
df8 <- df7 %>% group_by(eid) %>% summarise(crusingrange = max(crusingrange)) %>% ungroup()
out <- df8 %>% select(eid, maxcrusingrange = crusingrange)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT eid,
       crusingrange AS maxcrusingrange
FROM
  (SELECT eid,
          MAX(crusingrange) AS crusingrange
   FROM
     (SELECT aid,
             aname,
             crusingrange,
             LHS.eid AS eid,
             n
      FROM
        (SELECT LHS.aid AS aid,
                aname,
                crusingrange,
                eid
         FROM df_aircraft AS LHS
         INNER JOIN df_certified AS RHS ON (LHS.aid = RHS.aid)) AS LHS
      INNER JOIN
        (SELECT eid,
                COUNT(*) AS n
         FROM df_certified
         GROUP BY eid) AS RHS ON (LHS.eid = RHS.eid))
   WHERE (n > 3.0)
   GROUP BY eid)
