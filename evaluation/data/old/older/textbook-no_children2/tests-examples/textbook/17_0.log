[     3.443][MainProcess][INFO] Parsing specification...
[     3.449][MainProcess][INFO] File read
[     3.450][MainProcess][DEBUG] Reading input files...
[     3.459][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/17-1.txt: ['string', 'string', 'int64']
[     3.465][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/17-3.txt: ['string', 'string']
[     3.470][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/17.out: ['string', 'string']
[     3.470][MainProcess][INFO] Parsing sketch...
[     3.471][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     3.471][MainProcess][DEBUG] Sketch creation: Line(T2, root=['natural_join3'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     3.471][MainProcess][DEBUG] Sketch creation: Line(T3, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     3.519][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 160, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 336, 'filter': 12, 'summarise': 22, 'mutate': 2}
[     3.519][MainProcess][DEBUG] {'natural_join': 0.006329113924050633, 'natural_join3': 0.012658227848101266, 'natural_join4': 0.02531645569620253, 'inner_join': 0.25316455696202533, 'anti_join': 0.06962025316455696, 'left_join': 0.006329113924050633, 'union': 0.006329113924050633, 'intersect': 0.02531645569620253, 'semi_join': 0.006329113924050633, 'cross_join': 0.5316455696202531, 'filter': 0.0189873417721519, 'summarise': 0.03481012658227848, 'mutate': 0.0031645569620253164}
[     3.520][MainProcess][DEBUG] {'natural_join': 0.006329113924050634, 'natural_join3': 0.012658227848101267, 'natural_join4': 0.025316455696202535, 'inner_join': 0.2531645569620254, 'anti_join': 0.06962025316455697, 'left_join': 0.006329113924050634, 'union': 0.006329113924050634, 'intersect': 0.025316455696202535, 'semi_join': 0.006329113924050634, 'cross_join': 0.5316455696202532, 'filter': 0.018987341772151903, 'summarise': 0.034810126582278486, 'mutate': 0.003164556962025317}
[     3.520][MainProcess][INFO] Building synthesizer...
[     3.521][MainProcess][DEBUG] {1: Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[160, 161]),Child(['??'], type=SummariseCondition, var=[159]),Child(['??'], type=Cols, var=[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),Child([None], type=None, var=[0])]), 2: Line(T2, root=['natural_join3'], var=[2], children=[Child(['??'], type=Table, var=[160, 161]),Child(['??'], type=Table, var=[160, 161]),Child(['??'], type=Table, var=[160, 161]),Child([None], type=None, var=[0])]), 3: Line(T3, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[160, 161]),Child(['??'], type=FilterCondition, var=[153, 154, 155, 156, 157, 158]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])}
[     3.618][MainProcess][DEBUG] Enumerator for loc 3 constructed using 57 variables and 147 constraints
[     3.622][MainProcess][DEBUG] Enumeration time: 0.10187554359436035
[     6.272][MainProcess][DEBUG] Synthesis time: 2.6507606506347656
[     6.273][MainProcess][INFO] Solution found: [summarise(input0, 'meancost = mean(cost)', 'P_id'), natural_join3(input0, input1, line0), filter(line1, 'meancost < cost')]
[     6.274][MainProcess][DEBUG] Solution found using process 0
[     6.274][MainProcess][INFO] Statistics:
[     6.274][MainProcess][INFO] 	Attempted programs: 438 (approx)
[     6.274][MainProcess][INFO] 		Rejected: 48 (approx)
[     6.274][MainProcess][INFO] 		Failed: 389 (approx)
[     6.274][MainProcess][INFO] 		Empty outputs: 19 (4.3%) (approx)
[     6.274][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     6.274][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     6.274][MainProcess][INFO] 	Total time spent in enumerator init: 0.101876 (approx)
[     6.274][MainProcess][INFO] 	Total time spent in enumerator: 0.691313 (approx)
[     6.274][MainProcess][INFO] 		Enumerated 633.577169 programs/s avg. (just enumeration time)
[     6.274][MainProcess][INFO] 		Enumerated 84.186109 programs/s avg. (overall)
[     6.274][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.881966 (approx)
[     6.275][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.249313 (approx)
[     6.275][MainProcess][INFO] Solution found: [summarise(input0, 'meancost = mean(cost)', 'P_id'), natural_join3(input0, input1, line0), filter(line1, 'meancost < cost')]
[     6.275][MainProcess][INFO] Solution size: 3

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_17_1 <- read_csv("tests-examples/textbook/tables/17-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character(),"cost" = col_integer()))
df_17_1 <- copy_to(con, df_17_1)
df_17_3 <- read_csv("tests-examples/textbook/tables/17-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_17_3 <- copy_to(con, df_17_3)
expected_output <- read_csv("tests-examples/textbook/tables/17.out", col_types = cols("P_id" = col_character(),"S_name" = col_character()))

df452 <- df_17_1 %>% group_by(P_id) %>% summarise(meancost = mean(cost)) %>% ungroup()
df453 <- inner_join(df_17_1, df_17_3, na_matches="never") %>% inner_join(df452, na_matches="never")
df454 <- df453 %>% filter(meancost < cost)
out <- df454 %>% select(P_id, S_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT P_id,
                S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_name AS S_name,
          RHS.meancost AS meancost
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_name AS S_name
      FROM df_17_1 AS LHS
      INNER JOIN df_17_3 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             AVG(cost) AS meancost
      FROM df_17_1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
WHERE (meancost < cost)
