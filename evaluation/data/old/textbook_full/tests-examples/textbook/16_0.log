[     1.640][MainProcess][INFO] Parsing specification...
[     1.645][MainProcess][INFO] File read
[     1.646][MainProcess][DEBUG] Reading input files...
[     1.654][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-1.txt: ['string', 'string']
[     1.659][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-2.txt: ['string', 'string']
[     1.664][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-3.txt: ['string', 'string']
[     1.668][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16.out: ['string']
[     1.668][MainProcess][INFO] Parsing sketch...
[     1.668][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join'], var=[], children=[Child([0], type=Table, var=[]),Child([2], type=Table, var=[])])
[     1.668][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child([0], type=Line, var=[]),Child(["S_name != 'AWS'"], type=FilterCondition, var=[])])
[     1.668][MainProcess][DEBUG] Sketch creation: Line(T3, root=['anti_join'], var=[], children=[Child([1], type=Table, var=[]),Child([1], type=Line, var=[]),Child([''], type=Cols, var=[])])
[     1.669][MainProcess][DEBUG] Sketch creation: Line(T4, root=['summarise'], var=[], children=[Child([2], type=Line, var=[]),Child(['n = n()'], type=SummariseCondition, var=[]),Child(['P_name'], type=Cols, var=[])])
[     1.705][MainProcess][DEBUG] {'natural_join': 9, 'natural_join3': 27, 'natural_join4': 81, 'inner_join': 846, 'anti_join': 99, 'left_join': 9, 'union': 9, 'intersect': 36, 'semi_join': 9, 'cross_join': 288, 'filter': 6, 'summarise': 33, 'mutate': 3}
[     1.706][MainProcess][DEBUG] {'natural_join': 0.006185567010309278, 'natural_join3': 0.018556701030927835, 'natural_join4': 0.05567010309278351, 'inner_join': 0.5814432989690722, 'anti_join': 0.06804123711340206, 'left_join': 0.006185567010309278, 'union': 0.006185567010309278, 'intersect': 0.024742268041237112, 'semi_join': 0.006185567010309278, 'cross_join': 0.1979381443298969, 'filter': 0.004123711340206186, 'summarise': 0.02268041237113402, 'mutate': 0.002061855670103093}
[     1.706][MainProcess][DEBUG] {'natural_join': 0.006185567010309278, 'natural_join3': 0.018556701030927835, 'natural_join4': 0.05567010309278351, 'inner_join': 0.5814432989690722, 'anti_join': 0.06804123711340206, 'left_join': 0.006185567010309278, 'union': 0.006185567010309278, 'intersect': 0.024742268041237112, 'semi_join': 0.006185567010309278, 'cross_join': 0.1979381443298969, 'filter': 0.004123711340206186, 'summarise': 0.02268041237113402, 'mutate': 0.002061855670103093}
[     1.706][MainProcess][INFO] Building synthesizer...
[     1.707][MainProcess][DEBUG] {1: Line(T1, root=['natural_join'], var=[1], children=[Child([0], type=Table, var=[158]),Child([2], type=Table, var=[160]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), 2: Line(T2, root=['filter'], var=[11], children=[Child([0], type=Line, var=[162]),Child(["S_name != 'AWS'"], type=FilterCondition, var=[156]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), 3: Line(T3, root=['anti_join'], var=[5], children=[Child([1], type=Table, var=[159]),Child([1], type=Line, var=[163]),Child([''], type=Cols, var=[18]),Child([None], type=None, var=[0])]), 4: Line(T4, root=['summarise'], var=[12], children=[Child([2], type=Line, var=[164]),Child(['n = n()'], type=SummariseCondition, var=[157]),Child(['P_name'], type=Cols, var=[20]),Child([None], type=None, var=[0])])}
[     1.796][MainProcess][DEBUG] Enumerator for loc 4 constructed using 84 variables and 197 constraints
[     1.800][MainProcess][DEBUG] Enumeration time: 0.09425210952758789
[     1.852][MainProcess][DEBUG] Synthesis time: 0.05202889442443848
[     1.852][MainProcess][INFO] Solution found: [natural_join(input0, input2), filter(line0, "S_name != 'AWS'"), anti_join(input1, line1, ''), summarise(line2, 'n = n()', 'P_name')]
[     1.853][MainProcess][DEBUG] Solution found using process 0
[     1.853][MainProcess][INFO] Statistics:
[     1.854][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     1.854][MainProcess][INFO] 		Rejected: 0 (approx)
[     1.854][MainProcess][INFO] 		Failed: 0 (approx)
[     1.854][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     1.854][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     1.854][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     1.854][MainProcess][INFO] 	Total time spent in enumerator init: 0.094252 (approx)
[     1.854][MainProcess][INFO] 	Total time spent in enumerator: 0.001313 (approx)
[     1.854][MainProcess][INFO] 		Enumerated 761.354874 programs/s avg. (just enumeration time)
[     1.854][MainProcess][INFO] 		Enumerated 0.731207 programs/s avg. (overall)
[     1.854][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.047359 (approx)
[     1.854][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     1.854][MainProcess][INFO] Solution found: [natural_join(input0, input2), filter(line0, "S_name != 'AWS'"), anti_join(input1, line1, ''), summarise(line2, 'n = n()', 'P_name')]
[     1.854][MainProcess][INFO] Solution size: 4

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_16_1 <- read_csv("tests-examples/textbook/tables/16-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_16_1 <- copy_to(con, df_16_1)
df_16_2 <- read_csv("tests-examples/textbook/tables/16-2.txt", col_types = cols("P_id" = col_character(),"P_name" = col_character()))
df_16_2 <- copy_to(con, df_16_2)
df_16_3 <- read_csv("tests-examples/textbook/tables/16-3.txt", col_types = cols("S_key" = col_character(),"S_name" = col_character()))
df_16_3 <- copy_to(con, df_16_3)
expected_output <- read_csv("tests-examples/textbook/tables/16.out", col_types = cols("P_name" = col_character()))

df5 <- inner_join(df_16_1, df_16_3, na_matches="never")
df6 <- df5 %>% filter(S_name != 'AWS')
df7 <- anti_join(df_16_2, df6, by=c(), na_matches="never")
df8 <- df7 %>% group_by(P_name) %>% summarise(n = n()) %>% ungroup()
out <- df8 %>% select(P_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `P_name`
FROM
  (SELECT `P_name`,
          COUNT(*) AS `n`
   FROM
     (SELECT *
      FROM `df_16_2` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM
                (SELECT `LHS`.`S_key` AS `S_key`,
                        `P_id`,
                        `S_name`
                 FROM `df_16_1` AS `LHS`
                 INNER JOIN `df_16_3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
              WHERE (`S_name` != 'AWS')) AS RHS
           WHERE (LHS.P_id = RHS.P_id) ))
   GROUP BY P_name)
