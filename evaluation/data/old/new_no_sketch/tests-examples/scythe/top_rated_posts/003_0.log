[     2.362][MainProcess][INFO] Parsing specification...
[     2.386][MainProcess][INFO] File read
[     2.388][MainProcess][DEBUG] Reading input files...
[     2.399][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i003.csv: ['string']
[     2.405][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o003.csv: ['string']
[     2.454][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 3, 'anti_join': 2, 'left_join': 1, 'union': 1, 'intersect': 1, 'semi_join': 1, 'cross_join': 130, 'unite': 1, 'summarise': 8, 'mutate': 4}
[     2.454][MainProcess][DEBUG] {'natural_join': 0.0064516129032258064, 'natural_join3': 0.0064516129032258064, 'natural_join4': 0.0064516129032258064, 'inner_join': 0.01935483870967742, 'anti_join': 0.012903225806451613, 'left_join': 0.0064516129032258064, 'union': 0.0064516129032258064, 'intersect': 0.0064516129032258064, 'semi_join': 0.0064516129032258064, 'cross_join': 0.8387096774193549, 'unite': 0.0064516129032258064, 'summarise': 0.05161290322580645, 'mutate': 0.025806451612903226}
[     2.454][MainProcess][DEBUG] {'natural_join': 0.0064516129032258064, 'natural_join3': 0.0064516129032258064, 'natural_join4': 0.0064516129032258064, 'inner_join': 0.01935483870967742, 'anti_join': 0.012903225806451613, 'left_join': 0.0064516129032258064, 'union': 0.0064516129032258064, 'intersect': 0.0064516129032258064, 'semi_join': 0.0064516129032258064, 'cross_join': 0.8387096774193549, 'unite': 0.0064516129032258064, 'summarise': 0.05161290322580645, 'mutate': 0.025806451612903226}
[     2.454][MainProcess][INFO] Building synthesizer...
[     2.661][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 96 constraints
[     2.675][MainProcess][DEBUG] Enumeration time: 0.22033047676086426
[     2.754][MainProcess][DEBUG] Synthesis time: 0.07935142517089844
[     2.755][MainProcess][INFO] Solution found: [mutate(input0, "concatc = string_agg(c, ', ')")]
[     2.756][MainProcess][DEBUG] Solution found using process 0
[     2.756][MainProcess][INFO] Statistics:
[     2.756][MainProcess][INFO] 	Attempted programs: 2 (approx)
[     2.756][MainProcess][INFO] 		Rejected: 1 (approx)
[     2.756][MainProcess][INFO] 		Failed: 0 (approx)
[     2.756][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.756][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.756][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.756][MainProcess][INFO] 	Total time spent in enumerator init: 0.220330 (approx)
[     2.756][MainProcess][INFO] 	Total time spent in enumerator: 0.002486 (approx)
[     2.756][MainProcess][INFO] 		Enumerated 804.354013 programs/s avg. (just enumeration time)
[     2.757][MainProcess][INFO] 		Enumerated 0.964457 programs/s avg. (overall)
[     2.757][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.074306 (approx)
[     2.757][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.001421 (approx)
[     2.757][MainProcess][INFO] Solution found: [mutate(input0, "concatc = string_agg(c, ', ')")]
[     2.757][MainProcess][INFO] Solution size: 1
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun bv_1_0_b () (_ BitVec 2))
(declare-fun bv_1_0_a () (_ BitVec 2))
(declare-fun bv_1_1_b () (_ BitVec 2))
(declare-fun bv_1_1_a () (_ BitVec 2))
(declare-fun bv_1_2_b () (_ BitVec 2))
(declare-fun bv_1_2_a () (_ BitVec 2))
(declare-fun bv_1_3_b () (_ BitVec 2))
(declare-fun bv_1_3_a () (_ BitVec 2))
(declare-fun bv_1 () (_ BitVec 2))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 1)
    (= root_1 2)
    (= root_1 3)
    (= root_1 4)
    (= root_1 5)
    (= root_1 6)
    (= root_1 7)
    (= root_1 8)
    (= root_1 9)
    (= root_1 10)
    (= root_1 11)
    (= root_1 12)
    (= root_1 13)))
(assert (or (= leaf_1_0 0)
    (= leaf_1_0 14)
    (= leaf_1_0 15)
    (= leaf_1_0 16)
    (= leaf_1_0 17)
    (= leaf_1_0 18)
    (= leaf_1_0 19)
    (= leaf_1_0 20)
    (= leaf_1_0 21)
    (= leaf_1_0 22)
    (= leaf_1_0 23)
    (= leaf_1_0 24)
    (= leaf_1_0 25)
    (= leaf_1_0 26)
    (= leaf_1_0 27)
    (= leaf_1_0 28)
    (= leaf_1_0 29)
    (= leaf_1_0 30)
    (= leaf_1_0 31)
    (= leaf_1_0 32)
    (= leaf_1_0 33)
    (= leaf_1_0 34)
    (= leaf_1_0 35)
    (= leaf_1_0 36)
    (= leaf_1_0 37)
    (= leaf_1_0 38)
    (= leaf_1_0 39)
    (= leaf_1_0 40)
    (= leaf_1_0 41)
    (= leaf_1_0 42)
    (= leaf_1_0 43)
    (= leaf_1_0 44)
    (= leaf_1_0 45)
    (= leaf_1_0 46)
    (= leaf_1_0 47)
    (= leaf_1_0 48)
    (= leaf_1_0 49)
    (= leaf_1_0 50)
    (= leaf_1_0 51)
    (= leaf_1_0 52)
    (= leaf_1_0 53)
    (= leaf_1_0 54)
    (= leaf_1_0 55)
    (= leaf_1_0 56)
    (= leaf_1_0 57)
    (= leaf_1_0 58)
    (= leaf_1_0 59)
    (= leaf_1_0 60)
    (= leaf_1_0 61)
    (= leaf_1_0 62)
    (= leaf_1_0 63)
    (= leaf_1_0 64)
    (= leaf_1_0 65)
    (= leaf_1_0 66)
    (= leaf_1_0 67)
    (= leaf_1_0 68)
    (= leaf_1_0 69)
    (= leaf_1_0 70)
    (= leaf_1_0 71)
    (= leaf_1_0 72)
    (= leaf_1_0 73)
    (= leaf_1_0 74)
    (= leaf_1_0 75)
    (= leaf_1_0 76)
    (= leaf_1_0 77)
    (= leaf_1_0 78)
    (= leaf_1_0 79)
    (= leaf_1_0 80)
    (= leaf_1_0 81)
    (= leaf_1_0 82)
    (= leaf_1_0 83)
    (= leaf_1_0 84)
    (= leaf_1_0 85)
    (= leaf_1_0 86)
    (= leaf_1_0 87)
    (= leaf_1_0 88)
    (= leaf_1_0 89)
    (= leaf_1_0 90)
    (= leaf_1_0 91)
    (= leaf_1_0 92)
    (= leaf_1_0 93)
    (= leaf_1_0 94)
    (= leaf_1_0 95)
    (= leaf_1_0 96)
    (= leaf_1_0 97)
    (= leaf_1_0 98)
    (= leaf_1_0 99)
    (= leaf_1_0 100)
    (= leaf_1_0 101)
    (= leaf_1_0 102)
    (= leaf_1_0 103)
    (= leaf_1_0 104)
    (= leaf_1_0 105)
    (= leaf_1_0 106)
    (= leaf_1_0 107)
    (= leaf_1_0 108)
    (= leaf_1_0 109)
    (= leaf_1_0 110)
    (= leaf_1_0 111)
    (= leaf_1_0 112)
    (= leaf_1_0 113)
    (= leaf_1_0 114)
    (= leaf_1_0 115)
    (= leaf_1_0 116)
    (= leaf_1_0 117)
    (= leaf_1_0 118)
    (= leaf_1_0 119)
    (= leaf_1_0 120)
    (= leaf_1_0 121)
    (= leaf_1_0 122)
    (= leaf_1_0 123)
    (= leaf_1_0 124)
    (= leaf_1_0 125)
    (= leaf_1_0 126)
    (= leaf_1_0 127)
    (= leaf_1_0 128)
    (= leaf_1_0 129)
    (= leaf_1_0 130)
    (= leaf_1_0 131)
    (= leaf_1_0 132)
    (= leaf_1_0 133)
    (= leaf_1_0 134)
    (= leaf_1_0 135)
    (= leaf_1_0 136)
    (= leaf_1_0 137)
    (= leaf_1_0 138)
    (= leaf_1_0 139)
    (= leaf_1_0 140)
    (= leaf_1_0 141)
    (= leaf_1_0 142)
    (= leaf_1_0 143)
    (= leaf_1_0 144)
    (= leaf_1_0 145)
    (= leaf_1_0 146)
    (= leaf_1_0 147)
    (= leaf_1_0 148)
    (= leaf_1_0 149)
    (= leaf_1_0 150)
    (= leaf_1_0 151)
    (= leaf_1_0 152)
    (= leaf_1_0 153)
    (= leaf_1_0 154)))
(assert (<= leaf_1_0 154))
(assert (>= leaf_1_0 0))
(assert (or (= leaf_1_1 0)
    (= leaf_1_1 14)
    (= leaf_1_1 15)
    (= leaf_1_1 16)
    (= leaf_1_1 17)
    (= leaf_1_1 18)
    (= leaf_1_1 19)
    (= leaf_1_1 20)
    (= leaf_1_1 21)
    (= leaf_1_1 22)
    (= leaf_1_1 23)
    (= leaf_1_1 24)
    (= leaf_1_1 25)
    (= leaf_1_1 26)
    (= leaf_1_1 27)
    (= leaf_1_1 28)
    (= leaf_1_1 29)
    (= leaf_1_1 30)
    (= leaf_1_1 31)
    (= leaf_1_1 32)
    (= leaf_1_1 33)
    (= leaf_1_1 34)
    (= leaf_1_1 35)
    (= leaf_1_1 36)
    (= leaf_1_1 37)
    (= leaf_1_1 38)
    (= leaf_1_1 39)
    (= leaf_1_1 40)
    (= leaf_1_1 41)
    (= leaf_1_1 42)
    (= leaf_1_1 43)
    (= leaf_1_1 44)
    (= leaf_1_1 45)
    (= leaf_1_1 46)
    (= leaf_1_1 47)
    (= leaf_1_1 48)
    (= leaf_1_1 49)
    (= leaf_1_1 50)
    (= leaf_1_1 51)
    (= leaf_1_1 52)
    (= leaf_1_1 53)
    (= leaf_1_1 54)
    (= leaf_1_1 55)
    (= leaf_1_1 56)
    (= leaf_1_1 57)
    (= leaf_1_1 58)
    (= leaf_1_1 59)
    (= leaf_1_1 60)
    (= leaf_1_1 61)
    (= leaf_1_1 62)
    (= leaf_1_1 63)
    (= leaf_1_1 64)
    (= leaf_1_1 65)
    (= leaf_1_1 66)
    (= leaf_1_1 67)
    (= leaf_1_1 68)
    (= leaf_1_1 69)
    (= leaf_1_1 70)
    (= leaf_1_1 71)
    (= leaf_1_1 72)
    (= leaf_1_1 73)
    (= leaf_1_1 74)
    (= leaf_1_1 75)
    (= leaf_1_1 76)
    (= leaf_1_1 77)
    (= leaf_1_1 78)
    (= leaf_1_1 79)
    (= leaf_1_1 80)
    (= leaf_1_1 81)
    (= leaf_1_1 82)
    (= leaf_1_1 83)
    (= leaf_1_1 84)
    (= leaf_1_1 85)
    (= leaf_1_1 86)
    (= leaf_1_1 87)
    (= leaf_1_1 88)
    (= leaf_1_1 89)
    (= leaf_1_1 90)
    (= leaf_1_1 91)
    (= leaf_1_1 92)
    (= leaf_1_1 93)
    (= leaf_1_1 94)
    (= leaf_1_1 95)
    (= leaf_1_1 96)
    (= leaf_1_1 97)
    (= leaf_1_1 98)
    (= leaf_1_1 99)
    (= leaf_1_1 100)
    (= leaf_1_1 101)
    (= leaf_1_1 102)
    (= leaf_1_1 103)
    (= leaf_1_1 104)
    (= leaf_1_1 105)
    (= leaf_1_1 106)
    (= leaf_1_1 107)
    (= leaf_1_1 108)
    (= leaf_1_1 109)
    (= leaf_1_1 110)
    (= leaf_1_1 111)
    (= leaf_1_1 112)
    (= leaf_1_1 113)
    (= leaf_1_1 114)
    (= leaf_1_1 115)
    (= leaf_1_1 116)
    (= leaf_1_1 117)
    (= leaf_1_1 118)
    (= leaf_1_1 119)
    (= leaf_1_1 120)
    (= leaf_1_1 121)
    (= leaf_1_1 122)
    (= leaf_1_1 123)
    (= leaf_1_1 124)
    (= leaf_1_1 125)
    (= leaf_1_1 126)
    (= leaf_1_1 127)
    (= leaf_1_1 128)
    (= leaf_1_1 129)
    (= leaf_1_1 130)
    (= leaf_1_1 131)
    (= leaf_1_1 132)
    (= leaf_1_1 133)
    (= leaf_1_1 134)
    (= leaf_1_1 135)
    (= leaf_1_1 136)
    (= leaf_1_1 137)
    (= leaf_1_1 138)
    (= leaf_1_1 139)
    (= leaf_1_1 140)
    (= leaf_1_1 141)
    (= leaf_1_1 142)
    (= leaf_1_1 143)
    (= leaf_1_1 144)
    (= leaf_1_1 145)
    (= leaf_1_1 146)
    (= leaf_1_1 147)
    (= leaf_1_1 148)
    (= leaf_1_1 149)
    (= leaf_1_1 150)
    (= leaf_1_1 151)
    (= leaf_1_1 152)
    (= leaf_1_1 153)
    (= leaf_1_1 154)))
(assert (<= leaf_1_1 154))
(assert (>= leaf_1_1 0))
(assert (or (= leaf_1_2 0)
    (= leaf_1_2 14)
    (= leaf_1_2 15)
    (= leaf_1_2 16)
    (= leaf_1_2 17)
    (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)
    (= leaf_1_2 26)
    (= leaf_1_2 27)
    (= leaf_1_2 28)
    (= leaf_1_2 29)
    (= leaf_1_2 30)
    (= leaf_1_2 31)
    (= leaf_1_2 32)
    (= leaf_1_2 33)
    (= leaf_1_2 34)
    (= leaf_1_2 35)
    (= leaf_1_2 36)
    (= leaf_1_2 37)
    (= leaf_1_2 38)
    (= leaf_1_2 39)
    (= leaf_1_2 40)
    (= leaf_1_2 41)
    (= leaf_1_2 42)
    (= leaf_1_2 43)
    (= leaf_1_2 44)
    (= leaf_1_2 45)
    (= leaf_1_2 46)
    (= leaf_1_2 47)
    (= leaf_1_2 48)
    (= leaf_1_2 49)
    (= leaf_1_2 50)
    (= leaf_1_2 51)
    (= leaf_1_2 52)
    (= leaf_1_2 53)
    (= leaf_1_2 54)
    (= leaf_1_2 55)
    (= leaf_1_2 56)
    (= leaf_1_2 57)
    (= leaf_1_2 58)
    (= leaf_1_2 59)
    (= leaf_1_2 60)
    (= leaf_1_2 61)
    (= leaf_1_2 62)
    (= leaf_1_2 63)
    (= leaf_1_2 64)
    (= leaf_1_2 65)
    (= leaf_1_2 66)
    (= leaf_1_2 67)
    (= leaf_1_2 68)
    (= leaf_1_2 69)
    (= leaf_1_2 70)
    (= leaf_1_2 71)
    (= leaf_1_2 72)
    (= leaf_1_2 73)
    (= leaf_1_2 74)
    (= leaf_1_2 75)
    (= leaf_1_2 76)
    (= leaf_1_2 77)
    (= leaf_1_2 78)
    (= leaf_1_2 79)
    (= leaf_1_2 80)
    (= leaf_1_2 81)
    (= leaf_1_2 82)
    (= leaf_1_2 83)
    (= leaf_1_2 84)
    (= leaf_1_2 85)
    (= leaf_1_2 86)
    (= leaf_1_2 87)
    (= leaf_1_2 88)
    (= leaf_1_2 89)
    (= leaf_1_2 90)
    (= leaf_1_2 91)
    (= leaf_1_2 92)
    (= leaf_1_2 93)
    (= leaf_1_2 94)
    (= leaf_1_2 95)
    (= leaf_1_2 96)
    (= leaf_1_2 97)
    (= leaf_1_2 98)
    (= leaf_1_2 99)
    (= leaf_1_2 100)
    (= leaf_1_2 101)
    (= leaf_1_2 102)
    (= leaf_1_2 103)
    (= leaf_1_2 104)
    (= leaf_1_2 105)
    (= leaf_1_2 106)
    (= leaf_1_2 107)
    (= leaf_1_2 108)
    (= leaf_1_2 109)
    (= leaf_1_2 110)
    (= leaf_1_2 111)
    (= leaf_1_2 112)
    (= leaf_1_2 113)
    (= leaf_1_2 114)
    (= leaf_1_2 115)
    (= leaf_1_2 116)
    (= leaf_1_2 117)
    (= leaf_1_2 118)
    (= leaf_1_2 119)
    (= leaf_1_2 120)
    (= leaf_1_2 121)
    (= leaf_1_2 122)
    (= leaf_1_2 123)
    (= leaf_1_2 124)
    (= leaf_1_2 125)
    (= leaf_1_2 126)
    (= leaf_1_2 127)
    (= leaf_1_2 128)
    (= leaf_1_2 129)
    (= leaf_1_2 130)
    (= leaf_1_2 131)
    (= leaf_1_2 132)
    (= leaf_1_2 133)
    (= leaf_1_2 134)
    (= leaf_1_2 135)
    (= leaf_1_2 136)
    (= leaf_1_2 137)
    (= leaf_1_2 138)
    (= leaf_1_2 139)
    (= leaf_1_2 140)
    (= leaf_1_2 141)
    (= leaf_1_2 142)
    (= leaf_1_2 143)
    (= leaf_1_2 144)
    (= leaf_1_2 145)
    (= leaf_1_2 146)
    (= leaf_1_2 147)
    (= leaf_1_2 148)
    (= leaf_1_2 149)
    (= leaf_1_2 150)
    (= leaf_1_2 151)
    (= leaf_1_2 152)
    (= leaf_1_2 153)
    (= leaf_1_2 154)))
(assert (<= leaf_1_2 154))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)
    (= leaf_1_3 14)
    (= leaf_1_3 15)
    (= leaf_1_3 16)
    (= leaf_1_3 17)
    (= leaf_1_3 18)
    (= leaf_1_3 19)
    (= leaf_1_3 20)
    (= leaf_1_3 21)
    (= leaf_1_3 22)
    (= leaf_1_3 23)
    (= leaf_1_3 24)
    (= leaf_1_3 25)
    (= leaf_1_3 26)
    (= leaf_1_3 27)
    (= leaf_1_3 28)
    (= leaf_1_3 29)
    (= leaf_1_3 30)
    (= leaf_1_3 31)
    (= leaf_1_3 32)
    (= leaf_1_3 33)
    (= leaf_1_3 34)
    (= leaf_1_3 35)
    (= leaf_1_3 36)
    (= leaf_1_3 37)
    (= leaf_1_3 38)
    (= leaf_1_3 39)
    (= leaf_1_3 40)
    (= leaf_1_3 41)
    (= leaf_1_3 42)
    (= leaf_1_3 43)
    (= leaf_1_3 44)
    (= leaf_1_3 45)
    (= leaf_1_3 46)
    (= leaf_1_3 47)
    (= leaf_1_3 48)
    (= leaf_1_3 49)
    (= leaf_1_3 50)
    (= leaf_1_3 51)
    (= leaf_1_3 52)
    (= leaf_1_3 53)
    (= leaf_1_3 54)
    (= leaf_1_3 55)
    (= leaf_1_3 56)
    (= leaf_1_3 57)
    (= leaf_1_3 58)
    (= leaf_1_3 59)
    (= leaf_1_3 60)
    (= leaf_1_3 61)
    (= leaf_1_3 62)
    (= leaf_1_3 63)
    (= leaf_1_3 64)
    (= leaf_1_3 65)
    (= leaf_1_3 66)
    (= leaf_1_3 67)
    (= leaf_1_3 68)
    (= leaf_1_3 69)
    (= leaf_1_3 70)
    (= leaf_1_3 71)
    (= leaf_1_3 72)
    (= leaf_1_3 73)
    (= leaf_1_3 74)
    (= leaf_1_3 75)
    (= leaf_1_3 76)
    (= leaf_1_3 77)
    (= leaf_1_3 78)
    (= leaf_1_3 79)
    (= leaf_1_3 80)
    (= leaf_1_3 81)
    (= leaf_1_3 82)
    (= leaf_1_3 83)
    (= leaf_1_3 84)
    (= leaf_1_3 85)
    (= leaf_1_3 86)
    (= leaf_1_3 87)
    (= leaf_1_3 88)
    (= leaf_1_3 89)
    (= leaf_1_3 90)
    (= leaf_1_3 91)
    (= leaf_1_3 92)
    (= leaf_1_3 93)
    (= leaf_1_3 94)
    (= leaf_1_3 95)
    (= leaf_1_3 96)
    (= leaf_1_3 97)
    (= leaf_1_3 98)
    (= leaf_1_3 99)
    (= leaf_1_3 100)
    (= leaf_1_3 101)
    (= leaf_1_3 102)
    (= leaf_1_3 103)
    (= leaf_1_3 104)
    (= leaf_1_3 105)
    (= leaf_1_3 106)
    (= leaf_1_3 107)
    (= leaf_1_3 108)
    (= leaf_1_3 109)
    (= leaf_1_3 110)
    (= leaf_1_3 111)
    (= leaf_1_3 112)
    (= leaf_1_3 113)
    (= leaf_1_3 114)
    (= leaf_1_3 115)
    (= leaf_1_3 116)
    (= leaf_1_3 117)
    (= leaf_1_3 118)
    (= leaf_1_3 119)
    (= leaf_1_3 120)
    (= leaf_1_3 121)
    (= leaf_1_3 122)
    (= leaf_1_3 123)
    (= leaf_1_3 124)
    (= leaf_1_3 125)
    (= leaf_1_3 126)
    (= leaf_1_3 127)
    (= leaf_1_3 128)
    (= leaf_1_3 129)
    (= leaf_1_3 130)
    (= leaf_1_3 131)
    (= leaf_1_3 132)
    (= leaf_1_3 133)
    (= leaf_1_3 134)
    (= leaf_1_3 135)
    (= leaf_1_3 136)
    (= leaf_1_3 137)
    (= leaf_1_3 138)
    (= leaf_1_3 139)
    (= leaf_1_3 140)
    (= leaf_1_3 141)
    (= leaf_1_3 142)
    (= leaf_1_3 143)
    (= leaf_1_3 144)
    (= leaf_1_3 145)
    (= leaf_1_3 146)
    (= leaf_1_3 147)
    (= leaf_1_3 148)
    (= leaf_1_3 149)
    (= leaf_1_3 150)
    (= leaf_1_3 151)
    (= leaf_1_3 152)
    (= leaf_1_3 153)
    (= leaf_1_3 154)))
(assert (<= leaf_1_3 154))
(assert (>= leaf_1_3 0))
(assert (or (= leaf_1_0 154) (= leaf_1_1 154) (= leaf_1_2 154) (= leaf_1_3 154)))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_1 1)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 1)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 1) (and (= leaf_1_2 0) (= #b00 bv_1_2_a) (= #b00 bv_1_2_b))))
(assert (=> (= root_1 1) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 2)
    (or (and (= leaf_1_2 154) (= #b01 bv_1_2_a) (= #b00 bv_1_2_b)))))
(assert (=> (= root_1 2) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_2 154) (= #b01 bv_1_2_a) (= #b00 bv_1_2_b)))))
(assert (=> (= root_1 3)
    (or (and (= leaf_1_3 154) (= #b01 bv_1_3_a) (= #b00 bv_1_3_b)))))
(assert (=> (= root_1 4)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 4)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 4)
    (or (and (= leaf_1_2 17) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 18) (= #b01 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b01 bv_1_2_a) (= #b01 bv_1_2_b)))))
(assert (=> (= root_1 4) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 5)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 5)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 5)
    (or (and (= leaf_1_2 15) (= #b00 bv_1_2_a) (= #b00 bv_1_2_b))
        (and (= leaf_1_2 16) (= #b01 bv_1_2_a) (= #b00 bv_1_2_b)))))
(assert (=> (= root_1 5) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 6)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 6)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 6) (and (= leaf_1_2 0) (= #b00 bv_1_2_a) (= #b00 bv_1_2_b))))
(assert (=> (= root_1 6) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 7)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 7)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 7) (and (= leaf_1_2 0) (= #b00 bv_1_2_a) (= #b00 bv_1_2_b))))
(assert (=> (= root_1 7) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 8)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 8)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 8) (or (and (= leaf_1_2 14) (= #b01 bv_1_2_a) (= #b00 bv_1_2_b)))))
(assert (=> (= root_1 8) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 9)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 9)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 9) (and (= leaf_1_2 0) (= #b00 bv_1_2_a) (= #b00 bv_1_2_b))))
(assert (=> (= root_1 9) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 10)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 10)
    (or (and (= leaf_1_1 154) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 10)
    (or (and (= leaf_1_2 20) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 24) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 25) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 26) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 27) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 28) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 29) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 30) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 31) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 32) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 33) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 34) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 35) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 36) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 37) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 38) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 39) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 40) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 41) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 42) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 43) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 44) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 45) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 46) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 47) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 48) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 49) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 50) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 51) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 52) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 53) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 54) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 55) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 56) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 57) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 58) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 59) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 60) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 61) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 62) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 63) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 64) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 65) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 66) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 67) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 68) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 69) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 70) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 71) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 72) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 73) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 74) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 75) (= #b11 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 76) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 77) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 78) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 79) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 80) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 81) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 82) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 83) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 84) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 85) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 86) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 87) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 88) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 89) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 90) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 91) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 92) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 93) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 94) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 95) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 96) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 97) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 98) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 99) (= #b11 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 100) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 101) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 102) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 103) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 104) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 105) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 106) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 107) (= #b11 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 108) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 109) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 110) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 111) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 112) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 113) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 114) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 115) (= #b01 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 116) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 117) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 118) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 119) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 120) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 121) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 122) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 123) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 124) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 125) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 126) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 127) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 128) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 129) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 130) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 131) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 132) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 133) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 134) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 135) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 136) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 137) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 138) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 139) (= #b10 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 140) (= #b01 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 141) (= #b01 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 142) (= #b01 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 143) (= #b01 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 144) (= #b10 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 145) (= #b10 bv_1_2_a) (= #b01 bv_1_2_b))
        (and (= leaf_1_2 146) (= #b10 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 147) (= #b10 bv_1_2_a) (= #b10 bv_1_2_b))
        (and (= leaf_1_2 148) (= #b00 bv_1_2_a) (= #b11 bv_1_2_b))
        (and (= leaf_1_2 149) (= #b00 bv_1_2_a) (= #b11 bv_1_2_b)))))
(assert (=> (= root_1 10) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 11)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 11)
    (or (and (= leaf_1_1 14) (= #b01 bv_1_1_a) (= #b00 bv_1_1_b)))))
(assert (=> (= root_1 11)
    (or (and (= leaf_1_2 14) (= #b01 bv_1_2_a) (= #b00 bv_1_2_b)))))
(assert (=> (= root_1 11) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 150) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 151) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 152) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 153) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 15) (= #b00 bv_1_2_a) (= #b00 bv_1_2_b))
        (and (= leaf_1_2 16) (= #b01 bv_1_2_a) (= #b00 bv_1_2_b)))))
(assert (=> (= root_1 12) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (=> (= root_1 13)
    (or (and (= leaf_1_0 154) (= #b01 bv_1_0_a) (= #b00 bv_1_0_b)))))
(assert (=> (= root_1 13)
    (or (and (= leaf_1_1 150) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 151) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 152) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b))
        (and (= leaf_1_1 153) (= #b01 bv_1_1_a) (= #b10 bv_1_1_b)))))
(assert (=> (= root_1 13) (and (= leaf_1_2 0) (= #b00 bv_1_2_a) (= #b00 bv_1_2_b))))
(assert (=> (= root_1 13) (and (= leaf_1_3 0) (= #b00 bv_1_3_a) (= #b00 bv_1_3_b))))
(assert (or (= leaf_1_0 150)
    (= leaf_1_1 150)
    (= leaf_1_2 150)
    (= leaf_1_3 150)
    (= leaf_1_0 151)
    (= leaf_1_1 151)
    (= leaf_1_2 151)
    (= leaf_1_3 151)
    (= leaf_1_0 152)
    (= leaf_1_1 152)
    (= leaf_1_2 152)
    (= leaf_1_3 152)
    (= leaf_1_0 153)
    (= leaf_1_1 153)
    (= leaf_1_2 153)
    (= leaf_1_3 153)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00 bv_1_2_a) (distinct #b00 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= bv_1_0_a bv_1))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i003 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i003.csv", col_types = cols("c" = col_character()))
df_i003 <- copy_to(con, df_i003)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o003.csv", col_types = cols("concatc" = col_character()))

string_agg <- function(v,s) {paste0("", Reduce(function(x, y) paste(x, y, sep = s), v))}

df3 <- df_i003 %>% mutate(concatc = string_agg(c, ', '))
out <- df3 %>% select(concatc) %>% distinct() %>% arrange(concatc)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT string_agg(`c`, ', ') AS concatc
FROM df_i003
ORDER BY concatc
