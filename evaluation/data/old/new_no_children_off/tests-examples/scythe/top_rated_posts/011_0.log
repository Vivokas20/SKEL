[     2.345][MainProcess][INFO] Parsing specification...
[     2.351][MainProcess][INFO] File read
[     2.352][MainProcess][DEBUG] Reading input files...
[     2.362][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_1.csv: ['int64', 'string']
[     2.382][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_2.csv: ['int64', 'int64', 'string']
[     2.393][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o011.csv: ['int64', 'string', 'string']
[     2.393][MainProcess][INFO] Parsing sketch...
[     2.393][MainProcess][DEBUG] Sketch creation: Line(T1, root=['summarise'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[])])
[     2.393][MainProcess][DEBUG] Sketch creation: Line(T2, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.438][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 240, 'anti_join': 44, 'left_join': 4, 'union': 4, 'intersect': 16, 'semi_join': 4, 'cross_join': 520, 'unite': 32, 'summarise': 88, 'mutate': 8}
[     2.438][MainProcess][DEBUG] {'natural_join': 0.004048582995951417, 'natural_join3': 0.008097165991902834, 'natural_join4': 0.016194331983805668, 'inner_join': 0.242914979757085, 'anti_join': 0.044534412955465584, 'left_join': 0.004048582995951417, 'union': 0.004048582995951417, 'intersect': 0.016194331983805668, 'semi_join': 0.004048582995951417, 'cross_join': 0.5263157894736842, 'unite': 0.032388663967611336, 'summarise': 0.08906882591093117, 'mutate': 0.008097165991902834}
[     2.438][MainProcess][DEBUG] {'natural_join': 0.004048582995951418, 'natural_join3': 0.008097165991902836, 'natural_join4': 0.01619433198380567, 'inner_join': 0.24291497975708506, 'anti_join': 0.04453441295546559, 'left_join': 0.004048582995951418, 'union': 0.004048582995951418, 'intersect': 0.01619433198380567, 'semi_join': 0.004048582995951418, 'cross_join': 0.5263157894736843, 'unite': 0.03238866396761134, 'summarise': 0.08906882591093118, 'mutate': 0.008097165991902836}
[     2.439][MainProcess][INFO] Building synthesizer...
[     2.440][MainProcess][DEBUG] [Line(T1, root=['summarise'], var=[12], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child(['??'], type=Cols, var=[]),Child([None], type=None, var=[0])]), Line(T2, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.640][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 104 constraints
[     2.659][MainProcess][DEBUG] Enumeration time: 0.22040796279907227
[     2.723][MainProcess][DEBUG] Synthesis time: 0.06389641761779785
[     2.723][MainProcess][INFO] Solution found: [summarise(input1, "concatCity = string_agg(City, ', ')", 'VehicleID'), natural_join(input0, line0)]
[     2.725][MainProcess][DEBUG] Solution found using process 0
[     2.725][MainProcess][INFO] Statistics:
[     2.725][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     2.725][MainProcess][INFO] 		Rejected: 0 (approx)
[     2.725][MainProcess][INFO] 		Failed: 0 (approx)
[     2.725][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.725][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.725][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.725][MainProcess][INFO] 	Total time spent in enumerator init: 0.220408 (approx)
[     2.725][MainProcess][INFO] 	Total time spent in enumerator: 0.001260 (approx)
[     2.725][MainProcess][INFO] 		Enumerated 793.624219 programs/s avg. (just enumeration time)
[     2.726][MainProcess][INFO] 		Enumerated 0.487316 programs/s avg. (overall)
[     2.726][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.059772 (approx)
[     2.726][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     2.726][MainProcess][INFO] Solution found: [summarise(input1, "concatCity = string_agg(City, ', ')", 'VehicleID'), natural_join(input0, line0)]
[     2.726][MainProcess][INFO] Solution size: 2
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 5))
(declare-fun bv_1_0_a () (_ BitVec 5))
(declare-fun bv_1_1_b () (_ BitVec 5))
(declare-fun bv_1_1_a () (_ BitVec 5))
(declare-fun bv_1_2_b () (_ BitVec 5))
(declare-fun bv_1_2_a () (_ BitVec 5))
(declare-fun bv_1_3_b () (_ BitVec 5))
(declare-fun bv_1_3_a () (_ BitVec 5))
(declare-fun bv_2_0_b () (_ BitVec 5))
(declare-fun bv_1 () (_ BitVec 5))
(declare-fun bv_2_0_a () (_ BitVec 5))
(declare-fun bv_2_1_b () (_ BitVec 5))
(declare-fun bv_2_1_a () (_ BitVec 5))
(declare-fun bv_2_2_b () (_ BitVec 5))
(declare-fun bv_2_2_a () (_ BitVec 5))
(declare-fun bv_2_3_b () (_ BitVec 5))
(declare-fun bv_2_3_a () (_ BitVec 5))
(declare-fun bv_2 () (_ BitVec 5))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 12)))
(assert (or (= leaf_1_0 0)
    (= leaf_1_0 14)
    (= leaf_1_0 15)
    (= leaf_1_0 16)
    (= leaf_1_0 17)
    (= leaf_1_0 18)
    (= leaf_1_0 19)
    (= leaf_1_0 20)
    (= leaf_1_0 21)
    (= leaf_1_0 22)
    (= leaf_1_0 23)
    (= leaf_1_0 24)
    (= leaf_1_0 25)
    (= leaf_1_0 26)
    (= leaf_1_0 27)
    (= leaf_1_0 28)
    (= leaf_1_0 29)
    (= leaf_1_0 30)
    (= leaf_1_0 31)
    (= leaf_1_0 32)
    (= leaf_1_0 33)
    (= leaf_1_0 34)
    (= leaf_1_0 35)
    (= leaf_1_0 36)
    (= leaf_1_0 37)
    (= leaf_1_0 38)
    (= leaf_1_0 39)
    (= leaf_1_0 40)
    (= leaf_1_0 41)
    (= leaf_1_0 42)
    (= leaf_1_0 43)
    (= leaf_1_0 44)
    (= leaf_1_0 45)
    (= leaf_1_0 46)
    (= leaf_1_0 47)
    (= leaf_1_0 48)
    (= leaf_1_0 49)
    (= leaf_1_0 50)
    (= leaf_1_0 51)
    (= leaf_1_0 52)
    (= leaf_1_0 53)
    (= leaf_1_0 54)
    (= leaf_1_0 55)
    (= leaf_1_0 56)
    (= leaf_1_0 57)
    (= leaf_1_0 58)
    (= leaf_1_0 59)
    (= leaf_1_0 60)
    (= leaf_1_0 61)
    (= leaf_1_0 62)
    (= leaf_1_0 63)
    (= leaf_1_0 64)
    (= leaf_1_0 65)
    (= leaf_1_0 66)
    (= leaf_1_0 67)
    (= leaf_1_0 68)
    (= leaf_1_0 69)
    (= leaf_1_0 70)
    (= leaf_1_0 71)
    (= leaf_1_0 72)
    (= leaf_1_0 73)
    (= leaf_1_0 74)
    (= leaf_1_0 75)
    (= leaf_1_0 76)
    (= leaf_1_0 77)
    (= leaf_1_0 78)
    (= leaf_1_0 79)
    (= leaf_1_0 80)
    (= leaf_1_0 81)
    (= leaf_1_0 82)
    (= leaf_1_0 83)
    (= leaf_1_0 84)
    (= leaf_1_0 85)
    (= leaf_1_0 86)
    (= leaf_1_0 87)
    (= leaf_1_0 88)
    (= leaf_1_0 89)
    (= leaf_1_0 90)
    (= leaf_1_0 91)
    (= leaf_1_0 92)
    (= leaf_1_0 93)
    (= leaf_1_0 94)
    (= leaf_1_0 95)
    (= leaf_1_0 96)
    (= leaf_1_0 97)
    (= leaf_1_0 98)
    (= leaf_1_0 99)
    (= leaf_1_0 100)
    (= leaf_1_0 101)
    (= leaf_1_0 102)
    (= leaf_1_0 103)
    (= leaf_1_0 104)
    (= leaf_1_0 105)
    (= leaf_1_0 106)
    (= leaf_1_0 107)
    (= leaf_1_0 108)
    (= leaf_1_0 109)
    (= leaf_1_0 110)
    (= leaf_1_0 111)
    (= leaf_1_0 112)
    (= leaf_1_0 113)
    (= leaf_1_0 114)
    (= leaf_1_0 115)
    (= leaf_1_0 116)
    (= leaf_1_0 117)
    (= leaf_1_0 118)
    (= leaf_1_0 119)
    (= leaf_1_0 120)
    (= leaf_1_0 121)
    (= leaf_1_0 122)
    (= leaf_1_0 123)
    (= leaf_1_0 124)
    (= leaf_1_0 125)
    (= leaf_1_0 126)
    (= leaf_1_0 127)
    (= leaf_1_0 128)
    (= leaf_1_0 129)
    (= leaf_1_0 130)
    (= leaf_1_0 131)
    (= leaf_1_0 132)
    (= leaf_1_0 133)
    (= leaf_1_0 134)
    (= leaf_1_0 135)
    (= leaf_1_0 136)
    (= leaf_1_0 137)
    (= leaf_1_0 138)
    (= leaf_1_0 139)
    (= leaf_1_0 140)
    (= leaf_1_0 141)
    (= leaf_1_0 142)
    (= leaf_1_0 143)
    (= leaf_1_0 144)
    (= leaf_1_0 145)
    (= leaf_1_0 146)
    (= leaf_1_0 147)
    (= leaf_1_0 148)
    (= leaf_1_0 149)
    (= leaf_1_0 150)
    (= leaf_1_0 151)
    (= leaf_1_0 152)
    (= leaf_1_0 153)
    (= leaf_1_0 154)
    (= leaf_1_0 155)
    (= leaf_1_0 156)
    (= leaf_1_0 157)
    (= leaf_1_0 158)
    (= leaf_1_0 159)
    (= leaf_1_0 160)
    (= leaf_1_0 161)
    (= leaf_1_0 162)
    (= leaf_1_0 163)
    (= leaf_1_0 164)
    (= leaf_1_0 165)
    (= leaf_1_0 166)
    (= leaf_1_0 167)
    (= leaf_1_0 168)
    (= leaf_1_0 169)
    (= leaf_1_0 170)
    (= leaf_1_0 171)
    (= leaf_1_0 172)
    (= leaf_1_0 173)
    (= leaf_1_0 174)
    (= leaf_1_0 175)
    (= leaf_1_0 176)
    (= leaf_1_0 177)
    (= leaf_1_0 178)
    (= leaf_1_0 179)
    (= leaf_1_0 180)
    (= leaf_1_0 181)
    (= leaf_1_0 182)
    (= leaf_1_0 183)
    (= leaf_1_0 184)
    (= leaf_1_0 185)
    (= leaf_1_0 186)
    (= leaf_1_0 187)
    (= leaf_1_0 188)
    (= leaf_1_0 189)
    (= leaf_1_0 190)
    (= leaf_1_0 191)
    (= leaf_1_0 192)
    (= leaf_1_0 193)
    (= leaf_1_0 194)
    (= leaf_1_0 195)
    (= leaf_1_0 196)
    (= leaf_1_0 197)
    (= leaf_1_0 198)
    (= leaf_1_0 199)
    (= leaf_1_0 200)
    (= leaf_1_0 201)
    (= leaf_1_0 202)
    (= leaf_1_0 203)
    (= leaf_1_0 204)
    (= leaf_1_0 205)
    (= leaf_1_0 206)
    (= leaf_1_0 207)
    (= leaf_1_0 208)
    (= leaf_1_0 209)
    (= leaf_1_0 210)
    (= leaf_1_0 211)
    (= leaf_1_0 212)
    (= leaf_1_0 213)
    (= leaf_1_0 214)
    (= leaf_1_0 215)
    (= leaf_1_0 216)
    (= leaf_1_0 217)
    (= leaf_1_0 218)
    (= leaf_1_0 219)
    (= leaf_1_0 220)
    (= leaf_1_0 221)
    (= leaf_1_0 222)
    (= leaf_1_0 223)
    (= leaf_1_0 224)))
(assert (<= leaf_1_0 224))
(assert (>= leaf_1_0 0))
(assert (or (= leaf_1_1 0)
    (= leaf_1_1 14)
    (= leaf_1_1 15)
    (= leaf_1_1 16)
    (= leaf_1_1 17)
    (= leaf_1_1 18)
    (= leaf_1_1 19)
    (= leaf_1_1 20)
    (= leaf_1_1 21)
    (= leaf_1_1 22)
    (= leaf_1_1 23)
    (= leaf_1_1 24)
    (= leaf_1_1 25)
    (= leaf_1_1 26)
    (= leaf_1_1 27)
    (= leaf_1_1 28)
    (= leaf_1_1 29)
    (= leaf_1_1 30)
    (= leaf_1_1 31)
    (= leaf_1_1 32)
    (= leaf_1_1 33)
    (= leaf_1_1 34)
    (= leaf_1_1 35)
    (= leaf_1_1 36)
    (= leaf_1_1 37)
    (= leaf_1_1 38)
    (= leaf_1_1 39)
    (= leaf_1_1 40)
    (= leaf_1_1 41)
    (= leaf_1_1 42)
    (= leaf_1_1 43)
    (= leaf_1_1 44)
    (= leaf_1_1 45)
    (= leaf_1_1 46)
    (= leaf_1_1 47)
    (= leaf_1_1 48)
    (= leaf_1_1 49)
    (= leaf_1_1 50)
    (= leaf_1_1 51)
    (= leaf_1_1 52)
    (= leaf_1_1 53)
    (= leaf_1_1 54)
    (= leaf_1_1 55)
    (= leaf_1_1 56)
    (= leaf_1_1 57)
    (= leaf_1_1 58)
    (= leaf_1_1 59)
    (= leaf_1_1 60)
    (= leaf_1_1 61)
    (= leaf_1_1 62)
    (= leaf_1_1 63)
    (= leaf_1_1 64)
    (= leaf_1_1 65)
    (= leaf_1_1 66)
    (= leaf_1_1 67)
    (= leaf_1_1 68)
    (= leaf_1_1 69)
    (= leaf_1_1 70)
    (= leaf_1_1 71)
    (= leaf_1_1 72)
    (= leaf_1_1 73)
    (= leaf_1_1 74)
    (= leaf_1_1 75)
    (= leaf_1_1 76)
    (= leaf_1_1 77)
    (= leaf_1_1 78)
    (= leaf_1_1 79)
    (= leaf_1_1 80)
    (= leaf_1_1 81)
    (= leaf_1_1 82)
    (= leaf_1_1 83)
    (= leaf_1_1 84)
    (= leaf_1_1 85)
    (= leaf_1_1 86)
    (= leaf_1_1 87)
    (= leaf_1_1 88)
    (= leaf_1_1 89)
    (= leaf_1_1 90)
    (= leaf_1_1 91)
    (= leaf_1_1 92)
    (= leaf_1_1 93)
    (= leaf_1_1 94)
    (= leaf_1_1 95)
    (= leaf_1_1 96)
    (= leaf_1_1 97)
    (= leaf_1_1 98)
    (= leaf_1_1 99)
    (= leaf_1_1 100)
    (= leaf_1_1 101)
    (= leaf_1_1 102)
    (= leaf_1_1 103)
    (= leaf_1_1 104)
    (= leaf_1_1 105)
    (= leaf_1_1 106)
    (= leaf_1_1 107)
    (= leaf_1_1 108)
    (= leaf_1_1 109)
    (= leaf_1_1 110)
    (= leaf_1_1 111)
    (= leaf_1_1 112)
    (= leaf_1_1 113)
    (= leaf_1_1 114)
    (= leaf_1_1 115)
    (= leaf_1_1 116)
    (= leaf_1_1 117)
    (= leaf_1_1 118)
    (= leaf_1_1 119)
    (= leaf_1_1 120)
    (= leaf_1_1 121)
    (= leaf_1_1 122)
    (= leaf_1_1 123)
    (= leaf_1_1 124)
    (= leaf_1_1 125)
    (= leaf_1_1 126)
    (= leaf_1_1 127)
    (= leaf_1_1 128)
    (= leaf_1_1 129)
    (= leaf_1_1 130)
    (= leaf_1_1 131)
    (= leaf_1_1 132)
    (= leaf_1_1 133)
    (= leaf_1_1 134)
    (= leaf_1_1 135)
    (= leaf_1_1 136)
    (= leaf_1_1 137)
    (= leaf_1_1 138)
    (= leaf_1_1 139)
    (= leaf_1_1 140)
    (= leaf_1_1 141)
    (= leaf_1_1 142)
    (= leaf_1_1 143)
    (= leaf_1_1 144)
    (= leaf_1_1 145)
    (= leaf_1_1 146)
    (= leaf_1_1 147)
    (= leaf_1_1 148)
    (= leaf_1_1 149)
    (= leaf_1_1 150)
    (= leaf_1_1 151)
    (= leaf_1_1 152)
    (= leaf_1_1 153)
    (= leaf_1_1 154)
    (= leaf_1_1 155)
    (= leaf_1_1 156)
    (= leaf_1_1 157)
    (= leaf_1_1 158)
    (= leaf_1_1 159)
    (= leaf_1_1 160)
    (= leaf_1_1 161)
    (= leaf_1_1 162)
    (= leaf_1_1 163)
    (= leaf_1_1 164)
    (= leaf_1_1 165)
    (= leaf_1_1 166)
    (= leaf_1_1 167)
    (= leaf_1_1 168)
    (= leaf_1_1 169)
    (= leaf_1_1 170)
    (= leaf_1_1 171)
    (= leaf_1_1 172)
    (= leaf_1_1 173)
    (= leaf_1_1 174)
    (= leaf_1_1 175)
    (= leaf_1_1 176)
    (= leaf_1_1 177)
    (= leaf_1_1 178)
    (= leaf_1_1 179)
    (= leaf_1_1 180)
    (= leaf_1_1 181)
    (= leaf_1_1 182)
    (= leaf_1_1 183)
    (= leaf_1_1 184)
    (= leaf_1_1 185)
    (= leaf_1_1 186)
    (= leaf_1_1 187)
    (= leaf_1_1 188)
    (= leaf_1_1 189)
    (= leaf_1_1 190)
    (= leaf_1_1 191)
    (= leaf_1_1 192)
    (= leaf_1_1 193)
    (= leaf_1_1 194)
    (= leaf_1_1 195)
    (= leaf_1_1 196)
    (= leaf_1_1 197)
    (= leaf_1_1 198)
    (= leaf_1_1 199)
    (= leaf_1_1 200)
    (= leaf_1_1 201)
    (= leaf_1_1 202)
    (= leaf_1_1 203)
    (= leaf_1_1 204)
    (= leaf_1_1 205)
    (= leaf_1_1 206)
    (= leaf_1_1 207)
    (= leaf_1_1 208)
    (= leaf_1_1 209)
    (= leaf_1_1 210)
    (= leaf_1_1 211)
    (= leaf_1_1 212)
    (= leaf_1_1 213)
    (= leaf_1_1 214)
    (= leaf_1_1 215)
    (= leaf_1_1 216)
    (= leaf_1_1 217)
    (= leaf_1_1 218)
    (= leaf_1_1 219)
    (= leaf_1_1 220)
    (= leaf_1_1 221)
    (= leaf_1_1 222)
    (= leaf_1_1 223)
    (= leaf_1_1 224)))
(assert (<= leaf_1_1 224))
(assert (>= leaf_1_1 0))
(assert (or (= leaf_1_2 0)
    (= leaf_1_2 14)
    (= leaf_1_2 15)
    (= leaf_1_2 16)
    (= leaf_1_2 17)
    (= leaf_1_2 18)
    (= leaf_1_2 19)
    (= leaf_1_2 20)
    (= leaf_1_2 21)
    (= leaf_1_2 22)
    (= leaf_1_2 23)
    (= leaf_1_2 24)
    (= leaf_1_2 25)
    (= leaf_1_2 26)
    (= leaf_1_2 27)
    (= leaf_1_2 28)
    (= leaf_1_2 29)
    (= leaf_1_2 30)
    (= leaf_1_2 31)
    (= leaf_1_2 32)
    (= leaf_1_2 33)
    (= leaf_1_2 34)
    (= leaf_1_2 35)
    (= leaf_1_2 36)
    (= leaf_1_2 37)
    (= leaf_1_2 38)
    (= leaf_1_2 39)
    (= leaf_1_2 40)
    (= leaf_1_2 41)
    (= leaf_1_2 42)
    (= leaf_1_2 43)
    (= leaf_1_2 44)
    (= leaf_1_2 45)
    (= leaf_1_2 46)
    (= leaf_1_2 47)
    (= leaf_1_2 48)
    (= leaf_1_2 49)
    (= leaf_1_2 50)
    (= leaf_1_2 51)
    (= leaf_1_2 52)
    (= leaf_1_2 53)
    (= leaf_1_2 54)
    (= leaf_1_2 55)
    (= leaf_1_2 56)
    (= leaf_1_2 57)
    (= leaf_1_2 58)
    (= leaf_1_2 59)
    (= leaf_1_2 60)
    (= leaf_1_2 61)
    (= leaf_1_2 62)
    (= leaf_1_2 63)
    (= leaf_1_2 64)
    (= leaf_1_2 65)
    (= leaf_1_2 66)
    (= leaf_1_2 67)
    (= leaf_1_2 68)
    (= leaf_1_2 69)
    (= leaf_1_2 70)
    (= leaf_1_2 71)
    (= leaf_1_2 72)
    (= leaf_1_2 73)
    (= leaf_1_2 74)
    (= leaf_1_2 75)
    (= leaf_1_2 76)
    (= leaf_1_2 77)
    (= leaf_1_2 78)
    (= leaf_1_2 79)
    (= leaf_1_2 80)
    (= leaf_1_2 81)
    (= leaf_1_2 82)
    (= leaf_1_2 83)
    (= leaf_1_2 84)
    (= leaf_1_2 85)
    (= leaf_1_2 86)
    (= leaf_1_2 87)
    (= leaf_1_2 88)
    (= leaf_1_2 89)
    (= leaf_1_2 90)
    (= leaf_1_2 91)
    (= leaf_1_2 92)
    (= leaf_1_2 93)
    (= leaf_1_2 94)
    (= leaf_1_2 95)
    (= leaf_1_2 96)
    (= leaf_1_2 97)
    (= leaf_1_2 98)
    (= leaf_1_2 99)
    (= leaf_1_2 100)
    (= leaf_1_2 101)
    (= leaf_1_2 102)
    (= leaf_1_2 103)
    (= leaf_1_2 104)
    (= leaf_1_2 105)
    (= leaf_1_2 106)
    (= leaf_1_2 107)
    (= leaf_1_2 108)
    (= leaf_1_2 109)
    (= leaf_1_2 110)
    (= leaf_1_2 111)
    (= leaf_1_2 112)
    (= leaf_1_2 113)
    (= leaf_1_2 114)
    (= leaf_1_2 115)
    (= leaf_1_2 116)
    (= leaf_1_2 117)
    (= leaf_1_2 118)
    (= leaf_1_2 119)
    (= leaf_1_2 120)
    (= leaf_1_2 121)
    (= leaf_1_2 122)
    (= leaf_1_2 123)
    (= leaf_1_2 124)
    (= leaf_1_2 125)
    (= leaf_1_2 126)
    (= leaf_1_2 127)
    (= leaf_1_2 128)
    (= leaf_1_2 129)
    (= leaf_1_2 130)
    (= leaf_1_2 131)
    (= leaf_1_2 132)
    (= leaf_1_2 133)
    (= leaf_1_2 134)
    (= leaf_1_2 135)
    (= leaf_1_2 136)
    (= leaf_1_2 137)
    (= leaf_1_2 138)
    (= leaf_1_2 139)
    (= leaf_1_2 140)
    (= leaf_1_2 141)
    (= leaf_1_2 142)
    (= leaf_1_2 143)
    (= leaf_1_2 144)
    (= leaf_1_2 145)
    (= leaf_1_2 146)
    (= leaf_1_2 147)
    (= leaf_1_2 148)
    (= leaf_1_2 149)
    (= leaf_1_2 150)
    (= leaf_1_2 151)
    (= leaf_1_2 152)
    (= leaf_1_2 153)
    (= leaf_1_2 154)
    (= leaf_1_2 155)
    (= leaf_1_2 156)
    (= leaf_1_2 157)
    (= leaf_1_2 158)
    (= leaf_1_2 159)
    (= leaf_1_2 160)
    (= leaf_1_2 161)
    (= leaf_1_2 162)
    (= leaf_1_2 163)
    (= leaf_1_2 164)
    (= leaf_1_2 165)
    (= leaf_1_2 166)
    (= leaf_1_2 167)
    (= leaf_1_2 168)
    (= leaf_1_2 169)
    (= leaf_1_2 170)
    (= leaf_1_2 171)
    (= leaf_1_2 172)
    (= leaf_1_2 173)
    (= leaf_1_2 174)
    (= leaf_1_2 175)
    (= leaf_1_2 176)
    (= leaf_1_2 177)
    (= leaf_1_2 178)
    (= leaf_1_2 179)
    (= leaf_1_2 180)
    (= leaf_1_2 181)
    (= leaf_1_2 182)
    (= leaf_1_2 183)
    (= leaf_1_2 184)
    (= leaf_1_2 185)
    (= leaf_1_2 186)
    (= leaf_1_2 187)
    (= leaf_1_2 188)
    (= leaf_1_2 189)
    (= leaf_1_2 190)
    (= leaf_1_2 191)
    (= leaf_1_2 192)
    (= leaf_1_2 193)
    (= leaf_1_2 194)
    (= leaf_1_2 195)
    (= leaf_1_2 196)
    (= leaf_1_2 197)
    (= leaf_1_2 198)
    (= leaf_1_2 199)
    (= leaf_1_2 200)
    (= leaf_1_2 201)
    (= leaf_1_2 202)
    (= leaf_1_2 203)
    (= leaf_1_2 204)
    (= leaf_1_2 205)
    (= leaf_1_2 206)
    (= leaf_1_2 207)
    (= leaf_1_2 208)
    (= leaf_1_2 209)
    (= leaf_1_2 210)
    (= leaf_1_2 211)
    (= leaf_1_2 212)
    (= leaf_1_2 213)
    (= leaf_1_2 214)
    (= leaf_1_2 215)
    (= leaf_1_2 216)
    (= leaf_1_2 217)
    (= leaf_1_2 218)
    (= leaf_1_2 219)
    (= leaf_1_2 220)
    (= leaf_1_2 221)
    (= leaf_1_2 222)
    (= leaf_1_2 223)
    (= leaf_1_2 224)))
(assert (<= leaf_1_2 224))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 1)))
(assert (or (= leaf_2_0 0)
    (= leaf_2_0 14)
    (= leaf_2_0 15)
    (= leaf_2_0 16)
    (= leaf_2_0 17)
    (= leaf_2_0 18)
    (= leaf_2_0 19)
    (= leaf_2_0 20)
    (= leaf_2_0 21)
    (= leaf_2_0 22)
    (= leaf_2_0 23)
    (= leaf_2_0 24)
    (= leaf_2_0 25)
    (= leaf_2_0 26)
    (= leaf_2_0 27)
    (= leaf_2_0 28)
    (= leaf_2_0 29)
    (= leaf_2_0 30)
    (= leaf_2_0 31)
    (= leaf_2_0 32)
    (= leaf_2_0 33)
    (= leaf_2_0 34)
    (= leaf_2_0 35)
    (= leaf_2_0 36)
    (= leaf_2_0 37)
    (= leaf_2_0 38)
    (= leaf_2_0 39)
    (= leaf_2_0 40)
    (= leaf_2_0 41)
    (= leaf_2_0 42)
    (= leaf_2_0 43)
    (= leaf_2_0 44)
    (= leaf_2_0 45)
    (= leaf_2_0 46)
    (= leaf_2_0 47)
    (= leaf_2_0 48)
    (= leaf_2_0 49)
    (= leaf_2_0 50)
    (= leaf_2_0 51)
    (= leaf_2_0 52)
    (= leaf_2_0 53)
    (= leaf_2_0 54)
    (= leaf_2_0 55)
    (= leaf_2_0 56)
    (= leaf_2_0 57)
    (= leaf_2_0 58)
    (= leaf_2_0 59)
    (= leaf_2_0 60)
    (= leaf_2_0 61)
    (= leaf_2_0 62)
    (= leaf_2_0 63)
    (= leaf_2_0 64)
    (= leaf_2_0 65)
    (= leaf_2_0 66)
    (= leaf_2_0 67)
    (= leaf_2_0 68)
    (= leaf_2_0 69)
    (= leaf_2_0 70)
    (= leaf_2_0 71)
    (= leaf_2_0 72)
    (= leaf_2_0 73)
    (= leaf_2_0 74)
    (= leaf_2_0 75)
    (= leaf_2_0 76)
    (= leaf_2_0 77)
    (= leaf_2_0 78)
    (= leaf_2_0 79)
    (= leaf_2_0 80)
    (= leaf_2_0 81)
    (= leaf_2_0 82)
    (= leaf_2_0 83)
    (= leaf_2_0 84)
    (= leaf_2_0 85)
    (= leaf_2_0 86)
    (= leaf_2_0 87)
    (= leaf_2_0 88)
    (= leaf_2_0 89)
    (= leaf_2_0 90)
    (= leaf_2_0 91)
    (= leaf_2_0 92)
    (= leaf_2_0 93)
    (= leaf_2_0 94)
    (= leaf_2_0 95)
    (= leaf_2_0 96)
    (= leaf_2_0 97)
    (= leaf_2_0 98)
    (= leaf_2_0 99)
    (= leaf_2_0 100)
    (= leaf_2_0 101)
    (= leaf_2_0 102)
    (= leaf_2_0 103)
    (= leaf_2_0 104)
    (= leaf_2_0 105)
    (= leaf_2_0 106)
    (= leaf_2_0 107)
    (= leaf_2_0 108)
    (= leaf_2_0 109)
    (= leaf_2_0 110)
    (= leaf_2_0 111)
    (= leaf_2_0 112)
    (= leaf_2_0 113)
    (= leaf_2_0 114)
    (= leaf_2_0 115)
    (= leaf_2_0 116)
    (= leaf_2_0 117)
    (= leaf_2_0 118)
    (= leaf_2_0 119)
    (= leaf_2_0 120)
    (= leaf_2_0 121)
    (= leaf_2_0 122)
    (= leaf_2_0 123)
    (= leaf_2_0 124)
    (= leaf_2_0 125)
    (= leaf_2_0 126)
    (= leaf_2_0 127)
    (= leaf_2_0 128)
    (= leaf_2_0 129)
    (= leaf_2_0 130)
    (= leaf_2_0 131)
    (= leaf_2_0 132)
    (= leaf_2_0 133)
    (= leaf_2_0 134)
    (= leaf_2_0 135)
    (= leaf_2_0 136)
    (= leaf_2_0 137)
    (= leaf_2_0 138)
    (= leaf_2_0 139)
    (= leaf_2_0 140)
    (= leaf_2_0 141)
    (= leaf_2_0 142)
    (= leaf_2_0 143)
    (= leaf_2_0 144)
    (= leaf_2_0 145)
    (= leaf_2_0 146)
    (= leaf_2_0 147)
    (= leaf_2_0 148)
    (= leaf_2_0 149)
    (= leaf_2_0 150)
    (= leaf_2_0 151)
    (= leaf_2_0 152)
    (= leaf_2_0 153)
    (= leaf_2_0 154)
    (= leaf_2_0 155)
    (= leaf_2_0 156)
    (= leaf_2_0 157)
    (= leaf_2_0 158)
    (= leaf_2_0 159)
    (= leaf_2_0 160)
    (= leaf_2_0 161)
    (= leaf_2_0 162)
    (= leaf_2_0 163)
    (= leaf_2_0 164)
    (= leaf_2_0 165)
    (= leaf_2_0 166)
    (= leaf_2_0 167)
    (= leaf_2_0 168)
    (= leaf_2_0 169)
    (= leaf_2_0 170)
    (= leaf_2_0 171)
    (= leaf_2_0 172)
    (= leaf_2_0 173)
    (= leaf_2_0 174)
    (= leaf_2_0 175)
    (= leaf_2_0 176)
    (= leaf_2_0 177)
    (= leaf_2_0 178)
    (= leaf_2_0 179)
    (= leaf_2_0 180)
    (= leaf_2_0 181)
    (= leaf_2_0 182)
    (= leaf_2_0 183)
    (= leaf_2_0 184)
    (= leaf_2_0 185)
    (= leaf_2_0 186)
    (= leaf_2_0 187)
    (= leaf_2_0 188)
    (= leaf_2_0 189)
    (= leaf_2_0 190)
    (= leaf_2_0 191)
    (= leaf_2_0 192)
    (= leaf_2_0 193)
    (= leaf_2_0 194)
    (= leaf_2_0 195)
    (= leaf_2_0 196)
    (= leaf_2_0 197)
    (= leaf_2_0 198)
    (= leaf_2_0 199)
    (= leaf_2_0 200)
    (= leaf_2_0 201)
    (= leaf_2_0 202)
    (= leaf_2_0 203)
    (= leaf_2_0 204)
    (= leaf_2_0 205)
    (= leaf_2_0 206)
    (= leaf_2_0 207)
    (= leaf_2_0 208)
    (= leaf_2_0 209)
    (= leaf_2_0 210)
    (= leaf_2_0 211)
    (= leaf_2_0 212)
    (= leaf_2_0 213)
    (= leaf_2_0 214)
    (= leaf_2_0 215)
    (= leaf_2_0 216)
    (= leaf_2_0 217)
    (= leaf_2_0 218)
    (= leaf_2_0 219)
    (= leaf_2_0 220)
    (= leaf_2_0 221)
    (= leaf_2_0 222)
    (= leaf_2_0 223)
    (= leaf_2_0 224)
    (= leaf_2_0 226)))
(assert (<= leaf_2_0 226))
(assert (>= leaf_2_0 0))
(assert (or (= leaf_2_1 0)
    (= leaf_2_1 14)
    (= leaf_2_1 15)
    (= leaf_2_1 16)
    (= leaf_2_1 17)
    (= leaf_2_1 18)
    (= leaf_2_1 19)
    (= leaf_2_1 20)
    (= leaf_2_1 21)
    (= leaf_2_1 22)
    (= leaf_2_1 23)
    (= leaf_2_1 24)
    (= leaf_2_1 25)
    (= leaf_2_1 26)
    (= leaf_2_1 27)
    (= leaf_2_1 28)
    (= leaf_2_1 29)
    (= leaf_2_1 30)
    (= leaf_2_1 31)
    (= leaf_2_1 32)
    (= leaf_2_1 33)
    (= leaf_2_1 34)
    (= leaf_2_1 35)
    (= leaf_2_1 36)
    (= leaf_2_1 37)
    (= leaf_2_1 38)
    (= leaf_2_1 39)
    (= leaf_2_1 40)
    (= leaf_2_1 41)
    (= leaf_2_1 42)
    (= leaf_2_1 43)
    (= leaf_2_1 44)
    (= leaf_2_1 45)
    (= leaf_2_1 46)
    (= leaf_2_1 47)
    (= leaf_2_1 48)
    (= leaf_2_1 49)
    (= leaf_2_1 50)
    (= leaf_2_1 51)
    (= leaf_2_1 52)
    (= leaf_2_1 53)
    (= leaf_2_1 54)
    (= leaf_2_1 55)
    (= leaf_2_1 56)
    (= leaf_2_1 57)
    (= leaf_2_1 58)
    (= leaf_2_1 59)
    (= leaf_2_1 60)
    (= leaf_2_1 61)
    (= leaf_2_1 62)
    (= leaf_2_1 63)
    (= leaf_2_1 64)
    (= leaf_2_1 65)
    (= leaf_2_1 66)
    (= leaf_2_1 67)
    (= leaf_2_1 68)
    (= leaf_2_1 69)
    (= leaf_2_1 70)
    (= leaf_2_1 71)
    (= leaf_2_1 72)
    (= leaf_2_1 73)
    (= leaf_2_1 74)
    (= leaf_2_1 75)
    (= leaf_2_1 76)
    (= leaf_2_1 77)
    (= leaf_2_1 78)
    (= leaf_2_1 79)
    (= leaf_2_1 80)
    (= leaf_2_1 81)
    (= leaf_2_1 82)
    (= leaf_2_1 83)
    (= leaf_2_1 84)
    (= leaf_2_1 85)
    (= leaf_2_1 86)
    (= leaf_2_1 87)
    (= leaf_2_1 88)
    (= leaf_2_1 89)
    (= leaf_2_1 90)
    (= leaf_2_1 91)
    (= leaf_2_1 92)
    (= leaf_2_1 93)
    (= leaf_2_1 94)
    (= leaf_2_1 95)
    (= leaf_2_1 96)
    (= leaf_2_1 97)
    (= leaf_2_1 98)
    (= leaf_2_1 99)
    (= leaf_2_1 100)
    (= leaf_2_1 101)
    (= leaf_2_1 102)
    (= leaf_2_1 103)
    (= leaf_2_1 104)
    (= leaf_2_1 105)
    (= leaf_2_1 106)
    (= leaf_2_1 107)
    (= leaf_2_1 108)
    (= leaf_2_1 109)
    (= leaf_2_1 110)
    (= leaf_2_1 111)
    (= leaf_2_1 112)
    (= leaf_2_1 113)
    (= leaf_2_1 114)
    (= leaf_2_1 115)
    (= leaf_2_1 116)
    (= leaf_2_1 117)
    (= leaf_2_1 118)
    (= leaf_2_1 119)
    (= leaf_2_1 120)
    (= leaf_2_1 121)
    (= leaf_2_1 122)
    (= leaf_2_1 123)
    (= leaf_2_1 124)
    (= leaf_2_1 125)
    (= leaf_2_1 126)
    (= leaf_2_1 127)
    (= leaf_2_1 128)
    (= leaf_2_1 129)
    (= leaf_2_1 130)
    (= leaf_2_1 131)
    (= leaf_2_1 132)
    (= leaf_2_1 133)
    (= leaf_2_1 134)
    (= leaf_2_1 135)
    (= leaf_2_1 136)
    (= leaf_2_1 137)
    (= leaf_2_1 138)
    (= leaf_2_1 139)
    (= leaf_2_1 140)
    (= leaf_2_1 141)
    (= leaf_2_1 142)
    (= leaf_2_1 143)
    (= leaf_2_1 144)
    (= leaf_2_1 145)
    (= leaf_2_1 146)
    (= leaf_2_1 147)
    (= leaf_2_1 148)
    (= leaf_2_1 149)
    (= leaf_2_1 150)
    (= leaf_2_1 151)
    (= leaf_2_1 152)
    (= leaf_2_1 153)
    (= leaf_2_1 154)
    (= leaf_2_1 155)
    (= leaf_2_1 156)
    (= leaf_2_1 157)
    (= leaf_2_1 158)
    (= leaf_2_1 159)
    (= leaf_2_1 160)
    (= leaf_2_1 161)
    (= leaf_2_1 162)
    (= leaf_2_1 163)
    (= leaf_2_1 164)
    (= leaf_2_1 165)
    (= leaf_2_1 166)
    (= leaf_2_1 167)
    (= leaf_2_1 168)
    (= leaf_2_1 169)
    (= leaf_2_1 170)
    (= leaf_2_1 171)
    (= leaf_2_1 172)
    (= leaf_2_1 173)
    (= leaf_2_1 174)
    (= leaf_2_1 175)
    (= leaf_2_1 176)
    (= leaf_2_1 177)
    (= leaf_2_1 178)
    (= leaf_2_1 179)
    (= leaf_2_1 180)
    (= leaf_2_1 181)
    (= leaf_2_1 182)
    (= leaf_2_1 183)
    (= leaf_2_1 184)
    (= leaf_2_1 185)
    (= leaf_2_1 186)
    (= leaf_2_1 187)
    (= leaf_2_1 188)
    (= leaf_2_1 189)
    (= leaf_2_1 190)
    (= leaf_2_1 191)
    (= leaf_2_1 192)
    (= leaf_2_1 193)
    (= leaf_2_1 194)
    (= leaf_2_1 195)
    (= leaf_2_1 196)
    (= leaf_2_1 197)
    (= leaf_2_1 198)
    (= leaf_2_1 199)
    (= leaf_2_1 200)
    (= leaf_2_1 201)
    (= leaf_2_1 202)
    (= leaf_2_1 203)
    (= leaf_2_1 204)
    (= leaf_2_1 205)
    (= leaf_2_1 206)
    (= leaf_2_1 207)
    (= leaf_2_1 208)
    (= leaf_2_1 209)
    (= leaf_2_1 210)
    (= leaf_2_1 211)
    (= leaf_2_1 212)
    (= leaf_2_1 213)
    (= leaf_2_1 214)
    (= leaf_2_1 215)
    (= leaf_2_1 216)
    (= leaf_2_1 217)
    (= leaf_2_1 218)
    (= leaf_2_1 219)
    (= leaf_2_1 220)
    (= leaf_2_1 221)
    (= leaf_2_1 222)
    (= leaf_2_1 223)
    (= leaf_2_1 224)
    (= leaf_2_1 226)))
(assert (<= leaf_2_1 226))
(assert (>= leaf_2_1 0))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 223)
    (= leaf_1_1 223)
    (= leaf_1_2 223)
    (= leaf_1_3 223)
    (= leaf_2_0 223)
    (= leaf_2_1 223)
    (= leaf_2_2 223)
    (= leaf_2_3 223)))
(assert (or (= leaf_1_0 224)
    (= leaf_1_1 224)
    (= leaf_1_2 224)
    (= leaf_1_3 224)
    (= leaf_2_0 224)
    (= leaf_2_1 224)
    (= leaf_2_2 224)
    (= leaf_2_3 224)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_0 223) (= #b01100 bv_1_0_a) (= #b00000 bv_1_0_b))
        (and (= leaf_1_0 224) (= #b01011 bv_1_0_a) (= #b00000 bv_1_0_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_1 219) (= #b00001 bv_1_1_a) (= #b10000 bv_1_1_b))
        (and (= leaf_1_1 220) (= #b00001 bv_1_1_a) (= #b10000 bv_1_1_b))
        (and (= leaf_1_1 221) (= #b00001 bv_1_1_a) (= #b10000 bv_1_1_b))
        (and (= leaf_1_1 222) (= #b00001 bv_1_1_a) (= #b10000 bv_1_1_b)))))
(assert (=> (= root_1 12)
    (or (and (= leaf_1_2 18) (= #b00000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 19) (= #b00001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 20) (= #b00010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 21) (= #b00100 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 22) (= #b01000 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 23) (= #b00011 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 24) (= #b00101 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 25) (= #b01001 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 26) (= #b00110 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 27) (= #b01010 bv_1_2_a) (= #b00000 bv_1_2_b))
        (and (= leaf_1_2 28) (= #b01100 bv_1_2_a) (= #b00000 bv_1_2_b)))))
(assert (=> (= root_1 12)
    (and (= leaf_1_3 0) (= #b00000 bv_1_3_a) (= #b00000 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 226)))
(assert (=> (= root_2 1)
    (or (and (= leaf_2_0 223) (= #b01100 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 224) (= #b01011 bv_2_0_a) (= #b00000 bv_2_0_b))
        (and (= leaf_2_0 226) (= bv_2_0_a bv_1) (= #b00000 bv_2_0_b)))))
(assert (= leaf_2_1_is_line_1 (= leaf_2_1 226)))
(assert (=> (= root_2 1)
    (or (and (= leaf_2_1 223) (= #b01100 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 224) (= #b01011 bv_2_1_a) (= #b00000 bv_2_1_b))
        (and (= leaf_2_1 226) (= bv_2_1_a bv_1) (= #b00000 bv_2_1_b)))))
(assert (=> (= root_2 1) (and (= leaf_2_2 0) (= #b00000 bv_2_2_a) (= #b00000 bv_2_2_b))))
(assert (=> (= root_2 1) (and (= leaf_2_3 0) (= #b00000 bv_2_3_a) (= #b00000 bv_2_3_b))))
(assert (or (= leaf_1_0 219)
    (= leaf_1_1 219)
    (= leaf_1_2 219)
    (= leaf_1_3 219)
    (= leaf_2_0 219)
    (= leaf_2_1 219)
    (= leaf_2_2 219)
    (= leaf_2_3 219)
    (= leaf_1_0 220)
    (= leaf_1_1 220)
    (= leaf_1_2 220)
    (= leaf_1_3 220)
    (= leaf_2_0 220)
    (= leaf_2_1 220)
    (= leaf_2_2 220)
    (= leaf_2_3 220)
    (= leaf_1_0 221)
    (= leaf_1_1 221)
    (= leaf_1_2 221)
    (= leaf_1_3 221)
    (= leaf_2_0 221)
    (= leaf_2_1 221)
    (= leaf_2_2 221)
    (= leaf_2_3 221)
    (= leaf_1_0 222)
    (= leaf_1_1 222)
    (= leaf_1_2 222)
    (= leaf_1_3 222)
    (= leaf_2_0 222)
    (= leaf_2_1 222)
    (= leaf_2_2 222)
    (= leaf_2_3 222)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b00000 bv_1_2_a)
                    (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b00000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #b00000 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= bv_1_0_a bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #b00000 bv_2_2_a)
                    (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #b00000 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #b00000 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= bv_2_0_a bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i011_1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_1.csv", col_types = cols("VehicleID" = col_integer(),"Name" = col_character()))
df_i011_1 <- copy_to(con, df_i011_1)
df_i011_2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_2.csv", col_types = cols("LocationID" = col_integer(),"VehicleID" = col_integer(),"City" = col_character()))
df_i011_2 <- copy_to(con, df_i011_2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o011.csv", col_types = cols("VehicleID" = col_integer(),"Name" = col_character(),"concatCity" = col_character()))

string_agg <- function(v,s) {paste0("", Reduce(function(x, y) paste(x, y, sep = s), v))}

df3 <- df_i011_2 %>% group_by(VehicleID) %>% summarise(concatCity = string_agg(City, ', ')) %>% ungroup()
df4 <- inner_join(df_i011_1, df3, na_matches="never")
out <- df4 %>% select(VehicleID, Name, concatCity)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `VehicleID`,
       `Name`,
       `concatCity`
FROM
  (SELECT `LHS`.`VehicleID` AS `VehicleID`,
          `Name`,
          `concatCity`
   FROM `df_i011_1` AS `LHS`
   INNER JOIN
     (SELECT `VehicleID`,
             string_agg(`City`, ', ') AS concatCity
      FROM df_i011_2
      GROUP BY VehicleID) AS RHS ON (LHS.VehicleID = RHS.VehicleID))
