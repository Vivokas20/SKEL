[     2.353][MainProcess][INFO] Parsing specification...
[     2.374][MainProcess][INFO] File read
[     2.375][MainProcess][DEBUG] Reading input files...
[     2.387][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i031.csv: ['int64', 'string', 'int64']
[     2.394][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o031.csv: ['int64', 'int64', 'string']
[     2.394][MainProcess][INFO] Parsing sketch...
[     2.395][MainProcess][DEBUG] Sketch creation: Line(T1, root=['mutate'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[])])
[     2.395][MainProcess][DEBUG] Sketch creation: Line(T2, root=['filter'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[])])
[     2.432][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 30, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 32, 'filter': 2, 'summarise': 7, 'mutate': 1}
[     2.432][MainProcess][DEBUG] {'natural_join': 0.011363636363636364, 'natural_join3': 0.011363636363636364, 'natural_join4': 0.011363636363636364, 'inner_join': 0.3409090909090909, 'anti_join': 0.07954545454545454, 'left_join': 0.011363636363636364, 'union': 0.011363636363636364, 'intersect': 0.03409090909090909, 'semi_join': 0.011363636363636364, 'cross_join': 0.36363636363636365, 'filter': 0.022727272727272728, 'summarise': 0.07954545454545454, 'mutate': 0.011363636363636364}
[     2.432][MainProcess][DEBUG] {'natural_join': 0.011363636363636364, 'natural_join3': 0.011363636363636364, 'natural_join4': 0.011363636363636364, 'inner_join': 0.3409090909090909, 'anti_join': 0.07954545454545454, 'left_join': 0.011363636363636364, 'union': 0.011363636363636364, 'intersect': 0.03409090909090909, 'semi_join': 0.011363636363636364, 'cross_join': 0.36363636363636365, 'filter': 0.022727272727272728, 'summarise': 0.07954545454545454, 'mutate': 0.011363636363636364}
[     2.433][MainProcess][INFO] Building synthesizer...
[     2.434][MainProcess][DEBUG] [Line(T1, root=['mutate'], var=[13], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=SummariseCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])]), Line(T2, root=['filter'], var=[11], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=FilterCondition, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.549][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 103 constraints
[     2.555][MainProcess][DEBUG] Enumeration time: 0.12201452255249023
[     2.612][MainProcess][DEBUG] Synthesis time: 0.057053565979003906
[     2.612][MainProcess][INFO] Solution found: [mutate(input0, 'row_number_ = row_number()'), filter(line0, "name == 'Beta'")]
[     2.613][MainProcess][DEBUG] Solution found using process 0
[     2.613][MainProcess][INFO] Statistics:
[     2.613][MainProcess][INFO] 	Attempted programs: 2 (approx)
[     2.613][MainProcess][INFO] 		Rejected: 1 (approx)
[     2.613][MainProcess][INFO] 		Failed: 0 (approx)
[     2.613][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.613][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.613][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.613][MainProcess][INFO] 	Total time spent in enumerator init: 0.122015 (approx)
[     2.614][MainProcess][INFO] 	Total time spent in enumerator: 0.003009 (approx)
[     2.614][MainProcess][INFO] 		Enumerated 664.602123 programs/s avg. (just enumeration time)
[     2.614][MainProcess][INFO] 		Enumerated 1.036104 programs/s avg. (overall)
[     2.614][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.050668 (approx)
[     2.614][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.002621 (approx)
[     2.614][MainProcess][INFO] Solution found: [mutate(input0, 'row_number_ = row_number()'), filter(line0, "name == 'Beta'")]
[     2.614][MainProcess][INFO] Solution size: 2
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun type_2 () Int)
(declare-fun root_2 () Int)
(declare-fun leaf_2_0 () Int)
(declare-fun leaf_2_1 () Int)
(declare-fun leaf_2_2 () Int)
(declare-fun leaf_2_3 () Int)
(declare-fun leaf_2_3_is_line_1 () Bool)
(declare-fun leaf_2_2_is_line_1 () Bool)
(declare-fun leaf_2_1_is_line_1 () Bool)
(declare-fun leaf_2_0_is_line_1 () Bool)
(declare-fun bv_1_0_b () (_ BitVec 4))
(declare-fun bv_1_0_a () (_ BitVec 4))
(declare-fun bv_1_1_b () (_ BitVec 4))
(declare-fun bv_1_1_a () (_ BitVec 4))
(declare-fun bv_1_2_b () (_ BitVec 4))
(declare-fun bv_1_2_a () (_ BitVec 4))
(declare-fun bv_1_3_b () (_ BitVec 4))
(declare-fun bv_1_3_a () (_ BitVec 4))
(declare-fun bv_2_0_b () (_ BitVec 4))
(declare-fun bv_1 () (_ BitVec 4))
(declare-fun bv_2_0_a () (_ BitVec 4))
(declare-fun bv_2_1_b () (_ BitVec 4))
(declare-fun bv_2_1_a () (_ BitVec 4))
(declare-fun bv_2_2_b () (_ BitVec 4))
(declare-fun bv_2_2_a () (_ BitVec 4))
(declare-fun bv_2_3_b () (_ BitVec 4))
(declare-fun bv_2_3_a () (_ BitVec 4))
(declare-fun bv_2 () (_ BitVec 4))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 13)))
(assert (or (= leaf_1_0 0)
    (= leaf_1_0 14)
    (= leaf_1_0 15)
    (= leaf_1_0 16)
    (= leaf_1_0 17)
    (= leaf_1_0 18)
    (= leaf_1_0 19)
    (= leaf_1_0 20)
    (= leaf_1_0 21)
    (= leaf_1_0 22)
    (= leaf_1_0 23)
    (= leaf_1_0 24)
    (= leaf_1_0 25)
    (= leaf_1_0 26)
    (= leaf_1_0 27)
    (= leaf_1_0 28)
    (= leaf_1_0 29)
    (= leaf_1_0 30)
    (= leaf_1_0 31)
    (= leaf_1_0 32)
    (= leaf_1_0 33)
    (= leaf_1_0 34)
    (= leaf_1_0 35)
    (= leaf_1_0 36)
    (= leaf_1_0 37)
    (= leaf_1_0 38)
    (= leaf_1_0 39)
    (= leaf_1_0 40)
    (= leaf_1_0 41)
    (= leaf_1_0 42)
    (= leaf_1_0 43)
    (= leaf_1_0 44)
    (= leaf_1_0 45)
    (= leaf_1_0 46)
    (= leaf_1_0 47)
    (= leaf_1_0 48)
    (= leaf_1_0 49)
    (= leaf_1_0 50)
    (= leaf_1_0 51)
    (= leaf_1_0 52)
    (= leaf_1_0 53)
    (= leaf_1_0 54)
    (= leaf_1_0 55)
    (= leaf_1_0 56)
    (= leaf_1_0 57)
    (= leaf_1_0 58)
    (= leaf_1_0 59)
    (= leaf_1_0 60)
    (= leaf_1_0 61)
    (= leaf_1_0 62)
    (= leaf_1_0 63)
    (= leaf_1_0 64)
    (= leaf_1_0 65)
    (= leaf_1_0 66)
    (= leaf_1_0 67)
    (= leaf_1_0 68)
    (= leaf_1_0 69)
    (= leaf_1_0 70)
    (= leaf_1_0 71)
    (= leaf_1_0 72)
    (= leaf_1_0 73)
    (= leaf_1_0 74)
    (= leaf_1_0 75)
    (= leaf_1_0 76)
    (= leaf_1_0 77)
    (= leaf_1_0 78)
    (= leaf_1_0 79)
    (= leaf_1_0 80)
    (= leaf_1_0 81)
    (= leaf_1_0 82)
    (= leaf_1_0 83)
    (= leaf_1_0 84)
    (= leaf_1_0 85)
    (= leaf_1_0 86)
    (= leaf_1_0 87)
    (= leaf_1_0 88)
    (= leaf_1_0 89)))
(assert (<= leaf_1_0 89))
(assert (>= leaf_1_0 0))
(assert (or (= leaf_1_1 0)
    (= leaf_1_1 14)
    (= leaf_1_1 15)
    (= leaf_1_1 16)
    (= leaf_1_1 17)
    (= leaf_1_1 18)
    (= leaf_1_1 19)
    (= leaf_1_1 20)
    (= leaf_1_1 21)
    (= leaf_1_1 22)
    (= leaf_1_1 23)
    (= leaf_1_1 24)
    (= leaf_1_1 25)
    (= leaf_1_1 26)
    (= leaf_1_1 27)
    (= leaf_1_1 28)
    (= leaf_1_1 29)
    (= leaf_1_1 30)
    (= leaf_1_1 31)
    (= leaf_1_1 32)
    (= leaf_1_1 33)
    (= leaf_1_1 34)
    (= leaf_1_1 35)
    (= leaf_1_1 36)
    (= leaf_1_1 37)
    (= leaf_1_1 38)
    (= leaf_1_1 39)
    (= leaf_1_1 40)
    (= leaf_1_1 41)
    (= leaf_1_1 42)
    (= leaf_1_1 43)
    (= leaf_1_1 44)
    (= leaf_1_1 45)
    (= leaf_1_1 46)
    (= leaf_1_1 47)
    (= leaf_1_1 48)
    (= leaf_1_1 49)
    (= leaf_1_1 50)
    (= leaf_1_1 51)
    (= leaf_1_1 52)
    (= leaf_1_1 53)
    (= leaf_1_1 54)
    (= leaf_1_1 55)
    (= leaf_1_1 56)
    (= leaf_1_1 57)
    (= leaf_1_1 58)
    (= leaf_1_1 59)
    (= leaf_1_1 60)
    (= leaf_1_1 61)
    (= leaf_1_1 62)
    (= leaf_1_1 63)
    (= leaf_1_1 64)
    (= leaf_1_1 65)
    (= leaf_1_1 66)
    (= leaf_1_1 67)
    (= leaf_1_1 68)
    (= leaf_1_1 69)
    (= leaf_1_1 70)
    (= leaf_1_1 71)
    (= leaf_1_1 72)
    (= leaf_1_1 73)
    (= leaf_1_1 74)
    (= leaf_1_1 75)
    (= leaf_1_1 76)
    (= leaf_1_1 77)
    (= leaf_1_1 78)
    (= leaf_1_1 79)
    (= leaf_1_1 80)
    (= leaf_1_1 81)
    (= leaf_1_1 82)
    (= leaf_1_1 83)
    (= leaf_1_1 84)
    (= leaf_1_1 85)
    (= leaf_1_1 86)
    (= leaf_1_1 87)
    (= leaf_1_1 88)
    (= leaf_1_1 89)))
(assert (<= leaf_1_1 89))
(assert (>= leaf_1_1 0))
(assert (or (= leaf_1_2 0)))
(assert (<= leaf_1_2 0))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (< type_2 1))
(assert (>= type_2 0))
(assert (or (= root_2 11)))
(assert (or (= leaf_2_0 0)
    (= leaf_2_0 14)
    (= leaf_2_0 15)
    (= leaf_2_0 16)
    (= leaf_2_0 17)
    (= leaf_2_0 18)
    (= leaf_2_0 19)
    (= leaf_2_0 20)
    (= leaf_2_0 21)
    (= leaf_2_0 22)
    (= leaf_2_0 23)
    (= leaf_2_0 24)
    (= leaf_2_0 25)
    (= leaf_2_0 26)
    (= leaf_2_0 27)
    (= leaf_2_0 28)
    (= leaf_2_0 29)
    (= leaf_2_0 30)
    (= leaf_2_0 31)
    (= leaf_2_0 32)
    (= leaf_2_0 33)
    (= leaf_2_0 34)
    (= leaf_2_0 35)
    (= leaf_2_0 36)
    (= leaf_2_0 37)
    (= leaf_2_0 38)
    (= leaf_2_0 39)
    (= leaf_2_0 40)
    (= leaf_2_0 41)
    (= leaf_2_0 42)
    (= leaf_2_0 43)
    (= leaf_2_0 44)
    (= leaf_2_0 45)
    (= leaf_2_0 46)
    (= leaf_2_0 47)
    (= leaf_2_0 48)
    (= leaf_2_0 49)
    (= leaf_2_0 50)
    (= leaf_2_0 51)
    (= leaf_2_0 52)
    (= leaf_2_0 53)
    (= leaf_2_0 54)
    (= leaf_2_0 55)
    (= leaf_2_0 56)
    (= leaf_2_0 57)
    (= leaf_2_0 58)
    (= leaf_2_0 59)
    (= leaf_2_0 60)
    (= leaf_2_0 61)
    (= leaf_2_0 62)
    (= leaf_2_0 63)
    (= leaf_2_0 64)
    (= leaf_2_0 65)
    (= leaf_2_0 66)
    (= leaf_2_0 67)
    (= leaf_2_0 68)
    (= leaf_2_0 69)
    (= leaf_2_0 70)
    (= leaf_2_0 71)
    (= leaf_2_0 72)
    (= leaf_2_0 73)
    (= leaf_2_0 74)
    (= leaf_2_0 75)
    (= leaf_2_0 76)
    (= leaf_2_0 77)
    (= leaf_2_0 78)
    (= leaf_2_0 79)
    (= leaf_2_0 80)
    (= leaf_2_0 81)
    (= leaf_2_0 82)
    (= leaf_2_0 83)
    (= leaf_2_0 84)
    (= leaf_2_0 85)
    (= leaf_2_0 86)
    (= leaf_2_0 87)
    (= leaf_2_0 88)
    (= leaf_2_0 89)
    (= leaf_2_0 91)))
(assert (<= leaf_2_0 91))
(assert (>= leaf_2_0 0))
(assert (or (= leaf_2_1 0)
    (= leaf_2_1 14)
    (= leaf_2_1 15)
    (= leaf_2_1 16)
    (= leaf_2_1 17)
    (= leaf_2_1 18)
    (= leaf_2_1 19)
    (= leaf_2_1 20)
    (= leaf_2_1 21)
    (= leaf_2_1 22)
    (= leaf_2_1 23)
    (= leaf_2_1 24)
    (= leaf_2_1 25)
    (= leaf_2_1 26)
    (= leaf_2_1 27)
    (= leaf_2_1 28)
    (= leaf_2_1 29)
    (= leaf_2_1 30)
    (= leaf_2_1 31)
    (= leaf_2_1 32)
    (= leaf_2_1 33)
    (= leaf_2_1 34)
    (= leaf_2_1 35)
    (= leaf_2_1 36)
    (= leaf_2_1 37)
    (= leaf_2_1 38)
    (= leaf_2_1 39)
    (= leaf_2_1 40)
    (= leaf_2_1 41)
    (= leaf_2_1 42)
    (= leaf_2_1 43)
    (= leaf_2_1 44)
    (= leaf_2_1 45)
    (= leaf_2_1 46)
    (= leaf_2_1 47)
    (= leaf_2_1 48)
    (= leaf_2_1 49)
    (= leaf_2_1 50)
    (= leaf_2_1 51)
    (= leaf_2_1 52)
    (= leaf_2_1 53)
    (= leaf_2_1 54)
    (= leaf_2_1 55)
    (= leaf_2_1 56)
    (= leaf_2_1 57)
    (= leaf_2_1 58)
    (= leaf_2_1 59)
    (= leaf_2_1 60)
    (= leaf_2_1 61)
    (= leaf_2_1 62)
    (= leaf_2_1 63)
    (= leaf_2_1 64)
    (= leaf_2_1 65)
    (= leaf_2_1 66)
    (= leaf_2_1 67)
    (= leaf_2_1 68)
    (= leaf_2_1 69)
    (= leaf_2_1 70)
    (= leaf_2_1 71)
    (= leaf_2_1 72)
    (= leaf_2_1 73)
    (= leaf_2_1 74)
    (= leaf_2_1 75)
    (= leaf_2_1 76)
    (= leaf_2_1 77)
    (= leaf_2_1 78)
    (= leaf_2_1 79)
    (= leaf_2_1 80)
    (= leaf_2_1 81)
    (= leaf_2_1 82)
    (= leaf_2_1 83)
    (= leaf_2_1 84)
    (= leaf_2_1 85)
    (= leaf_2_1 86)
    (= leaf_2_1 87)
    (= leaf_2_1 88)
    (= leaf_2_1 89)
    (= leaf_2_1 91)))
(assert (<= leaf_2_1 91))
(assert (>= leaf_2_1 0))
(assert (or (= leaf_2_2 0)))
(assert (<= leaf_2_2 0))
(assert (>= leaf_2_2 0))
(assert (or (= leaf_2_3 0)))
(assert (<= leaf_2_3 0))
(assert (>= leaf_2_3 0))
(assert (or (= leaf_1_0 89)
    (= leaf_1_1 89)
    (= leaf_1_2 89)
    (= leaf_1_3 89)
    (= leaf_2_0 89)
    (= leaf_2_1 89)
    (= leaf_2_2 89)
    (= leaf_2_3 89)))
(assert (or leaf_2_0_is_line_1 leaf_2_1_is_line_1 leaf_2_2_is_line_1 leaf_2_3_is_line_1))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 11) (= type_1 0)))
(assert (=> (= root_1 12) (= type_1 0)))
(assert (=> (= root_1 13) (= type_1 0)))
(assert (=> (= root_2 1) (= type_2 0)))
(assert (=> (= root_2 2) (= type_2 0)))
(assert (=> (= root_2 3) (= type_2 0)))
(assert (=> (= root_2 4) (= type_2 0)))
(assert (=> (= root_2 5) (= type_2 0)))
(assert (=> (= root_2 6) (= type_2 0)))
(assert (=> (= root_2 7) (= type_2 0)))
(assert (=> (= root_2 8) (= type_2 0)))
(assert (=> (= root_2 9) (= type_2 0)))
(assert (=> (= root_2 10) (= type_2 0)))
(assert (=> (= root_2 11) (= type_2 0)))
(assert (=> (= root_2 12) (= type_2 0)))
(assert (=> (= root_2 13) (= type_2 0)))
(assert (=> (= root_1 13) (or (and (= leaf_1_0 89) (= #x7 bv_1_0_a) (= #x0 bv_1_0_b)))))
(assert (=> (= root_1 13) (or (and (= leaf_1_1 88) (= #x0 bv_1_1_a) (= #x8 bv_1_1_b)))))
(assert (=> (= root_1 13) (and (= leaf_1_2 0) (= #x0 bv_1_2_a) (= #x0 bv_1_2_b))))
(assert (=> (= root_1 13) (and (= leaf_1_3 0) (= #x0 bv_1_3_a) (= #x0 bv_1_3_b))))
(assert (= leaf_2_0_is_line_1 (= leaf_2_0 91)))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_0 89) (= #x7 bv_2_0_a) (= #x0 bv_2_0_b))
        (and (= leaf_2_0 91) (= bv_2_0_a bv_1) (= #x0 bv_2_0_b)))))
(assert (=> (= root_2 11)
    (or (and (= leaf_2_1 86) (= #x2 bv_2_1_a) (= #x0 bv_2_1_b))
        (and (= leaf_2_1 87) (= #x2 bv_2_1_a) (= #x0 bv_2_1_b)))))
(assert (=> (= root_2 11) (and (= leaf_2_2 0) (= #x0 bv_2_2_a) (= #x0 bv_2_2_b))))
(assert (=> (= root_2 11) (and (= leaf_2_3 0) (= #x0 bv_2_3_a) (= #x0 bv_2_3_b))))
(assert (or (= leaf_1_0 88)
    (= leaf_1_1 88)
    (= leaf_1_2 88)
    (= leaf_1_3 88)
    (= leaf_2_0 88)
    (= leaf_2_1 88)
    (= leaf_2_2 88)
    (= leaf_2_3 88)))
(assert (or (= leaf_1_0 86)
    (= leaf_1_1 86)
    (= leaf_1_2 86)
    (= leaf_1_3 86)
    (= leaf_2_0 86)
    (= leaf_2_1 86)
    (= leaf_2_2 86)
    (= leaf_2_3 86)
    (= leaf_1_0 87)
    (= leaf_1_1 87)
    (= leaf_1_2 87)
    (= leaf_1_3 87)
    (= leaf_2_0 87)
    (= leaf_2_1 87)
    (= leaf_2_2 87)
    (= leaf_2_3 87)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 2))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 1)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 1))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 3))
    (distinct root_2 2)))
(assert (=> (and (or leaf_2_0_is_line_1
             leaf_2_1_is_line_1
             leaf_2_2_is_line_1
             leaf_2_3_is_line_1)
         (= root_1 5))
    (distinct root_2 5)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_2_0 leaf_2_1)
                    (and (= leaf_2_0 0) (= leaf_2_1 0)))
                (or (distinct leaf_2_0 leaf_2_2)
                    (and (= leaf_2_0 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_0 leaf_2_3)
                    (and (= leaf_2_0 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_1 leaf_2_2)
                    (and (= leaf_2_1 0) (= leaf_2_2 0)))
                (or (distinct leaf_2_1 leaf_2_3)
                    (and (= leaf_2_1 0) (= leaf_2_3 0)))
                (or (distinct leaf_2_2 leaf_2_3)
                    (and (= leaf_2_2 0) (= leaf_2_3 0))))))
  (=> (= root_2 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #x0 bv_1_2_a) (distinct #x0 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #x0 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 11)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 12)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= #x0 (bvand bv_1_1_b bv_1_2_a))
         (= (bvor bv_1_1_b bv_1_2_a) bv_1))))
(assert (=> (= root_1 13)
    (and (= (bvand bv_1_0_a bv_1_1_a) bv_1_1_a)
         (= (bvor bv_1_0_a bv_1_1_b) bv_1))))
(assert (=> (= root_2 1) (and (< leaf_2_0 leaf_2_1) (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 2)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a) bv_2))))
(assert (=> (= root_2 3)
    (and (< leaf_2_0 leaf_2_1)
         (< leaf_2_1 leaf_2_2)
         (< leaf_2_2 leaf_2_3)
         (= (bvor bv_2_0_a bv_2_1_a bv_2_2_a bv_2_3_a) bv_2))))
(assert (=> (= root_2 4)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (let ((a!1 (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
                (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
                (=> (= #x0 bv_2_2_a) (distinct #x0 (bvand bv_2_0_a bv_2_1_a)))
                (= bv_2_0_a bv_2))))
  (=> (= root_2 5) a!1)))
(assert (=> (= root_2 6)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a))
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 7) (= (bvor bv_2_0_a bv_2_1_a) bv_2)))
(assert (=> (= root_2 8)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_1_a bv_2_2_a) bv_2_2_a)
         (= bv_2_2_a bv_2))))
(assert (=> (= root_2 9)
    (and (distinct #x0 (bvand bv_2_0_a bv_2_1_a)) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 10)
    (and (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= (bvand bv_2_0_a bv_2_1_a bv_2_2_b) bv_2_2_b)
         (= (bvor bv_2_0_a bv_2_1_a) bv_2))))
(assert (=> (= root_2 11)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a) (= bv_2_0_a bv_2))))
(assert (=> (= root_2 12)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvand bv_2_0_a bv_2_2_a) bv_2_2_a)
         (= #x0 (bvand bv_2_1_b bv_2_2_a))
         (= (bvor bv_2_1_b bv_2_2_a) bv_2))))
(assert (=> (= root_2 13)
    (and (= (bvand bv_2_0_a bv_2_1_a) bv_2_1_a)
         (= (bvor bv_2_0_a bv_2_1_b) bv_2))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i031 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i031.csv", col_types = cols("id" = col_integer(),"name" = col_character(),"name_ascii" = col_integer()))
df_i031 <- copy_to(con, df_i031)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o031.csv", col_types = cols("id" = col_integer(),"position" = col_integer(),"name" = col_character()))

df4 <- df_i031 %>% mutate(row_number_ = row_number())
df5 <- df4 %>% filter(name == 'Beta')
out <- df5 %>% select(id, position = row_number_, name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `id`,
       `row_number_` AS `position`,
       `name`
FROM
  (SELECT `id`,
          `name`,
          `name_ascii`,
          ROW_NUMBER() OVER () AS `row_number_`
   FROM `df_i031`)
WHERE (`name` = 'Beta')
