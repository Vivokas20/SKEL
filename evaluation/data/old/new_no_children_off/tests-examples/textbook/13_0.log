[     2.753][MainProcess][INFO] Parsing specification...
[     2.758][MainProcess][INFO] File read
[     2.759][MainProcess][DEBUG] Reading input files...
[     2.802][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-1.txt: ['string', 'string']
[     2.810][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-2.txt: ['string', 'string']
[     2.817][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13.out: ['string']
[     2.817][MainProcess][INFO] Parsing sketch...
[     2.817][MainProcess][DEBUG] Sketch creation: Line(T1, root=['natural_join'], var=[], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[])])
[     2.862][MainProcess][DEBUG] {'natural_join': 4, 'natural_join3': 8, 'natural_join4': 16, 'inner_join': 96, 'anti_join': 28, 'left_join': 4, 'union': 4, 'intersect': 12, 'semi_join': 4, 'cross_join': 0}
[     2.862][MainProcess][DEBUG] {'natural_join': 0.022727272727272728, 'natural_join3': 0.045454545454545456, 'natural_join4': 0.09090909090909091, 'inner_join': 0.5454545454545454, 'anti_join': 0.1590909090909091, 'left_join': 0.022727272727272728, 'union': 0.022727272727272728, 'intersect': 0.06818181818181818, 'semi_join': 0.022727272727272728, 'cross_join': 0.0}
[     2.862][MainProcess][DEBUG] {'natural_join': 0.02272727272727273, 'natural_join3': 0.04545454545454546, 'natural_join4': 0.09090909090909093, 'inner_join': 0.5454545454545455, 'anti_join': 0.15909090909090912, 'left_join': 0.02272727272727273, 'union': 0.02272727272727273, 'intersect': 0.06818181818181819, 'semi_join': 0.02272727272727273, 'cross_join': 0.0}
[     2.863][MainProcess][INFO] Building synthesizer...
[     2.864][MainProcess][DEBUG] [Line(T1, root=['natural_join'], var=[1], children=[Child(['??'], type=Table, var=[]),Child(['??'], type=Table, var=[]),Child([None], type=None, var=[0]),Child([None], type=None, var=[0])])]
[     2.916][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 42 constraints
[     2.920][MainProcess][DEBUG] Enumeration time: 0.05711865425109863
[     2.966][MainProcess][DEBUG] Synthesis time: 0.04552292823791504
[     2.966][MainProcess][INFO] Solution found: [natural_join(input0, input1)]
[     2.966][MainProcess][DEBUG] Solution found using process 0
[     2.967][MainProcess][INFO] Statistics:
[     2.967][MainProcess][INFO] 	Attempted programs: 1 (approx)
[     2.967][MainProcess][INFO] 		Rejected: 0 (approx)
[     2.967][MainProcess][INFO] 		Failed: 0 (approx)
[     2.967][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[     2.967][MainProcess][INFO] 		Redundant lines: 0 (approx)
[     2.967][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[     2.967][MainProcess][INFO] 	Total time spent in enumerator init: 0.057119 (approx)
[     2.967][MainProcess][INFO] 	Total time spent in enumerator: 0.000796 (approx)
[     2.967][MainProcess][INFO] 		Enumerated 1256.155735 programs/s avg. (just enumeration time)
[     2.967][MainProcess][INFO] 		Enumerated 0.468566 programs/s avg. (overall)
[     2.967][MainProcess][INFO] 	Total time spent in evaluation & testing: 0.042641 (approx)
[     2.968][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.000000 (approx)
[     2.968][MainProcess][INFO] Solution found: [natural_join(input0, input1)]
[     2.968][MainProcess][INFO] Solution size: 1
(declare-fun type_1 () Int)
(declare-fun root_1 () Int)
(declare-fun leaf_1_0 () Int)
(declare-fun leaf_1_1 () Int)
(declare-fun leaf_1_2 () Int)
(declare-fun leaf_1_3 () Int)
(declare-fun bv_1_0_b () (_ BitVec 3))
(declare-fun bv_1_0_a () (_ BitVec 3))
(declare-fun bv_1_1_b () (_ BitVec 3))
(declare-fun bv_1_1_a () (_ BitVec 3))
(declare-fun bv_1_2_b () (_ BitVec 3))
(declare-fun bv_1_2_a () (_ BitVec 3))
(declare-fun bv_1_3_b () (_ BitVec 3))
(declare-fun bv_1_3_a () (_ BitVec 3))
(declare-fun bv_1 () (_ BitVec 3))
(assert (< type_1 1))
(assert (>= type_1 0))
(assert (or (= root_1 1)))
(assert (or (= leaf_1_0 0)
    (= leaf_1_0 11)
    (= leaf_1_0 12)
    (= leaf_1_0 13)
    (= leaf_1_0 14)
    (= leaf_1_0 15)
    (= leaf_1_0 16)
    (= leaf_1_0 17)
    (= leaf_1_0 18)
    (= leaf_1_0 19)
    (= leaf_1_0 20)
    (= leaf_1_0 21)
    (= leaf_1_0 22)
    (= leaf_1_0 23)
    (= leaf_1_0 24)
    (= leaf_1_0 25)
    (= leaf_1_0 26)
    (= leaf_1_0 27)
    (= leaf_1_0 28)
    (= leaf_1_0 29)
    (= leaf_1_0 30)
    (= leaf_1_0 31)
    (= leaf_1_0 32)
    (= leaf_1_0 33)
    (= leaf_1_0 34)
    (= leaf_1_0 35)
    (= leaf_1_0 36)
    (= leaf_1_0 37)
    (= leaf_1_0 38)
    (= leaf_1_0 39)
    (= leaf_1_0 40)
    (= leaf_1_0 41)
    (= leaf_1_0 42)
    (= leaf_1_0 43)
    (= leaf_1_0 44)
    (= leaf_1_0 45)
    (= leaf_1_0 46)))
(assert (<= leaf_1_0 46))
(assert (>= leaf_1_0 0))
(assert (or (= leaf_1_1 0)
    (= leaf_1_1 11)
    (= leaf_1_1 12)
    (= leaf_1_1 13)
    (= leaf_1_1 14)
    (= leaf_1_1 15)
    (= leaf_1_1 16)
    (= leaf_1_1 17)
    (= leaf_1_1 18)
    (= leaf_1_1 19)
    (= leaf_1_1 20)
    (= leaf_1_1 21)
    (= leaf_1_1 22)
    (= leaf_1_1 23)
    (= leaf_1_1 24)
    (= leaf_1_1 25)
    (= leaf_1_1 26)
    (= leaf_1_1 27)
    (= leaf_1_1 28)
    (= leaf_1_1 29)
    (= leaf_1_1 30)
    (= leaf_1_1 31)
    (= leaf_1_1 32)
    (= leaf_1_1 33)
    (= leaf_1_1 34)
    (= leaf_1_1 35)
    (= leaf_1_1 36)
    (= leaf_1_1 37)
    (= leaf_1_1 38)
    (= leaf_1_1 39)
    (= leaf_1_1 40)
    (= leaf_1_1 41)
    (= leaf_1_1 42)
    (= leaf_1_1 43)
    (= leaf_1_1 44)
    (= leaf_1_1 45)
    (= leaf_1_1 46)))
(assert (<= leaf_1_1 46))
(assert (>= leaf_1_1 0))
(assert (or (= leaf_1_2 0)))
(assert (<= leaf_1_2 0))
(assert (>= leaf_1_2 0))
(assert (or (= leaf_1_3 0)))
(assert (<= leaf_1_3 0))
(assert (>= leaf_1_3 0))
(assert (or (= leaf_1_0 45) (= leaf_1_1 45) (= leaf_1_2 45) (= leaf_1_3 45)))
(assert (or (= leaf_1_0 46) (= leaf_1_1 46) (= leaf_1_2 46) (= leaf_1_3 46)))
(assert (=> (= root_1 1) (= type_1 0)))
(assert (=> (= root_1 2) (= type_1 0)))
(assert (=> (= root_1 3) (= type_1 0)))
(assert (=> (= root_1 4) (= type_1 0)))
(assert (=> (= root_1 5) (= type_1 0)))
(assert (=> (= root_1 6) (= type_1 0)))
(assert (=> (= root_1 7) (= type_1 0)))
(assert (=> (= root_1 8) (= type_1 0)))
(assert (=> (= root_1 9) (= type_1 0)))
(assert (=> (= root_1 10) (= type_1 0)))
(assert (=> (= root_1 1)
    (or (and (= leaf_1_0 45) (= #b101 bv_1_0_a) (= #b000 bv_1_0_b))
        (and (= leaf_1_0 46) (= #b011 bv_1_0_a) (= #b000 bv_1_0_b)))))
(assert (=> (= root_1 1)
    (or (and (= leaf_1_1 45) (= #b101 bv_1_1_a) (= #b000 bv_1_1_b))
        (and (= leaf_1_1 46) (= #b011 bv_1_1_a) (= #b000 bv_1_1_b)))))
(assert (=> (= root_1 1) (and (= leaf_1_2 0) (= #b000 bv_1_2_a) (= #b000 bv_1_2_b))))
(assert (=> (= root_1 1) (and (= leaf_1_3 0) (= #b000 bv_1_3_a) (= #b000 bv_1_3_b))))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 3) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 2) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 1) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 5) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 9) a!1)))
(assert (let ((a!1 (and (or (distinct leaf_1_0 leaf_1_1)
                    (and (= leaf_1_0 0) (= leaf_1_1 0)))
                (or (distinct leaf_1_0 leaf_1_2)
                    (and (= leaf_1_0 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_0 leaf_1_3)
                    (and (= leaf_1_0 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_1 leaf_1_2)
                    (and (= leaf_1_1 0) (= leaf_1_2 0)))
                (or (distinct leaf_1_1 leaf_1_3)
                    (and (= leaf_1_1 0) (= leaf_1_3 0)))
                (or (distinct leaf_1_2 leaf_1_3)
                    (and (= leaf_1_2 0) (= leaf_1_3 0))))))
  (=> (= root_1 6) a!1)))
(assert (=> (= root_1 1) (and (< leaf_1_0 leaf_1_1) (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 2)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a) bv_1))))
(assert (=> (= root_1 3)
    (and (< leaf_1_0 leaf_1_1)
         (< leaf_1_1 leaf_1_2)
         (< leaf_1_2 leaf_1_3)
         (= (bvor bv_1_0_a bv_1_1_a bv_1_2_a bv_1_3_a) bv_1))))
(assert (=> (= root_1 4)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (let ((a!1 (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
                (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
                (=> (= #b000 bv_1_2_a)
                    (distinct #b000 (bvand bv_1_0_a bv_1_1_a)))
                (= bv_1_0_a bv_1))))
  (=> (= root_1 5) a!1)))
(assert (=> (= root_1 6)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a))
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))
(assert (=> (= root_1 7) (= (bvor bv_1_0_a bv_1_1_a) bv_1)))
(assert (=> (= root_1 8)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_1_a bv_1_2_a) bv_1_2_a)
         (= bv_1_2_a bv_1))))
(assert (=> (= root_1 9)
    (and (distinct #b000 (bvand bv_1_0_a bv_1_1_a)) (= bv_1_0_a bv_1))))
(assert (=> (= root_1 10)
    (and (= (bvand bv_1_0_a bv_1_2_a) bv_1_2_a)
         (= (bvand bv_1_0_a bv_1_1_a bv_1_2_b) bv_1_2_b)
         (= (bvor bv_1_0_a bv_1_1_a) bv_1))))


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_13_1 <- read_csv("tests-examples/textbook/tables/13-1.txt", col_types = cols("S_key" = col_character(),"P_id" = col_character()))
df_13_1 <- copy_to(con, df_13_1)
df_13_2 <- read_csv("tests-examples/textbook/tables/13-2.txt", col_types = cols("P_id" = col_character(),"P_name" = col_character()))
df_13_2 <- copy_to(con, df_13_2)
expected_output <- read_csv("tests-examples/textbook/tables/13.out", col_types = cols("P_name" = col_character()))

df2 <- inner_join(df_13_1, df_13_2, na_matches="never")
out <- df2 %>% select(P_name) %>% distinct()


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT P_name
FROM
  (SELECT S_key,
          LHS.P_id AS P_id,
          P_name
   FROM df_13_1 AS LHS
   INNER JOIN df_13_2 AS RHS ON (LHS.P_id = RHS.P_id))
