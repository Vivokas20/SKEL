[     5.979][MainProcess][INFO] Parsing specification...
[     5.987][MainProcess][INFO] File read
[     5.989][MainProcess][DEBUG] Reading input files...
[     6.006][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i048.csv: ['string', 'int64', 'string']
[     6.013][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o048.csv: ['string', 'int64', 'string']
[     6.095][MainProcess][DEBUG] {'natural_join': 1, 'natural_join3': 1, 'natural_join4': 1, 'inner_join': 22, 'anti_join': 7, 'left_join': 1, 'union': 1, 'intersect': 3, 'semi_join': 1, 'cross_join': 1110, 'filter': 6, 'summarise': 14, 'mutate': 2}
[     6.095][MainProcess][DEBUG] {'natural_join': 0.0008547008547008547, 'natural_join3': 0.0008547008547008547, 'natural_join4': 0.0008547008547008547, 'inner_join': 0.018803418803418803, 'anti_join': 0.005982905982905983, 'left_join': 0.0008547008547008547, 'union': 0.0008547008547008547, 'intersect': 0.002564102564102564, 'semi_join': 0.0008547008547008547, 'cross_join': 0.9487179487179487, 'filter': 0.005128205128205128, 'summarise': 0.011965811965811967, 'mutate': 0.0017094017094017094}
[     6.095][MainProcess][DEBUG] {'natural_join': 0.0008547008547008548, 'natural_join3': 0.0008547008547008548, 'natural_join4': 0.0008547008547008548, 'inner_join': 0.018803418803418806, 'anti_join': 0.005982905982905984, 'left_join': 0.0008547008547008548, 'union': 0.0008547008547008548, 'intersect': 0.0025641025641025645, 'semi_join': 0.0008547008547008548, 'cross_join': 0.9487179487179488, 'filter': 0.005128205128205129, 'summarise': 0.011965811965811968, 'mutate': 0.0017094017094017096}
[     6.096][MainProcess][INFO] Building synthesizer...
[     7.018][MainProcess][DEBUG] Enumerator for loc 1 constructed using 15 variables and 92 constraints
[     7.116][MainProcess][DEBUG] Enumeration time: 1.020028829574585
[     8.004][MainProcess][DEBUG] Synthesis time: 0.8883168697357178
[     8.005][MainProcess][INFO] Increasing the number of lines of code to 2.
[     9.740][MainProcess][DEBUG] Enumerator for loc 2 constructed using 34 variables and 215 constraints
[     9.908][MainProcess][DEBUG] Enumeration time: 1.9028778076171875
[    16.403][MainProcess][DEBUG] Synthesis time: 6.491947889328003
[    16.403][MainProcess][INFO] Solution found: [cross_join(input0, input0, 'AddressID < AddressID.other'), mutate(line0, 'minAddressID = min(AddressID)')]
[    16.409][MainProcess][DEBUG] Solution found using process 0
[    16.409][MainProcess][INFO] Statistics:
[    16.409][MainProcess][INFO] 	Attempted programs: 17 (approx)
[    16.409][MainProcess][INFO] 		Rejected: 16 (approx)
[    16.409][MainProcess][INFO] 		Failed: 0 (approx)
[    16.410][MainProcess][INFO] 		Empty outputs: 0 (0.0%) (approx)
[    16.410][MainProcess][INFO] 		Redundant lines: 0 (approx)
[    16.410][MainProcess][INFO] 	Blocked programs: 0 (0.000000 / attempted avg.) (approx)
[    16.410][MainProcess][INFO] 	Total time spent in enumerator init: 2.922907 (approx)
[    16.410][MainProcess][INFO] 	Total time spent in enumerator: 0.056233 (approx)
[    16.410][MainProcess][INFO] 		Enumerated 302.313969 programs/s avg. (just enumeration time)
[    16.410][MainProcess][INFO] 		Enumerated 1.147722 programs/s avg. (overall)
[    16.410][MainProcess][INFO] 	Total time spent in evaluation & testing: 7.310497 (approx)
[    16.410][MainProcess][INFO] 	Total time spent blocking cubes/programs: 0.012546 (approx)
[    16.410][MainProcess][INFO] Solution found: [cross_join(input0, input0, 'AddressID < AddressID.other'), mutate(line0, 'minAddressID = min(AddressID)')]
[    16.410][MainProcess][INFO] Solution size: 2

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
df_i048 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i048.csv", col_types = cols("CName" = col_character(),"AddressID" = col_integer(),"AddressLine" = col_character()))
df_i048 <- copy_to(con, df_i048)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o048.csv", col_types = cols("CName" = col_character(),"minAddressID" = col_integer(),"AddressLine" = col_character()))

df21 <- full_join(df_i048, df_i048, by=character(), suffix = c("", ".other"), na_matches="never") %>% filter(AddressID < AddressID.other)
df22 <- df21 %>% mutate(minAddressID = min(AddressID))
out <- df22 %>% select(CName, minAddressID = AddressID, AddressLine) %>% distinct() %>% arrange(CName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT CName,
                AddressID AS minAddressID,
                AddressLine
FROM
  (SELECT LHS.CName AS CName,
          LHS.AddressID AS AddressID,
          LHS.AddressLine AS AddressLine,
          RHS.CName AS CName_other,
          RHS.AddressID AS AddressID_other,
          RHS.AddressLine AS AddressLine_other
   FROM df_i048 AS LHS
   CROSS JOIN df_i048 AS RHS)
WHERE (AddressID < AddressID_other)
ORDER BY CName
