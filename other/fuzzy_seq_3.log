Warning message:
In options(stringsAsFactors = TRUE) :
  'options(stringsAsFactors = TRUE)' is deprecated and will be disabled
No database tests/55-tests/1.yaml
No database tests/55-tests/10.yaml
No database tests/55-tests/11.yaml
No database tests/55-tests/12.yaml
No database tests/55-tests/13.yaml
No database tests/55-tests/14.yaml
No database tests/55-tests/15.yaml
No solution tests/55-tests/16.yaml
No solution tests/55-tests/17.yaml
No database tests/55-tests/18.yaml
No database tests/55-tests/19.yaml
No database tests/55-tests/2.yaml
No ground truth tests/55-tests/20.yaml
No ground truth tests/55-tests/21.yaml
No solution tests/55-tests/22.yaml
No ground truth tests/55-tests/23.yaml
No ground truth tests/55-tests/24.yaml
No solution tests/55-tests/25.yaml
No ground truth tests/55-tests/26.yaml
No solution tests/55-tests/27.yaml
No ground truth tests/55-tests/28.yaml
No ground truth tests/55-tests/29.yaml
No database tests/55-tests/3.yaml
No ground truth tests/55-tests/30.yaml
No ground truth tests/55-tests/31.yaml
No ground truth tests/55-tests/32.yaml
No ground truth tests/55-tests/33.yaml
No ground truth tests/55-tests/34.yaml
No ground truth tests/55-tests/35.yaml
No ground truth tests/55-tests/36.yaml
No ground truth tests/55-tests/37.yaml
No solution tests/55-tests/38.yaml
No ground truth tests/55-tests/39.yaml
No database tests/55-tests/4.yaml
No ground truth tests/55-tests/40.yaml
No ground truth tests/55-tests/41.yaml
No ground truth tests/55-tests/42.yaml
No ground truth tests/55-tests/43.yaml
No ground truth tests/55-tests/44.yaml
No ground truth tests/55-tests/45.yaml
No solution tests/55-tests/46.yaml
No solution tests/55-tests/47.yaml
No ground truth tests/55-tests/48.yaml
No solution tests/55-tests/49.yaml
No database tests/55-tests/5.yaml
No ground truth tests/55-tests/50.yaml
No ground truth tests/55-tests/51.yaml
No ground truth tests/55-tests/52.yaml
No ground truth tests/55-tests/53.yaml
No ground truth tests/55-tests/54.yaml
No ground truth tests/55-tests/55.yaml
No database tests/55-tests/6.yaml
No database tests/55-tests/7.yaml
No database tests/55-tests/8.yaml
No solution tests/55-tests/9.yaml
No solution tests/scythe/recent_posts/001.yaml
No solution tests/scythe/recent_posts/002.yaml
No solution tests/scythe/recent_posts/004.yaml
No solution tests/scythe/recent_posts/005.yaml
No solution tests/scythe/recent_posts/006.yaml
No solution tests/scythe/recent_posts/007.yaml
No solution tests/scythe/recent_posts/008.yaml
No solution tests/scythe/recent_posts/010.yaml
Error while executing ground truth for scythe/recent_posts/011
	(sqlite3.OperationalError) no such function: concat
	[SQL: select ID, Name, concat(Value)
	from`011`group by ID
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/recent_posts/012.yaml
No solution tests/scythe/recent_posts/013.yaml
No solution tests/scythe/recent_posts/014.yaml
No solution tests/scythe/recent_posts/015.yaml
No solution tests/scythe/recent_posts/016.yaml
No solution tests/scythe/recent_posts/017.yaml
Error while executing solution for scythe/recent_posts/018
	(sqlite3.OperationalError) no such function: mdy
	[SQL: 
	SELECT `Course` AS `c1`,
	       `n` AS `c2`
	FROM
	  (SELECT `Course`,
	          `Date`,
	          COUNT() AS `n`
	   FROM `018`
	   GROUP BY `Course`,
	            `Date`)
	WHERE (`n` >= 2.0
	       OR `Date` < mdy('10/17/2016'))
	ORDER BY c1
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/recent_posts/019.yaml
No solution tests/scythe/recent_posts/020.yaml
No solution tests/scythe/recent_posts/023.yaml
No solution tests/scythe/recent_posts/024.yaml
No solution tests/scythe/recent_posts/025.yaml
No solution tests/scythe/recent_posts/026.yaml
No solution tests/scythe/recent_posts/027.yaml
No solution tests/scythe/recent_posts/029.yaml
No solution tests/scythe/recent_posts/030.yaml
No solution tests/scythe/recent_posts/033.yaml
No solution tests/scythe/recent_posts/035.yaml
No solution tests/scythe/recent_posts/037.yaml
No solution tests/scythe/recent_posts/039.yaml
No solution tests/scythe/recent_posts/041.yaml
No solution tests/scythe/recent_posts/043.yaml
No solution tests/scythe/recent_posts/046.yaml
No solution tests/scythe/recent_posts/048.yaml
No solution tests/scythe/recent_posts/049.yaml
No solution tests/scythe/recent_posts/050.yaml
Error while executing solution for scythe/recent_posts/051
	(sqlite3.OperationalError) no such function: string_agg
	[SQL: 
	SELECT `isbn`,
	       `title`,
	       `concatAuthor` AS `author`
	FROM
	  (SELECT `LHS`.`isbn` AS `isbn`,
	          `LHS`.`concatAuthor` AS `concatAuthor`,
	          `RHS`.`title` AS `title`
	   FROM
	     (SELECT `isbn`,
	             string_agg(`Author`, ', ') AS concatAuthor
	      FROM `051_2`
	      GROUP BY isbn) AS LHS
	   LEFT JOIN `051_1` AS RHS ON (LHS.isbn = RHS.isbn))
	ORDER BY isbn
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for scythe/top_rated_posts/001
	(sqlite3.OperationalError) no such function: CONCAT
	[SQL: SELECT SubjectID, CONCAT(StudentName)
	FROM i001
	GROUP BY SubjectID
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for scythe/top_rated_posts/003
	(sqlite3.OperationalError) no such function: CONCAT
	[SQL: SELECT CONCAT(c)
	FROM i003 t
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/004.yaml
No solution tests/scythe/top_rated_posts/005.yaml
No solution tests/scythe/top_rated_posts/007.yaml
No solution tests/scythe/top_rated_posts/008.yaml
Error while executing ground truth for scythe/top_rated_posts/011
	(sqlite3.OperationalError) no such function: concat
	[SQL: select i011_1.VehicleID, i011_1.Name, t.concatLocations
	from (select VehicleID, concat(City) As concatLocations
	      from i011_2
	      group by VehicleID) t
	         join i011_1
	              on i011_1.VehicleID = t.VehicleID
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/012.yaml
Error while executing ground truth for scythe/top_rated_posts/014
	(sqlite3.OperationalError) near "SEPARATOR": syntax error
	[SQL: SELECT id, GROUP_CONCAT(string SEPARATOR ' ')
	FROM i014
	GROUP BY id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/015.yaml
Error while executing ground truth for scythe/top_rated_posts/016
	(sqlite3.OperationalError) no such function: array_agg
	[SQL: SELECT company_id, array_to_string(array_agg(employee), ', ')
	FROM i016
	GROUP BY company_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/017.yaml
No solution tests/scythe/top_rated_posts/018.yaml
No solution tests/scythe/top_rated_posts/020.yaml
Error while executing ground truth for scythe/top_rated_posts/022
	(sqlite3.OperationalError) unrecognized token: ":"
	[SQL: SELECT AVG(dd.val) as median_val
	FROM (
	SELECT d.val, @rownum:=@rownum+1 as `row_number`, @total_rows:=@rownum
	  FROM i022 d, (SELECT @rownum:=0) r
	  WHERE d.val is NOT NULL
	  -- put some where clause here
	  ORDER BY d.val
	) as dd
	WHERE dd.row_number IN ( FLOOR((@total_rows+1)/2), FLOOR((@total_rows+2)/2) );
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for scythe/top_rated_posts/023
	(sqlite3.OperationalError) unrecognized token: ":"
	[SQL: SELECT @rank:=@rank+1 AS rank, itemID, COUNT(*) as ordercount
	  FROM i023
	  GROUP BY itemID
	  ORDER BY ordercount DESC;
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/024.yaml
No solution tests/scythe/top_rated_posts/026.yaml
Error while executing ground truth for scythe/top_rated_posts/028
	(sqlite3.OperationalError) near "(": syntax error
	[SQL: SELECT pid, LISTAGG(Desc, ' ') WITHIN GROUP (ORDER BY seq) AS concatDesc
	FROM   i028_2
	GROUP BY pid;
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for scythe/top_rated_posts/029
	(sqlite3.OperationalError) no such function: listagg
	[SQL: select TicketId, listagg(Person, ', ') AS People
	from i029
	group by TicketId
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/030.yaml
No solution tests/scythe/top_rated_posts/031.yaml
No solution tests/scythe/top_rated_posts/032.yaml
No solution tests/scythe/top_rated_posts/033.yaml
No solution tests/scythe/top_rated_posts/035.yaml
No solution tests/scythe/top_rated_posts/036.yaml
Error while executing solution for scythe/top_rated_posts/040
	(sqlite3.OperationalError) near "GROUP": syntax error
	[SQL: 
	SELECT GROUP,
	       subGroup,
	       n
	FROM
	  (SELECT GROUP,
	          subGroup,
	          COUNT() AS n
	   FROM i040
	   GROUP BY GROUP,
	            subGroup)
	ORDER BY GROUP
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/041.yaml
No solution tests/scythe/top_rated_posts/042.yaml
No solution tests/scythe/top_rated_posts/046.yaml
No solution tests/scythe/top_rated_posts/047.yaml
Error while executing ground truth for scythe/top_rated_posts/049
	(sqlite3.OperationalError) no such function: string_agg
	[SQL: SELECT UserId, string_agg(Alias, ', ') AS concatAlias
	   FROM i049
	   GROUP BY UserId
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for scythe/top_rated_posts/050
	(sqlite3.OperationalError) near "(": syntax error
	[SQL: SELECT ID, Col1, Col2, Col3, MinValue
	FROM i050
	CROSS APPLY (SELECT MIN(d) MinValue FROM (VALUES (Col1), (Col2), (Col3)) AS a(d)) A;
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/052.yaml
No solution tests/scythe/top_rated_posts/053.yaml
Error while executing ground truth for scythe/top_rated_posts/055
	(sqlite3.OperationalError) no such function: concat
	[SQL: select User, Activity, concat(PageURL)
	from i055
	group by User, Activity
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/scythe/top_rated_posts/056.yaml
No solution tests/scythe/top_rated_posts/057.yaml
No solution tests/spider/activity_1/0008.yaml
No solution tests/spider/activity_1/0016.yaml
No solution tests/spider/activity_1/0020.yaml
No solution tests/spider/activity_1/0022.yaml
No solution tests/spider/activity_1/0023.yaml
No solution tests/spider/activity_1/0024.yaml
No solution tests/spider/activity_1/0025.yaml
No solution tests/spider/activity_1/0026.yaml
Error while executing solution for spider/activity_1/0028
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT facid) OVER () AS count_distinct_facid_
	FROM faculty_participates_in
	ORDER BY count_distinct_facid_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/activity_1/0035.yaml
No solution tests/spider/activity_1/0036.yaml
No solution tests/spider/activity_1/0039.yaml
No solution tests/spider/activity_1/0040.yaml
No solution tests/spider/aircraft/0005.yaml
Error while executing solution for spider/aircraft/0006
	(sqlite3.OperationalError) no such column: col___change_2007
	[SQL: 
	SELECT DISTINCT MAX(transit_passengers) OVER () AS max_transit_passengers_,
	                                             mintransit_passengers AS min_transit_passengers_
	FROM
	  (SELECT airport_id,
	          airport_name,
	          total_passengers,
	          col___change_2007,
	          international_passengers,
	          domestic_passengers,
	          transit_passengers,
	          aircraft_movements,
	          freight_metric_tonnes,
	          MIN(transit_passengers) OVER () AS mintransit_passengers
	   FROM airport)
	ORDER BY max_transit_passengers_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/aircraft/0010
	(sqlite3.OperationalError) no such column: RHS.col___change_2007
	[SQL: 
	SELECT `aircraft`
	FROM
	  (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
	          `LHS`.`aircraft` AS `aircraft`,
	          `LHS`.`description` AS `description`,
	          `LHS`.`max_gross_weight` AS `max_gross_weight`,
	          `LHS`.`total_disk_area` AS `total_disk_area`,
	          `LHS`.`max_disk_loading` AS `max_disk_loading`,
	          `LHS`.`airport_id` AS `airport_id`,
	          `LHS`.`airport_name` AS `airport_name`,
	          `LHS`.`total_passengers` AS `total_passengers`,
	          `LHS`.`col___change_2007` AS `col___change_2007`,
	          `LHS`.`international_passengers` AS `international_passengers`,
	          `LHS`.`domestic_passengers` AS `domestic_passengers`,
	          `LHS`.`transit_passengers` AS `transit_passengers`,
	          `LHS`.`aircraft_movements` AS `aircraft_movements`,
	          `LHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`,
	          `LHS`.`id` AS `id`
	   FROM
	     (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
	             `LHS`.`aircraft` AS `aircraft`,
	             `LHS`.`description` AS `description`,
	             `LHS`.`max_gross_weight` AS `max_gross_weight`,
	             `LHS`.`total_disk_area` AS `total_disk_area`,
	             `LHS`.`max_disk_loading` AS `max_disk_loading`,
	             `LHS`.`airport_id` AS `airport_id`,
	             `LHS`.`airport_name` AS `airport_name`,
	             `LHS`.`total_passengers` AS `total_passengers`,
	             `LHS`.`col___change_2007` AS `col___change_2007`,
	             `LHS`.`international_passengers` AS `international_passengers`,
	             `LHS`.`domestic_passengers` AS `domestic_passengers`,
	             `LHS`.`transit_passengers` AS `transit_passengers`,
	             `LHS`.`aircraft_movements` AS `aircraft_movements`,
	             `LHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`,
	             `RHS`.`id` AS `id`
	      FROM
	        (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
	                `LHS`.`aircraft` AS `aircraft`,
	                `LHS`.`description` AS `description`,
	                `LHS`.`max_gross_weight` AS `max_gross_weight`,
	                `LHS`.`total_disk_area` AS `total_disk_area`,
	                `LHS`.`max_disk_loading` AS `max_disk_loading`,
	                `RHS`.`airport_id` AS `airport_id`,
	                `RHS`.`airport_name` AS `airport_name`,
	                `RHS`.`total_passengers` AS `total_passengers`,
	                `RHS`.`col___change_2007` AS `col___change_2007`,
	                `RHS`.`international_passengers` AS `international_passengers`,
	                `RHS`.`domestic_passengers` AS `domestic_passengers`,
	                `RHS`.`transit_passengers` AS `transit_passengers`,
	                `RHS`.`aircraft_movements` AS `aircraft_movements`,
	                `RHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`
	         FROM `aircraft` AS `LHS`
	         CROSS JOIN `airport` AS `RHS`) AS `LHS`
	      INNER JOIN `airport_aircraft` AS `RHS` ON (`LHS`.`aircraft_id` = `RHS`.`aircraft_id`
	                                                    AND `LHS`.`airport_id` = `RHS`.`airport_id`)) AS `LHS`
	   INNER JOIN
	     (SELECT *
	      FROM `airport`
	      WHERE (`airport_name` = 'London Gatwick')) AS RHS ON (LHS.airport_id = RHS.airport_id
	                                                            AND LHS.airport_name = RHS.airport_name
	                                                            AND LHS.total_passengers = RHS.total_passengers
	                                                            AND LHS.col___change_2007 = RHS.col___change_2007
	                                                            AND LHS.international_passengers = RHS.international_passengers
	                                                            AND LHS.domestic_passengers = RHS.domestic_passengers
	                                                            AND LHS.transit_passengers = RHS.transit_passengers
	                                                            AND LHS.aircraft_movements = RHS.aircraft_movements
	                                                            AND LHS.freight_metric_tonnes = RHS.freight_metric_tonnes))
	ORDER BY aircraft
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/aircraft/0011
	(sqlite3.OperationalError) no such column: RHS.col___change_2007
	[SQL: 
	SELECT aircraft,
	       description
	FROM
	  (SELECT LHS.aircraft_id AS aircraft_id,
	          LHS.aircraft AS aircraft,
	          LHS.description AS description,
	          LHS.max_gross_weight AS max_gross_weight,
	          LHS.total_disk_area AS total_disk_area,
	          LHS.max_disk_loading AS max_disk_loading,
	          LHS.airport_id AS airport_id,
	          LHS.airport_name AS airport_name,
	          LHS.total_passengers AS total_passengers,
	          LHS.col___change_2007 AS col___change_2007,
	          LHS.international_passengers AS international_passengers,
	          LHS.domestic_passengers AS domestic_passengers,
	          LHS.transit_passengers AS transit_passengers,
	          LHS.aircraft_movements AS aircraft_movements,
	          LHS.freight_metric_tonnes AS freight_metric_tonnes,
	          RHS.id AS id
	   FROM
	     (SELECT LHS.aircraft_id AS aircraft_id,
	             LHS.aircraft AS aircraft,
	             LHS.description AS description,
	             LHS.max_gross_weight AS max_gross_weight,
	             LHS.total_disk_area AS total_disk_area,
	             LHS.max_disk_loading AS max_disk_loading,
	             RHS.airport_id AS airport_id,
	             RHS.airport_name AS airport_name,
	             RHS.total_passengers AS total_passengers,
	             RHS.col___change_2007 AS col___change_2007,
	             RHS.international_passengers AS international_passengers,
	             RHS.domestic_passengers AS domestic_passengers,
	             RHS.transit_passengers AS transit_passengers,
	             RHS.aircraft_movements AS aircraft_movements,
	             RHS.freight_metric_tonnes AS freight_metric_tonnes
	      FROM aircraft AS LHS
	      CROSS JOIN airport AS RHS) AS LHS
	   INNER JOIN airport_aircraft AS RHS ON (LHS.aircraft_id = RHS.aircraft_id
	                                             AND LHS.airport_id = RHS.airport_id))
	WHERE (total_passengers >= 10000000.0)
	ORDER BY aircraft
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/aircraft/0012
	(sqlite3.OperationalError) no such column: RHS.col___change_2007
	[SQL: 
	SELECT `total_passengers` AS `avg_t3_total_passengers_`
	FROM
	  (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
	          `LHS`.`aircraft` AS `aircraft`,
	          `LHS`.`description` AS `description`,
	          `LHS`.`max_gross_weight` AS `max_gross_weight`,
	          `LHS`.`total_disk_area` AS `total_disk_area`,
	          `LHS`.`max_disk_loading` AS `max_disk_loading`,
	          `LHS`.`airport_id` AS `airport_id`,
	          `LHS`.`airport_name` AS `airport_name`,
	          `LHS`.`total_passengers` AS `total_passengers`,
	          `LHS`.`col___change_2007` AS `col___change_2007`,
	          `LHS`.`international_passengers` AS `international_passengers`,
	          `LHS`.`domestic_passengers` AS `domestic_passengers`,
	          `LHS`.`transit_passengers` AS `transit_passengers`,
	          `LHS`.`aircraft_movements` AS `aircraft_movements`,
	          `LHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`,
	          `LHS`.`id` AS `id`
	   FROM
	     (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
	             `LHS`.`aircraft` AS `aircraft`,
	             `LHS`.`description` AS `description`,
	             `LHS`.`max_gross_weight` AS `max_gross_weight`,
	             `LHS`.`total_disk_area` AS `total_disk_area`,
	             `LHS`.`max_disk_loading` AS `max_disk_loading`,
	             `LHS`.`airport_id` AS `airport_id`,
	             `LHS`.`airport_name` AS `airport_name`,
	             `LHS`.`total_passengers` AS `total_passengers`,
	             `LHS`.`col___change_2007` AS `col___change_2007`,
	             `LHS`.`international_passengers` AS `international_passengers`,
	             `LHS`.`domestic_passengers` AS `domestic_passengers`,
	             `LHS`.`transit_passengers` AS `transit_passengers`,
	             `LHS`.`aircraft_movements` AS `aircraft_movements`,
	             `LHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`,
	             `RHS`.`id` AS `id`
	      FROM
	        (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
	                `LHS`.`aircraft` AS `aircraft`,
	                `LHS`.`description` AS `description`,
	                `LHS`.`max_gross_weight` AS `max_gross_weight`,
	                `LHS`.`total_disk_area` AS `total_disk_area`,
	                `LHS`.`max_disk_loading` AS `max_disk_loading`,
	                `RHS`.`airport_id` AS `airport_id`,
	                `RHS`.`airport_name` AS `airport_name`,
	                `RHS`.`total_passengers` AS `total_passengers`,
	                `RHS`.`col___change_2007` AS `col___change_2007`,
	                `RHS`.`international_passengers` AS `international_passengers`,
	                `RHS`.`domestic_passengers` AS `domestic_passengers`,
	                `RHS`.`transit_passengers` AS `transit_passengers`,
	                `RHS`.`aircraft_movements` AS `aircraft_movements`,
	                `RHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`
	         FROM `aircraft` AS `LHS`
	         CROSS JOIN `airport` AS `RHS`) AS `LHS`
	      INNER JOIN `airport_aircraft` AS `RHS` ON (`LHS`.`aircraft_id` = `RHS`.`aircraft_id`
	                                                    AND `LHS`.`airport_id` = `RHS`.`airport_id`)) AS `LHS`
	   INNER JOIN
	     (SELECT *
	      FROM `aircraft`
	      WHERE (`aircraft` = 'Robinson R-22')) AS RHS ON (LHS.aircraft_id = RHS.aircraft_id
	                                                       AND LHS.aircraft = RHS.aircraft
	                                                       AND LHS.description = RHS.description
	                                                       AND LHS.max_gross_weight = RHS.max_gross_weight
	                                                       AND LHS.total_disk_area = RHS.total_disk_area
	                                                       AND LHS.max_disk_loading = RHS.max_disk_loading))
	ORDER BY avg_t3_total_passengers_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/aircraft/0014.yaml
No solution tests/spider/aircraft/0020.yaml
No solution tests/spider/aircraft/0021.yaml
No solution tests/spider/aircraft/0022.yaml
No solution tests/spider/aircraft/0023.yaml
Error while executing solution for spider/allergy_1/0002
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT allergytype) OVER () AS count_distinct_allergytype_
	FROM allergy_type
	ORDER BY count_distinct_allergytype_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/allergy_1/0003.yaml
No solution tests/spider/allergy_1/0004.yaml
Error while executing solution for spider/allergy_1/0009
	(sqlite3.OperationalError) near ".": syntax error
	[SQL: 
	SELECT allergytype.other_other AS allergytype
	FROM
	  (SELECT LHS.allergytype AS allergytype,
	          LHS.n AS n,
	          RHS.allergytype AS allergytype_other,
	          RHS.n AS n_other,
	          RHS.allergytype_other AS allergytype.other_other,
	          RHS.n_other AS n.other_other
	   FROM
	     (SELECT allergytype,
	             COUNT() AS n
	      FROM allergy_type
	      GROUP BY allergytype) AS LHS
	   CROSS JOIN
	     (SELECT *
	      FROM
	        (SELECT LHS.allergytype AS allergytype,
	                LHS.n AS n,
	                RHS.allergytype AS allergytype_other,
	                RHS.n AS n_other
	         FROM
	           (SELECT allergytype,
	                   COUNT() AS n
	            FROM allergy_type
	            GROUP BY allergytype) AS LHS
	         CROSS JOIN
	           (SELECT allergytype,
	                   COUNT() AS n
	            FROM allergy_type
	            GROUP BY allergytype) AS RHS)
	      WHERE (n < n_other)) AS RHS)
	WHERE (n < n_other)
	ORDER BY allergytype
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/allergy_1/0010
	(sqlite3.OperationalError) near ".": syntax error
	[SQL: 
	SELECT allergytype
	FROM
	  (SELECT LHS.allergytype AS allergytype,
	          LHS.n AS n,
	          RHS.allergytype AS allergytype_other,
	          RHS.n AS n_other,
	          RHS.allergytype_other AS allergytype.other_other,
	          RHS.n_other AS n.other_other
	   FROM
	     (SELECT allergytype,
	             COUNT() AS n
	      FROM allergy_type
	      GROUP BY allergytype) AS LHS
	   CROSS JOIN
	     (SELECT *
	      FROM
	        (SELECT LHS.allergytype AS allergytype,
	                LHS.n AS n,
	                RHS.allergytype AS allergytype_other,
	                RHS.n AS n_other
	         FROM
	           (SELECT allergytype,
	                   COUNT() AS n
	            FROM allergy_type
	            GROUP BY allergytype) AS LHS
	         CROSS JOIN
	           (SELECT allergytype,
	                   COUNT() AS n
	            FROM allergy_type
	            GROUP BY allergytype) AS RHS)
	      WHERE (n < n_other)) AS RHS)
	WHERE (n < n_other)
	ORDER BY allergytype
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/allergy_1/0032.yaml
No solution tests/spider/allergy_1/0038.yaml
No solution tests/spider/allergy_1/0043.yaml
No solution tests/spider/allergy_1/0044.yaml
No solution tests/spider/allergy_1/0048.yaml
No solution tests/spider/apartment_rentals/0002.yaml
No solution tests/spider/apartment_rentals/0003.yaml
No solution tests/spider/apartment_rentals/0006.yaml
No solution tests/spider/apartment_rentals/0012.yaml
No solution tests/spider/apartment_rentals/0014.yaml
Error while executing ground truth for spider/apartment_rentals/0015
	The column label 'booking_start_date' is not unique.
No solution tests/spider/apartment_rentals/0016.yaml
Error while executing ground truth for spider/apartment_rentals/0020
	The column label 'booking_start_date' is not unique.
Error while executing ground truth for spider/apartment_rentals/0021
	The column label 'booking_start_date' is not unique.
No solution tests/spider/apartment_rentals/0033.yaml
No solution tests/spider/apartment_rentals/0035.yaml
No solution tests/spider/apartment_rentals/0036.yaml
No solution tests/spider/apartment_rentals/0039.yaml
Error while executing solution for spider/architecture/0003
	(sqlite3.OperationalError) near ".": syntax error
	[SQL: 
	SELECT length_meters AS max_t1_length_meters_,
	       name.other_other AS name
	FROM
	  (SELECT LHS.architect_id AS architect_id,
	          LHS.id AS id,
	          LHS.name AS name,
	          LHS.location AS LOCATION,
	          LHS.length_meters AS length_meters,
	          LHS.length_feet AS length_feet,
	          LHS.maxlength_meters AS maxlength_meters,
	          RHS.architect_id AS architect_id_other,
	          RHS.id AS id_other,
	          RHS.name AS name_other,
	          RHS.location AS location_other,
	          RHS.length_meters AS length_meters_other,
	          RHS.length_feet AS length_feet_other,
	          RHS.maxlength_meters AS maxlength_meters_other,
	          RHS.name_other AS name.other_other,
	          RHS.nationality AS nationality,
	          RHS.gender AS gender
	   FROM
	     (SELECT architect_id,
	             id,
	             name,
	             LOCATION,
	             length_meters,
	             length_feet,
	             MAX(length_meters) OVER () AS maxlength_meters
	      FROM bridge) AS LHS
	   CROSS JOIN
	     (SELECT LHS.architect_id AS architect_id,
	             LHS.id AS id,
	             LHS.name AS name,
	             LHS.location AS LOCATION,
	             LHS.length_meters AS length_meters,
	             LHS.length_feet AS length_feet,
	             LHS.maxlength_meters AS maxlength_meters,
	             RHS.name AS name_other,
	             RHS.nationality AS nationality,
	             RHS.gender AS gender
	      FROM
	        (SELECT architect_id,
	                id,
	                name,
	                LOCATION,
	                length_meters,
	                length_feet,
	                MAX(length_meters) OVER () AS maxlength_meters
	         FROM bridge) AS LHS
	      INNER JOIN architect AS RHS ON (LHS.id = RHS.id)) AS RHS)
	WHERE (length_meters = maxlength_meters_other
	       AND length_meters_other = maxlength_meters_other)
	ORDER BY max_t1_length_meters_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/architecture/0011.yaml
No solution tests/spider/architecture/0013.yaml
No solution tests/spider/architecture/0014.yaml
No solution tests/spider/architecture/0016.yaml
No solution tests/spider/assets_maintenance/0001.yaml
No solution tests/spider/assets_maintenance/0004.yaml
No solution tests/spider/assets_maintenance/0005.yaml
No ground truth tests/spider/assets_maintenance/0006.yaml
Wrong output for base solution in spider/assets_maintenance/0012
	EXPECTED
		SELECT count(*),
		       T1.fault_log_entry_id
		FROM Fault_Log AS T1
		JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id
		GROUP BY T1.fault_log_entry_id
		ORDER BY count(*) DESC
		LIMIT 1
	   count(*)  fault_log_entry_id
	0         5                  13
	ACTUAL
		
		SELECT recorded_by_staff_id AS count___,
		       fault_log_entry_id_other AS fault_log_entry_id
		FROM
		  (SELECT fault_log_entry_id,
		          asset_id,
		          recorded_by_staff_id,
		          fault_log_entry_datetime,
		          fault_description,
		          other_fault_details,
		          fault_log_entry_id_other,
		          recorded_by_staff_id AS n
		   FROM
		     (SELECT LHS.fault_log_entry_id AS fault_log_entry_id,
		             LHS.asset_id AS asset_id,
		             LHS.recorded_by_staff_id AS recorded_by_staff_id,
		             LHS.fault_log_entry_datetime AS fault_log_entry_datetime,
		             LHS.fault_description AS fault_description,
		             LHS.other_fault_details AS other_fault_details,
		             RHS.fault_log_entry_id AS fault_log_entry_id_other
		      FROM fault_log AS LHS
		      INNER JOIN
		        (SELECT fault_log_entry_id,
		                other_visit_details,
		                COUNT() AS n
		         FROM engineer_visits
		         GROUP BY fault_log_entry_id,
		                  other_visit_details) AS RHS ON (LHS.recorded_by_staff_id = RHS.n
		                                                  AND LHS.other_fault_details = RHS.other_visit_details)))
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___, fault_log_entry_id]
	Index: []
No solution tests/spider/assets_maintenance/0021.yaml
Wrong output for base solution in spider/assets_maintenance/0026
	EXPECTED
		SELECT part_id,
		       chargeable_amount
		FROM Parts
		ORDER BY chargeable_amount ASC
		LIMIT 1
	   part_id chargeable_amount
	0        1                 4
	ACTUAL
		
		SELECT part_id,
		       chargeable_amount
		FROM
		  (SELECT LHS.part_id AS part_id,
		          LHS.part_name AS part_name,
		          LHS.chargeable_yn AS chargeable_yn,
		          LHS.chargeable_amount AS chargeable_amount,
		          LHS.other_part_details AS other_part_details
		   FROM parts AS LHS
		   INNER JOIN
		     (SELECT other_part_details,
		             MIN(chargeable_amount) AS chargeable_amount
		      FROM parts
		      GROUP BY other_part_details) AS RHS ON (LHS.chargeable_amount = RHS.chargeable_amount
		                                              AND LHS.other_part_details = RHS.other_part_details))
		ORDER BY part_id
		
	Empty DataFrame
	Columns: [part_id, chargeable_amount]
	Index: []
No solution tests/spider/baseball_1/0001.yaml
No solution tests/spider/baseball_1/0002.yaml
No solution tests/spider/baseball_1/0004.yaml
No solution tests/spider/baseball_1/0007.yaml
No solution tests/spider/baseball_1/0008.yaml
No solution tests/spider/baseball_1/0010.yaml
No solution tests/spider/baseball_1/0011.yaml
No solution tests/spider/baseball_1/0012.yaml
No solution tests/spider/baseball_1/0013.yaml
No solution tests/spider/baseball_1/0014.yaml
No solution tests/spider/baseball_1/0015.yaml
No solution tests/spider/baseball_1/0016.yaml
No solution tests/spider/baseball_1/0017.yaml
No solution tests/spider/baseball_1/0018.yaml
No solution tests/spider/baseball_1/0019.yaml
No solution tests/spider/baseball_1/0020.yaml
No solution tests/spider/baseball_1/0021.yaml
No solution tests/spider/baseball_1/0022.yaml
No solution tests/spider/baseball_1/0023.yaml
Error while executing solution for spider/baseball_1/0024
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT COUNT(DISTINCT ties) OVER () AS count___
	FROM postseason
	WHERE (YEAR <= 1885.0
	       AND ties < 1.0)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/baseball_1/0025.yaml
No solution tests/spider/baseball_1/0026.yaml
No solution tests/spider/baseball_1/0027.yaml
No solution tests/spider/baseball_1/0029.yaml
No solution tests/spider/baseball_1/0033.yaml
No solution tests/spider/baseball_1/0034.yaml
No solution tests/spider/baseball_1/0035.yaml
No solution tests/spider/baseball_1/0036.yaml
No solution tests/spider/baseball_1/0037.yaml
No solution tests/spider/baseball_1/0041.yaml
Wrong output for base solution in spider/behavior_monitoring/0002
	EXPECTED
		SELECT date_of_notes
		FROM Assessment_Notes
	          date_of_notes
	0   1971-05-05 20:07:08
	1   1972-04-27 04:51:51
	2   1974-11-26 04:23:22
	3   1978-04-15 04:49:18
	4   1984-09-10 01:18:34
	5   1984-12-13 23:04:28
	6   1988-04-11 04:56:26
	7   1988-06-09 00:24:01
	8   1991-08-15 01:22:08
	9   1991-08-20 08:03:23
	10  1993-08-16 17:39:53
	11  2005-06-30 02:48:35
	12  2014-01-31 02:05:02
	13  2014-04-28 02:07:53
	14  2017-12-14 08:21:54
	ACTUAL
		
		SELECT date_of_notes_other AS date_of_notes
		FROM
		  (SELECT LHS.notes_id AS notes_id,
		          LHS.student_id AS student_id,
		          LHS.teacher_id AS teacher_id,
		          LHS.date_of_notes AS date_of_notes,
		          LHS.text_of_notes AS text_of_notes,
		          LHS.other_details AS other_details,
		          RHS.notes_id AS notes_id_other,
		          RHS.student_id AS student_id_other,
		          RHS.date_of_notes AS date_of_notes_other,
		          RHS.other_details AS other_details_other
		   FROM assessment_notes AS LHS
		   INNER JOIN assessment_notes AS RHS ON (LHS.notes_id = RHS.teacher_id
		                                             AND LHS.text_of_notes = RHS.text_of_notes))
		ORDER BY date_of_notes
		
	Empty DataFrame
	Columns: [date_of_notes]
	Index: []
Error while executing solution for spider/behavior_monitoring/0004
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT incident_type_code) OVER () AS count_distinct_incident_type_code_
	FROM behavior_incident
	ORDER BY count_distinct_incident_type_code_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Wrong output for base solution in spider/behavior_monitoring/0005
	EXPECTED
		SELECT DISTINCT detention_type_code
		FROM Detention
	  detention_type_code
	0               AFTER
	1              BREAK 
	2               LUNCH
	ACTUAL
		
		SELECT DISTINCT detention_type_code
		FROM
		  (SELECT LHS.detention_id AS detention_id,
		          LHS.detention_type_code AS detention_type_code,
		          LHS.teacher_id AS teacher_id,
		          LHS.datetime_detention_start AS datetime_detention_start,
		          LHS.datetime_detention_end AS datetime_detention_end,
		          LHS.detention_summary AS detention_summary,
		          LHS.other_details AS other_details,
		          RHS.detention_id AS detention_id_other,
		          RHS.detention_type_code AS detention_type_code_other,
		          RHS.teacher_id AS teacher_id_other,
		          RHS.datetime_detention_start AS datetime_detention_start_other,
		          RHS.other_details AS other_details_other
		   FROM detention AS LHS
		   INNER JOIN detention AS RHS ON (LHS.datetime_detention_end = RHS.datetime_detention_end
		                                      AND LHS.detention_summary = RHS.detention_summary))
		ORDER BY detention_type_code
		
	Empty DataFrame
	Columns: [detention_type_code]
	Index: []
Wrong output for base solution in spider/behavior_monitoring/0007
	EXPECTED
		SELECT detention_summary
		FROM Detention
	   detention_summary
	0               None
	1               None
	2               None
	3               None
	4               None
	5               None
	6               None
	7               None
	8               None
	9               None
	10              None
	11              None
	12              None
	13              None
	14              None
	ACTUAL
		
		SELECT detention_summary
		FROM
		  (SELECT LHS.detention_id AS detention_id,
		          LHS.detention_type_code AS detention_type_code,
		          LHS.teacher_id AS teacher_id,
		          LHS.datetime_detention_start AS datetime_detention_start,
		          LHS.datetime_detention_end AS datetime_detention_end,
		          LHS.detention_summary AS detention_summary,
		          LHS.other_details AS other_details,
		          RHS.detention_id AS detention_id_other,
		          RHS.detention_type_code AS detention_type_code_other,
		          RHS.teacher_id AS teacher_id_other,
		          RHS.datetime_detention_start AS datetime_detention_start_other,
		          RHS.other_details AS other_details_other
		   FROM detention AS LHS
		   INNER JOIN detention AS RHS ON (LHS.datetime_detention_end = RHS.datetime_detention_end
		                                      AND LHS.detention_summary = RHS.detention_summary))
		ORDER BY detention_summary
		
	Empty DataFrame
	Columns: [detention_summary]
	Index: []
Wrong output for base solution in spider/behavior_monitoring/0011
	EXPECTED
		SELECT gender
		FROM TEACHERS
		WHERE last_name = "Medhurst"
	  gender
	0      1
	ACTUAL
		
		SELECT `teacher_id` AS `gender`
		FROM `teachers`
		WHERE (`last_name` = 'Medhurst')
		ORDER BY gender
		
	   gender
	0       1
No solution tests/spider/behavior_monitoring/0014.yaml
No solution tests/spider/behavior_monitoring/0015.yaml
No solution tests/spider/behavior_monitoring/0017.yaml
No solution tests/spider/behavior_monitoring/0020.yaml
Wrong output for base solution in spider/behavior_monitoring/0021
	EXPECTED
		SELECT T1.student_id,
		       T2.last_name
		FROM Behavior_Incident AS T1
		JOIN Students AS T2 ON T1.student_id = T2.student_id
		GROUP BY T1.student_id
		ORDER BY count(*) DESC
		LIMIT 1
	   student_id last_name
	0           1     Rohan
	ACTUAL
		
		SELECT DISTINCT student_id,
		                last_name
		FROM
		  (SELECT student_id,
		          address_id,
		          first_name,
		          middle_name,
		          last_name,
		          cell_mobile_number,
		          email_address,
		          date_first_rental,
		          date_left_university,
		          other_student_details,
		          date_incident_start,
		          student_id AS n
		   FROM
		     (SELECT LHS.student_id AS student_id,
		             LHS.address_id AS address_id,
		             LHS.first_name AS first_name,
		             LHS.middle_name AS middle_name,
		             LHS.last_name AS last_name,
		             LHS.cell_mobile_number AS cell_mobile_number,
		             LHS.email_address AS email_address,
		             LHS.date_first_rental AS date_first_rental,
		             LHS.date_left_university AS date_left_university,
		             LHS.other_student_details AS other_student_details,
		             RHS.date_incident_start AS date_incident_start
		      FROM students AS LHS
		      INNER JOIN
		        (SELECT date_incident_start,
		                recommendations,
		                COUNT() AS n
		         FROM behavior_incident
		         GROUP BY date_incident_start,
		                  recommendations) AS RHS ON (LHS.student_id = RHS.n
		                                              AND LHS.other_student_details = RHS.recommendations)))
		ORDER BY student_id
		
	Empty DataFrame
	Columns: [student_id, last_name]
	Index: []
No solution tests/spider/behavior_monitoring/0022.yaml
No solution tests/spider/behavior_monitoring/0023.yaml
No solution tests/spider/behavior_monitoring/0024.yaml
Wrong output for base solution in spider/behavior_monitoring/0027
	EXPECTED
		SELECT T1.date_of_notes
		FROM Assessment_Notes AS T1
		JOIN Students AS T2 ON T1.student_id = T2.student_id
		WHERE T2.first_name = "Fanny"
	         date_of_notes
	0  1972-04-27 04:51:51
	1  1974-11-26 04:23:22
	ACTUAL
		
		SELECT `date_of_notes`
		FROM
		  (SELECT `LHS`.`student_id` AS `student_id`,
		          `LHS`.`address_id` AS `address_id`,
		          `LHS`.`first_name` AS `first_name`,
		          `LHS`.`middle_name` AS `middle_name`,
		          `LHS`.`last_name` AS `last_name`,
		          `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
		          `LHS`.`email_address` AS `email_address`,
		          `LHS`.`date_first_rental` AS `date_first_rental`,
		          `LHS`.`date_left_university` AS `date_left_university`,
		          `LHS`.`other_student_details` AS `other_student_details`,
		          `LHS`.`notes_id` AS `notes_id`,
		          `LHS`.`teacher_id` AS `teacher_id`,
		          `LHS`.`date_of_notes` AS `date_of_notes`,
		          `LHS`.`text_of_notes` AS `text_of_notes`,
		          `LHS`.`other_details` AS `other_details`
		   FROM
		     (SELECT `LHS`.`student_id` AS `student_id`,
		             `LHS`.`address_id` AS `address_id`,
		             `LHS`.`first_name` AS `first_name`,
		             `LHS`.`middle_name` AS `middle_name`,
		             `LHS`.`last_name` AS `last_name`,
		             `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
		             `LHS`.`email_address` AS `email_address`,
		             `LHS`.`date_first_rental` AS `date_first_rental`,
		             `LHS`.`date_left_university` AS `date_left_university`,
		             `LHS`.`other_student_details` AS `other_student_details`,
		             `RHS`.`notes_id` AS `notes_id`,
		             `RHS`.`teacher_id` AS `teacher_id`,
		             `RHS`.`date_of_notes` AS `date_of_notes`,
		             `RHS`.`text_of_notes` AS `text_of_notes`,
		             `RHS`.`other_details` AS `other_details`
		      FROM `students` AS `LHS`
		      INNER JOIN `assessment_notes` AS `RHS` ON (`LHS`.`student_id` = `RHS`.`student_id`)) AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `students`
		      WHERE (`first_name` = 'Fanny')) AS RHS ON (LHS.student_id = RHS.student_id
		                                                 AND LHS.address_id = RHS.address_id
		                                                 AND LHS.first_name = RHS.first_name
		                                                 AND LHS.middle_name = RHS.middle_name
		                                                 AND LHS.last_name = RHS.last_name
		                                                 AND LHS.cell_mobile_number = RHS.cell_mobile_number
		                                                 AND LHS.email_address = RHS.email_address
		                                                 AND LHS.date_first_rental = RHS.date_first_rental
		                                                 AND LHS.date_left_university = RHS.date_left_university
		                                                 AND LHS.other_student_details = RHS.other_student_details))
		ORDER BY date_of_notes
		
	Empty DataFrame
	Columns: [date_of_notes]
	Index: []
No solution tests/spider/behavior_monitoring/0032.yaml
Wrong output for base solution in spider/behavior_monitoring/0037
	EXPECTED
		SELECT T2.email_address
		FROM Addresses AS T1
		JOIN Teachers AS T2 ON T1.address_id = T2.address_id
		WHERE T1.zip_postcode = "918"
	                email_address
	0  everardo.lynch@example.net
	ACTUAL
		
		SELECT email_address
		FROM
		  (SELECT LHS.address_id AS address_id,
		          LHS.line_1 AS line_1,
		          LHS.line_2 AS line_2,
		          LHS.line_3 AS line_3,
		          LHS.city AS city,
		          LHS.zip_postcode AS zip_postcode,
		          LHS.state_province_county AS state_province_county,
		          LHS.country AS country,
		          LHS.other_address_details AS other_address_details,
		          LHS.teacher_id AS teacher_id,
		          LHS.first_name AS first_name,
		          LHS.middle_name AS middle_name,
		          LHS.last_name AS last_name,
		          LHS.gender AS gender,
		          LHS.cell_mobile_number AS cell_mobile_number,
		          LHS.email_address AS email_address,
		          LHS.other_details AS other_details
		   FROM
		     (SELECT LHS.address_id AS address_id,
		             LHS.line_1 AS line_1,
		             LHS.line_2 AS line_2,
		             LHS.line_3 AS line_3,
		             LHS.city AS city,
		             LHS.zip_postcode AS zip_postcode,
		             LHS.state_province_county AS state_province_county,
		             LHS.country AS country,
		             LHS.other_address_details AS other_address_details,
		             RHS.teacher_id AS teacher_id,
		             RHS.first_name AS first_name,
		             RHS.middle_name AS middle_name,
		             RHS.last_name AS last_name,
		             RHS.gender AS gender,
		             RHS.cell_mobile_number AS cell_mobile_number,
		             RHS.email_address AS email_address,
		             RHS.other_details AS other_details
		      FROM addresses AS LHS
		      INNER JOIN teachers AS RHS ON (LHS.address_id = RHS.address_id)) AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM addresses
		      WHERE (zip_postcode = 918.0)) AS RHS ON (LHS.address_id = RHS.address_id
		                                               AND LHS.line_1 = RHS.line_1
		                                               AND LHS.line_2 = RHS.line_2
		                                               AND LHS.line_3 = RHS.line_3
		                                               AND LHS.city = RHS.city
		                                               AND LHS.zip_postcode = RHS.zip_postcode
		                                               AND LHS.state_province_county = RHS.state_province_county
		                                               AND LHS.country = RHS.country
		                                               AND LHS.other_address_details = RHS.other_address_details))
		ORDER BY email_address
		
	Empty DataFrame
	Columns: [email_address]
	Index: []
No solution tests/spider/behavior_monitoring/0040.yaml
No solution tests/spider/bike_1/0001.yaml
No solution tests/spider/bike_1/0004.yaml
No solution tests/spider/bike_1/0005.yaml
Wrong output for base solution in spider/bike_1/0006
	EXPECTED
		SELECT id
		FROM trip
		ORDER BY duration
		LIMIT 1
	       id
	0  906210
	ACTUAL
		
		SELECT id
		FROM
		  (SELECT LHS.id AS id,
		          LHS.duration AS duration,
		          LHS.start_date AS start_date,
		          LHS.start_station_name AS start_station_name,
		          LHS.start_station_id AS start_station_id,
		          LHS.end_date AS end_date,
		          LHS.end_station_name AS end_station_name,
		          LHS.end_station_id AS end_station_id,
		          LHS.bike_id AS bike_id,
		          LHS.subscription_type AS subscription_type,
		          LHS.zip_code AS zip_code
		   FROM trip AS LHS
		   INNER JOIN
		     (SELECT end_date,
		             MIN(duration) AS duration
		      FROM trip
		      GROUP BY end_date) AS RHS ON (LHS.duration = RHS.duration
		                                    AND LHS.end_date = RHS.end_date))
		ORDER BY id
		
	          id
	0     900504
	1     900506
	2     900518
	3     900521
	4     900528
	...      ...
	4982  913453
	4983  913454
	4984  913455
	4985  913459
	4986  913460
	
	[4987 rows x 1 columns]
No solution tests/spider/bike_1/0007.yaml
No solution tests/spider/bike_1/0008.yaml
Wrong output for base solution in spider/bike_1/0009
	EXPECTED
		SELECT count(DISTINCT bike_id)
		FROM trip
	   count(distinct bike_id)
	0                      530
	ACTUAL
		
		SELECT n_distinct AS count_distinct_bike_id_
		FROM
		  (SELECT end_date,
		          start_date,
		          COUNT(DISTINCT bike_id) AS n_distinct
		   FROM trip
		   GROUP BY end_date,
		            start_date)
		ORDER BY count_distinct_bike_id_
		
	      count_distinct_bike_id_
	0                           1
	1                           1
	2                           1
	3                           1
	4                           1
	...                       ...
	9108                        4
	9109                        4
	9110                        4
	9111                        4
	9112                        5
	
	[9113 rows x 1 columns]
Error while executing solution for spider/bike_1/0010
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT city) OVER () AS count_distinct_city_
	FROM station
	ORDER BY count_distinct_city_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Wrong output for base solution in spider/bike_1/0011
	EXPECTED
		SELECT COUNT(*)
		FROM station
		WHERE city = "Mountain View"
	   count(*)
	0         7
	ACTUAL
		
		SELECT `n` AS `count___`
		FROM
		  (SELECT `city`,
		          `installation_date`,
		          COUNT() AS `n`
		   FROM `station`
		   GROUP BY `city`,
		            `installation_date`)
		WHERE (`city` = 'Mountain View')
		ORDER BY count___
		
	   count___
	0         2
	1         2
	2         3
No solution tests/spider/bike_1/0013.yaml
No solution tests/spider/bike_1/0014.yaml
No solution tests/spider/bike_1/0015.yaml
No solution tests/spider/bike_1/0016.yaml
No solution tests/spider/bike_1/0017.yaml
No solution tests/spider/bike_1/0018.yaml
No solution tests/spider/bike_1/0019.yaml
No solution tests/spider/bike_1/0020.yaml
No solution tests/spider/bike_1/0021.yaml
No solution tests/spider/bike_1/0022.yaml
No solution tests/spider/bike_1/0023.yaml
No solution tests/spider/bike_1/0024.yaml
No solution tests/spider/bike_1/0025.yaml
No solution tests/spider/bike_1/0026.yaml
Wrong output for base solution in spider/bike_1/0027
	EXPECTED
		SELECT T1.id,
		       T2.installation_date
		FROM trip AS T1
		JOIN station AS T2 ON T1.end_station_id = T2.id
	          id installation_date
	0     900504         8/23/2013
	1     900505         8/23/2013
	2     900506         8/20/2013
	3     900507         8/22/2013
	4     900508         8/23/2013
	...      ...               ...
	9954  913453         8/21/2013
	9955  913454          8/5/2013
	9956  913455         8/22/2013
	9957  913459         8/16/2013
	9958  913460         8/23/2013
	
	[9959 rows x 2 columns]
	ACTUAL
		
		SELECT id_other AS id,
		       installation_date
		FROM
		  (SELECT id,
		          name,
		          lat, long, dock_count,
		                     city,
		                     installation_date,
		                     id_other,
		                     duration,
		                     start_station_name,
		                     start_station_id,
		                     end_date,
		                     end_station_name,
		                     bike_id,
		                     subscription_type,
		                     zip_code,
		                     id AS end_station_id
		   FROM
		     (SELECT LHS.id AS id,
		             LHS.name AS name,
		             LHS.lat AS lat,
		             LHS.long AS long,
		             LHS.dock_count AS dock_count,
		             LHS.city AS city,
		             LHS.installation_date AS installation_date,
		             RHS.id AS id_other,
		             RHS.duration AS duration,
		             RHS.start_station_name AS start_station_name,
		             RHS.start_station_id AS start_station_id,
		             RHS.end_date AS end_date,
		             RHS.end_station_name AS end_station_name,
		             RHS.bike_id AS bike_id,
		             RHS.subscription_type AS subscription_type,
		             RHS.zip_code AS zip_code
		      FROM station AS LHS
		      INNER JOIN trip AS RHS ON (LHS.id = RHS.end_station_id
		                                    AND LHS.installation_date = RHS.start_date)))
		ORDER BY id
		
	Empty DataFrame
	Columns: [id, installation_date]
	Index: []
No solution tests/spider/bike_1/0028.yaml
No solution tests/spider/bike_1/0030.yaml
No solution tests/spider/bike_1/0031.yaml
No solution tests/spider/bike_1/0032.yaml
No solution tests/spider/bike_1/0034.yaml
No solution tests/spider/bike_1/0037.yaml
No solution tests/spider/bike_1/0039.yaml
No solution tests/spider/bike_1/0040.yaml
Wrong output for base solution in spider/bike_1/0042
	EXPECTED
		SELECT T1.name,
		       T1.lat,
		       min(T2.duration)
		FROM station AS T1
		JOIN trip AS T2 ON T1.id = T2.end_station_id
		GROUP BY T2.end_station_id
	                                 name        lat  min(t2.duration)
	0   San Jose Diridon Caltrain Station  37.329732               195
	1                 San Salvador at 1st  37.330165               161
	2               San Jose Civic Center  37.330698               211
	3                    Adobe on Almaden  37.331415               237
	4            Arena Green / SAP Center  37.332692               165
	..                                ...        ...               ...
	65                   Davis at Jackson  37.797280                84
	66    Grant Avenue at Columbus Avenue  37.798522               143
	67          Broadway St at Battery St  37.798541               105
	68             Embarcadero at Vallejo  37.799953               111
	69             Embarcadero at Sansome  37.804770                62
	
	[70 rows x 3 columns]
	ACTUAL
		
		SELECT name,
		       lat,
		       minduration AS min_t2_duration_
		FROM
		  (SELECT end_date,
		          end_station_id,
		          minduration,
		          name,
		          lat, long, dock_count,
		                     city,
		                     end_station_id AS id
		   FROM
		     (SELECT LHS.end_date AS end_date,
		             LHS.end_station_id AS end_station_id,
		             LHS.minduration AS minduration,
		             RHS.name AS name,
		             RHS.lat AS lat,
		             RHS.long AS long,
		             RHS.dock_count AS dock_count,
		             RHS.city AS city
		      FROM
		        (SELECT end_date,
		                end_station_id,
		                MIN(duration) AS minduration
		         FROM trip
		         GROUP BY end_date,
		                  end_station_id) AS LHS
		      INNER JOIN station AS RHS ON (LHS.end_station_id = RHS.id
		                                       AND LHS.end_date = RHS.installation_date)))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name, lat, min_t2_duration_]
	Index: []
Wrong output for base solution in spider/bike_1/0044
	EXPECTED
		SELECT DISTINCT zip_code
		FROM weather
		EXCEPT
		SELECT DISTINCT zip_code
		FROM weather
		WHERE max_dew_point_f >= 70
	   zip_code
	0     94063
	1     94107
	2     95113
	ACTUAL
		
		SELECT DISTINCT zip_code_other AS zip_code
		FROM
		  (SELECT date, max_temperature_f,
		                mean_temperature_f,
		                min_temperature_f,
		                max_dew_point_f,
		                mean_dew_point_f,
		                min_dew_point_f,
		                max_humidity,
		                mean_humidity,
		                min_humidity,
		                max_sea_level_pressure_inches,
		                max_sea_level_pressure_inches AS mean_sea_level_pressure_inches,
		                min_sea_level_pressure_inches,
		                max_visibility_miles,
		                mean_visibility_miles,
		                min_visibility_miles,
		                max_wind_speed_mph,
		                mean_wind_speed_mph,
		                max_gust_speed_mph,
		                precipitation_inches,
		                cloud_cover,
		                EVENTS,
		                wind_dir_degrees,
		                zip_code,
		                date_other,
		                mean_temperature_f_other,
		                min_temperature_f_other,
		                max_dew_point_f_other,
		                mean_dew_point_f_other,
		                min_dew_point_f_other,
		                max_humidity_other,
		                mean_humidity_other,
		                min_humidity_other,
		                max_sea_level_pressure_inches_other,
		                min_sea_level_pressure_inches_other,
		                max_visibility_miles_other,
		                mean_visibility_miles_other,
		                min_visibility_miles_other,
		                max_wind_speed_mph_other,
		                mean_wind_speed_mph_other,
		                max_gust_speed_mph_other,
		                precipitation_inches_other,
		                cloud_cover_other,
		                events_other,
		                wind_dir_degrees_other,
		                zip_code_other
		   FROM
		     (SELECT LHS.date AS date,
		             LHS.max_temperature_f AS max_temperature_f,
		             LHS.mean_temperature_f AS mean_temperature_f,
		             LHS.min_temperature_f AS min_temperature_f,
		             LHS.max_dew_point_f AS max_dew_point_f,
		             LHS.mean_dew_point_f AS mean_dew_point_f,
		             LHS.min_dew_point_f AS min_dew_point_f,
		             LHS.max_humidity AS max_humidity,
		             LHS.mean_humidity AS mean_humidity,
		             LHS.min_humidity AS min_humidity,
		             LHS.max_sea_level_pressure_inches AS max_sea_level_pressure_inches,
		             LHS.mean_sea_level_pressure_inches AS mean_sea_level_pressure_inches,
		             LHS.min_sea_level_pressure_inches AS min_sea_level_pressure_inches,
		             LHS.max_visibility_miles AS max_visibility_miles,
		             LHS.mean_visibility_miles AS mean_visibility_miles,
		             LHS.min_visibility_miles AS min_visibility_miles,
		             LHS.max_wind_speed_mph AS max_wind_speed_mph,
		             LHS.mean_wind_speed_mph AS mean_wind_speed_mph,
		             LHS.max_gust_speed_mph AS max_gust_speed_mph,
		             LHS.precipitation_inches AS precipitation_inches,
		             LHS.cloud_cover AS cloud_cover,
		             LHS.events AS EVENTS,
		             LHS.wind_dir_degrees AS wind_dir_degrees,
		             LHS.zip_code AS zip_code,
		             RHS.date AS date_other,
		             RHS.mean_temperature_f AS mean_temperature_f_other,
		             RHS.min_temperature_f AS min_temperature_f_other,
		             RHS.max_dew_point_f AS max_dew_point_f_other,
		             RHS.mean_dew_point_f AS mean_dew_point_f_other,
		             RHS.min_dew_point_f AS min_dew_point_f_other,
		             RHS.max_humidity AS max_humidity_other,
		             RHS.mean_humidity AS mean_humidity_other,
		             RHS.min_humidity AS min_humidity_other,
		             RHS.max_sea_level_pressure_inches AS max_sea_level_pressure_inches_other,
		             RHS.min_sea_level_pressure_inches AS min_sea_level_pressure_inches_other,
		             RHS.max_visibility_miles AS max_visibility_miles_other,
		             RHS.mean_visibility_miles AS mean_visibility_miles_other,
		             RHS.min_visibility_miles AS min_visibility_miles_other,
		             RHS.max_wind_speed_mph AS max_wind_speed_mph_other,
		             RHS.mean_wind_speed_mph AS mean_wind_speed_mph_other,
		             RHS.max_gust_speed_mph AS max_gust_speed_mph_other,
		             RHS.precipitation_inches AS precipitation_inches_other,
		             RHS.cloud_cover AS cloud_cover_other,
		             RHS.events AS events_other,
		             RHS.wind_dir_degrees AS wind_dir_degrees_other,
		             RHS.zip_code AS zip_code_other
		      FROM
		        (SELECT *
		         FROM weather
		         WHERE (max_dew_point_f != 70.0)) AS LHS
		      INNER JOIN
		        (SELECT *
		         FROM weather
		         WHERE (max_dew_point_f != 70.0)) AS RHS ON (LHS.max_sea_level_pressure_inches = RHS.mean_sea_level_pressure_inches
		                                                     AND LHS.max_gust_speed_mph = RHS.max_temperature_f)))
		ORDER BY zip_code
		
	   zip_code
	0     94041
	1     94063
	2     94107
	3     94301
	4     95113
No solution tests/spider/bike_1/0045.yaml
No solution tests/spider/bike_1/0047.yaml
No solution tests/spider/bike_1/0049.yaml
Error while executing solution for spider/bike_1/0050
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT `name`
	FROM
	  (SELECT `id`,
	          `name`,
	          `lat`,
	          `long`,
	          `dock_count`,
	          `city`,
	          `installation_date`,
	          `id_other`,
	          `duration`,
	          `start_date`,
	          `start_station_name`,
	          `start_station_id`,
	          `end_station_id`,
	          `bike_id`,
	          `subscription_type`,
	          `zip_code`,
	          `end_station_name`,
	          `end_date`,
	          COUNT(DISTINCT `city`) OVER () AS `n_distinct`
	   FROM
	     (SELECT `id`,
	             `name`,
	             `lat`,
	             `long`,
	             `dock_count`,
	             `city`,
	             `installation_date`,
	             `id_other`,
	             `duration`,
	             `start_date`,
	             `start_station_name`,
	             `start_station_id`,
	             `end_station_id`,
	             `bike_id`,
	             `subscription_type`,
	             `zip_code`,
	             `end_station_name`,
	             `installation_date` AS `end_date`
	      FROM
	        (SELECT `id`,
	                `name`,
	                `lat`,
	                `long`,
	                `dock_count`,
	                `city`,
	                `installation_date`,
	                `id_other`,
	                `duration`,
	                `start_date`,
	                `start_station_name`,
	                `start_station_id`,
	                `end_station_id`,
	                `bike_id`,
	                `subscription_type`,
	                `zip_code`,
	                `name` AS `end_station_name`
	         FROM
	           (SELECT `LHS`.`id` AS `id`,
	                   `LHS`.`name` AS `name`,
	                   `LHS`.`lat` AS `lat`,
	                   `LHS`.`long` AS `long`,
	                   `LHS`.`dock_count` AS `dock_count`,
	                   `LHS`.`city` AS `city`,
	                   `LHS`.`installation_date` AS `installation_date`,
	                   `RHS`.`id` AS `id_other`,
	                   `RHS`.`duration` AS `duration`,
	                   `RHS`.`start_date` AS `start_date`,
	                   `RHS`.`start_station_name` AS `start_station_name`,
	                   `RHS`.`start_station_id` AS `start_station_id`,
	                   `RHS`.`end_station_id` AS `end_station_id`,
	                   `RHS`.`bike_id` AS `bike_id`,
	                   `RHS`.`subscription_type` AS `subscription_type`,
	                   `RHS`.`zip_code` AS `zip_code`
	            FROM `station` AS `LHS`
	            INNER JOIN `trip` AS `RHS` ON (`LHS`.`name` = `RHS`.`end_station_name`
	                                              AND `LHS`.`installation_date` = `RHS`.`end_date`)))))
	WHERE (`city` = 'Palo Alto'
	       OR n_distinct = 100.0)
	ORDER BY name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/bike_1/0051.yaml
No solution tests/spider/bike_1/0052.yaml
No solution tests/spider/body_builder/0009.yaml
No solution tests/spider/body_builder/0012.yaml
No solution tests/spider/body_builder/0017.yaml
Wrong output for base solution in spider/body_builder/0020
	EXPECTED
		SELECT count(DISTINCT Birth_Place)
		FROM people
	   count(distinct birth_place)
	0                            6
	ACTUAL
		
		SELECT n AS count_distinct_birth_place_
		FROM
		  (SELECT birth_date,
		          COUNT() AS n
		   FROM people
		   GROUP BY birth_date)
		ORDER BY count_distinct_birth_place_
		
	   count_distinct_birth_place_
	0                            1
	1                            1
	2                            1
	3                            1
	4                            1
	5                            1
No solution tests/spider/body_builder/0023.yaml
No solution tests/spider/book_2/0005.yaml
Wrong output for base solution in spider/book_2/0009
	EXPECTED
		SELECT Publication_Date
		FROM publication
		ORDER BY Price ASC
		LIMIT 3
	  publication_date
	0       April 2007
	1       March 2007
	2     October 2005
	ACTUAL
		
		SELECT publication_date
		FROM
		  (SELECT *
		   FROM
		     (SELECT publication_id,
		             publication_id AS book_id,
		             publisher,
		             publication_date,
		             price,
		             publication_id_other,
		             publisher_other,
		             price_other
		      FROM
		        (SELECT LHS.publication_id AS publication_id,
		                LHS.book_id AS book_id,
		                LHS.publisher AS publisher,
		                LHS.publication_date AS publication_date,
		                LHS.price AS price,
		                RHS.publication_id AS publication_id_other,
		                RHS.publisher AS publisher_other,
		                RHS.price AS price_other
		         FROM publication AS LHS
		         INNER JOIN publication AS RHS ON (LHS.publication_id = RHS.book_id
		                                              AND LHS.publication_date = RHS.publication_date))) AS LHS
		   WHERE NOT EXISTS
		       (SELECT 1
		        FROM publication AS RHS
		        WHERE (LHS.book_id = RHS.book_id
		               AND LHS.price = RHS.price) ))
		ORDER BY publication_date
		
	Empty DataFrame
	Columns: [publication_date]
	Index: []
Wrong output for base solution in spider/book_2/0014
	EXPECTED
		SELECT Publisher,
		       COUNT(*)
		FROM publication
		GROUP BY Publisher
	         publisher  count(*)
	0      Bertelsmann         1
	1  Springer Nature         1
	2  Thomson Reuters         1
	3          Pearson         2
	4            Wiley         2
	ACTUAL
		
		SELECT publisher,
		       n AS count___
		FROM
		  (SELECT publication_date,
		          publisher,
		          COUNT() AS n
		   FROM publication
		   GROUP BY publication_date,
		            publisher)
		ORDER BY publisher
		
	         publisher  count___
	0      Bertelsmann         1
	1          Pearson         1
	2          Pearson         1
	3  Springer Nature         1
	4  Thomson Reuters         1
	5            Wiley         1
	6            Wiley         1
Wrong output for base solution in spider/book_2/0015
	EXPECTED
		SELECT Publication_Date
		FROM publication
		GROUP BY Publication_Date
		ORDER BY COUNT(*) DESC
		LIMIT 1
	  publication_date
	0      August 2008
	ACTUAL
		
		SELECT publisher AS publication_date
		FROM
		  (SELECT publication_id,
		          book_id,
		          publisher,
		          publication_date,
		          price,
		          publication_date_other,
		          publication_id AS n
		   FROM
		     (SELECT LHS.publication_id AS publication_id,
		             LHS.book_id AS book_id,
		             LHS.publisher AS publisher,
		             LHS.publication_date AS publication_date,
		             LHS.price AS price,
		             RHS.publication_date AS publication_date_other
		      FROM publication AS LHS
		      INNER JOIN
		        (SELECT publication_date,
		                publication_id,
		                COUNT() AS n
		         FROM publication
		         GROUP BY publication_date,
		                  publication_id) AS RHS ON (LHS.publication_id = RHS.n
		                                             AND LHS.book_id = RHS.publication_id)))
		ORDER BY publication_date
		
	  publication_date
	0          Pearson
No solution tests/spider/book_2/0019.yaml
No solution tests/spider/browser_web/0002.yaml
No solution tests/spider/browser_web/0003.yaml
No solution tests/spider/browser_web/0010.yaml
Error while executing solution for spider/browser_web/0011
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT client) OVER () AS count_distinct_client_
	FROM web_client_accelerator
	ORDER BY count_distinct_client_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/browser_web/0012.yaml
No solution tests/spider/browser_web/0015.yaml
No solution tests/spider/browser_web/0016.yaml
Error while executing ground truth for spider/browser_web/0018
	The column label 'name' is not unique.
No solution tests/spider/candidate_poll/0008.yaml
No solution tests/spider/candidate_poll/0010.yaml
No solution tests/spider/candidate_poll/0012.yaml
No solution tests/spider/candidate_poll/0013.yaml
No solution tests/spider/candidate_poll/0017.yaml
No solution tests/spider/candidate_poll/0020.yaml
No solution tests/spider/chinook_1/0002.yaml
No solution tests/spider/chinook_1/0003.yaml
No solution tests/spider/chinook_1/0006.yaml
No solution tests/spider/chinook_1/0010.yaml
No solution tests/spider/chinook_1/0011.yaml
No solution tests/spider/chinook_1/0012.yaml
No solution tests/spider/chinook_1/0014.yaml
No solution tests/spider/chinook_1/0016.yaml
No solution tests/spider/chinook_1/0019.yaml
No solution tests/spider/chinook_1/0021.yaml
Error while executing solution for spider/chinook_1/0024
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT city) OVER () AS count_distinct_city_
	FROM employee
	ORDER BY count_distinct_city_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/chinook_1/0026.yaml
No solution tests/spider/chinook_1/0031.yaml
No solution tests/spider/chinook_1/0032.yaml
No solution tests/spider/chinook_1/0033.yaml
No solution tests/spider/chinook_1/0037.yaml
No solution tests/spider/chinook_1/0038.yaml
No solution tests/spider/chinook_1/0041.yaml
No solution tests/spider/chinook_1/0042.yaml
No solution tests/spider/cinema/0002.yaml
No solution tests/spider/cinema/0009.yaml
No solution tests/spider/cinema/0011.yaml
No solution tests/spider/cinema/0018.yaml
No solution tests/spider/cinema/0022.yaml
No solution tests/spider/city_record/0004.yaml
No solution tests/spider/city_record/0006.yaml
No solution tests/spider/city_record/0008.yaml
No solution tests/spider/city_record/0010.yaml
No solution tests/spider/city_record/0011.yaml
No solution tests/spider/city_record/0012.yaml
No solution tests/spider/city_record/0013.yaml
No solution tests/spider/city_record/0014.yaml
Error while executing solution for spider/climbing/0005
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT country) OVER () AS count_distinct_country_
	FROM climber
	ORDER BY count_distinct_country_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/climbing/0006.yaml
No solution tests/spider/climbing/0009.yaml
Error while executing ground truth for spider/climbing/0010
	The column label 'Name' is not unique.
No solution tests/spider/climbing/0012.yaml
Error while executing solution for spider/club_1/0007
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT `n_distinct` AS `count___`
	FROM
	  (SELECT `LHS`.`stuid` AS `stuid`,
	          `LHS`.`lname` AS `lname`,
	          `LHS`.`fname` AS `fname`,
	          `LHS`.`age` AS `age`,
	          `LHS`.`sex` AS `sex`,
	          `LHS`.`major` AS `major`,
	          `LHS`.`advisor` AS `advisor`,
	          `LHS`.`city_code` AS `city_code`,
	          `LHS`.`clubid` AS `clubid`,
	          `LHS`.`position` AS `position`,
	          `LHS`.`clubname` AS `clubname`,
	          `LHS`.`clubdesc` AS `clubdesc`,
	          `LHS`.`clublocation` AS `clublocation`,
	          `RHS`.`n_distinct` AS `n_distinct`
	   FROM
	     (SELECT `LHS`.`stuid` AS `stuid`,
	             `LHS`.`lname` AS `lname`,
	             `LHS`.`fname` AS `fname`,
	             `LHS`.`age` AS `age`,
	             `LHS`.`sex` AS `sex`,
	             `LHS`.`major` AS `major`,
	             `LHS`.`advisor` AS `advisor`,
	             `LHS`.`city_code` AS `city_code`,
	             `LHS`.`clubid` AS `clubid`,
	             `LHS`.`position` AS `position`,
	             `RHS`.`clubname` AS `clubname`,
	             `RHS`.`clubdesc` AS `clubdesc`,
	             `RHS`.`clublocation` AS `clublocation`
	      FROM
	        (SELECT `LHS`.`stuid` AS `stuid`,
	                `LHS`.`lname` AS `lname`,
	                `LHS`.`fname` AS `fname`,
	                `LHS`.`age` AS `age`,
	                `LHS`.`sex` AS `sex`,
	                `LHS`.`major` AS `major`,
	                `LHS`.`advisor` AS `advisor`,
	                `LHS`.`city_code` AS `city_code`,
	                `RHS`.`clubid` AS `clubid`,
	                `RHS`.`position` AS `position`
	         FROM `student` AS `LHS`
	         INNER JOIN `member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
	      INNER JOIN
	        (SELECT *
	         FROM `club`
	         WHERE (`clubname` = 'Tennis Club')) AS `RHS` ON (`LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
	   INNER JOIN
	     (SELECT `clubid`,
	             `clubname`,
	             `clubdesc`,
	             `clublocation`,
	             COUNT(DISTINCT `clubname`) OVER () AS `n_distinct`
	      FROM `club`
	      WHERE (`clubname` = 'Tennis Club')) AS RHS ON (LHS.clubid = RHS.clubid
	                                                     AND LHS.clubname = RHS.clubname
	                                                     AND LHS.clubdesc = RHS.clubdesc
	                                                     AND LHS.clublocation = RHS.clublocation))
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Wrong output for base solution in spider/club_1/0010
	EXPECTED
		SELECT count(*)
		FROM club AS t1
		JOIN member_of_club AS t2 ON t1.clubid = t2.clubid
		JOIN student AS t3 ON t2.stuid = t3.stuid
		WHERE t3.fname = "Tracy"
		  AND t3.lname = "Kim"
	   count(*)
	0         0
	ACTUAL
		
		SELECT `n_distinct` AS `count___`
		FROM
		  (SELECT `LHS`.`clubid` AS `clubid`,
		          `LHS`.`clubname` AS `clubname`,
		          `LHS`.`clubdesc` AS `clubdesc`,
		          `LHS`.`clublocation` AS `clublocation`,
		          `LHS`.`stuid` AS `stuid`,
		          `LHS`.`position` AS `position`,
		          `LHS`.`lname` AS `lname`,
		          `LHS`.`fname` AS `fname`,
		          `LHS`.`age` AS `age`,
		          `LHS`.`sex` AS `sex`,
		          `LHS`.`major` AS `major`,
		          `LHS`.`advisor` AS `advisor`,
		          `LHS`.`city_code` AS `city_code`,
		          `RHS`.`n_distinct` AS `n_distinct`
		   FROM
		     (SELECT `LHS`.`clubid` AS `clubid`,
		             `LHS`.`clubname` AS `clubname`,
		             `LHS`.`clubdesc` AS `clubdesc`,
		             `LHS`.`clublocation` AS `clublocation`,
		             `LHS`.`stuid` AS `stuid`,
		             `LHS`.`position` AS `position`,
		             `RHS`.`lname` AS `lname`,
		             `RHS`.`fname` AS `fname`,
		             `RHS`.`age` AS `age`,
		             `RHS`.`sex` AS `sex`,
		             `RHS`.`major` AS `major`,
		             `RHS`.`advisor` AS `advisor`,
		             `RHS`.`city_code` AS `city_code`
		      FROM
		        (SELECT `LHS`.`clubid` AS `clubid`,
		                `LHS`.`clubname` AS `clubname`,
		                `LHS`.`clubdesc` AS `clubdesc`,
		                `LHS`.`clublocation` AS `clublocation`,
		                `RHS`.`stuid` AS `stuid`,
		                `RHS`.`position` AS `position`
		         FROM `club` AS `LHS`
		         INNER JOIN `member_of_club` AS `RHS` ON (`LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
		      INNER JOIN
		        (SELECT *
		         FROM `student`
		         WHERE (`fname` = 'Tracy'
		                AND `lname` != 'Kim')) AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
		   CROSS JOIN
		     (SELECT COUNT(DISTINCT `fname`) AS `n_distinct`
		      FROM `student`
		      WHERE (`fname` = 'Tracy'
		             AND `lname` != 'Kim')) AS RHS)
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___]
	Index: []
No solution tests/spider/club_1/0014.yaml
No solution tests/spider/club_1/0015.yaml
No solution tests/spider/club_1/0026.yaml
No solution tests/spider/coffee_shop/0011.yaml
No solution tests/spider/coffee_shop/0012.yaml
No solution tests/spider/college_1/0003.yaml
Wrong output for base solution in spider/college_1/0005
	EXPECTED
		SELECT count(*)
		FROM employee AS T1
		JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
		WHERE T1.EMP_LNAME = 'Graztevski'
	   count(*)
	0         3
	ACTUAL
		
		SELECT DISTINCT `n_distinct` AS `count___`
		FROM
		  (SELECT `LHS`.`class_code` AS `class_code`,
		          `LHS`.`crs_code` AS `crs_code`,
		          `LHS`.`class_section` AS `class_section`,
		          `LHS`.`class_time` AS `class_time`,
		          `LHS`.`class_room` AS `class_room`,
		          `LHS`.`prof_num` AS `prof_num`,
		          `LHS`.`emp_num` AS `emp_num`,
		          `LHS`.`emp_lname` AS `emp_lname`,
		          `LHS`.`emp_fname` AS `emp_fname`,
		          `LHS`.`emp_initial` AS `emp_initial`,
		          `LHS`.`emp_jobcode` AS `emp_jobcode`,
		          `LHS`.`emp_hiredate` AS `emp_hiredate`,
		          `LHS`.`emp_dob` AS `emp_dob`,
		          `RHS`.`n_distinct` AS `n_distinct`
		   FROM
		     (SELECT `LHS`.`class_code` AS `class_code`,
		             `LHS`.`crs_code` AS `crs_code`,
		             `LHS`.`class_section` AS `class_section`,
		             `LHS`.`class_time` AS `class_time`,
		             `LHS`.`class_room` AS `class_room`,
		             `LHS`.`prof_num` AS `prof_num`,
		             `LHS`.`emp_num` AS `emp_num`,
		             `LHS`.`emp_lname` AS `emp_lname`,
		             `LHS`.`emp_fname` AS `emp_fname`,
		             `LHS`.`emp_initial` AS `emp_initial`,
		             `LHS`.`emp_jobcode` AS `emp_jobcode`,
		             `LHS`.`emp_hiredate` AS `emp_hiredate`,
		             `LHS`.`emp_dob` AS `emp_dob`
		      FROM
		        (SELECT `LHS`.`class_code` AS `class_code`,
		                `LHS`.`crs_code` AS `crs_code`,
		                `LHS`.`class_section` AS `class_section`,
		                `LHS`.`class_time` AS `class_time`,
		                `LHS`.`class_room` AS `class_room`,
		                `LHS`.`prof_num` AS `prof_num`,
		                `RHS`.`emp_num` AS `emp_num`,
		                `RHS`.`emp_lname` AS `emp_lname`,
		                `RHS`.`emp_fname` AS `emp_fname`,
		                `RHS`.`emp_initial` AS `emp_initial`,
		                `RHS`.`emp_jobcode` AS `emp_jobcode`,
		                `RHS`.`emp_hiredate` AS `emp_hiredate`,
		                `RHS`.`emp_dob` AS `emp_dob`
		         FROM `class` AS `LHS`
		         CROSS JOIN `employee` AS `RHS`) AS `LHS`
		      INNER JOIN
		        (SELECT *
		         FROM `employee`
		         WHERE (`emp_lname` = 'Graztevski')) AS RHS ON (LHS.emp_num = RHS.emp_num
		                                                        AND LHS.emp_lname = RHS.emp_lname
		                                                        AND LHS.emp_fname = RHS.emp_fname
		                                                        AND LHS.emp_initial = RHS.emp_initial
		                                                        AND LHS.emp_jobcode = RHS.emp_jobcode
		                                                        AND LHS.emp_hiredate = RHS.emp_hiredate
		                                                        AND LHS.emp_dob = RHS.emp_dob)) AS LHS
		   INNER JOIN
		     (SELECT emp_dob,
		             emp_initial,
		             COUNT(DISTINCT emp_lname) AS n_distinct
		      FROM employee
		      GROUP BY emp_dob,
		               emp_initial) AS RHS ON (LHS.emp_initial = RHS.emp_initial
		                                       AND LHS.emp_dob = RHS.emp_dob))
		ORDER BY count___
		
	   count___
	0         1
No solution tests/spider/college_1/0020.yaml
No solution tests/spider/college_1/0021.yaml
No solution tests/spider/college_1/0025.yaml
No solution tests/spider/college_1/0026.yaml
Error while executing solution for spider/college_1/0027
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT school_code) OVER () AS count_distinct_school_code_
	FROM department
	ORDER BY count_distinct_school_code_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/college_1/0029
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT crs_code) OVER () AS count_distinct_crs_code_
	FROM class
	ORDER BY count_distinct_crs_code_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/college_1/0032
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT `n_distinct` AS `count_distinct_class_section_`
	FROM
	  (SELECT `class_code`,
	          `crs_code`,
	          `class_section`,
	          `class_time`,
	          `class_room`,
	          `prof_num`,
	          COUNT(DISTINCT `class_section`) OVER () AS `n_distinct`
	   FROM `class`)
	WHERE (`crs_code` = 'ACCT-211'
	       OR n_distinct <= class_section)
	ORDER BY count_distinct_class_section_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/college_1/0037.yaml
No solution tests/spider/college_1/0046.yaml
No solution tests/spider/college_1/0047.yaml
No solution tests/spider/college_1/0050.yaml
No solution tests/spider/college_1/0051.yaml
No solution tests/spider/college_1/0053.yaml
No solution tests/spider/college_1/0054.yaml
No solution tests/spider/college_1/0059.yaml
No solution tests/spider/college_1/0061.yaml
No solution tests/spider/college_1/0062.yaml
No solution tests/spider/college_1/0063.yaml
No solution tests/spider/college_1/0065.yaml
No solution tests/spider/college_1/0067.yaml
No solution tests/spider/college_1/0070.yaml
No solution tests/spider/college_1/0071.yaml
No solution tests/spider/college_1/0072.yaml
No solution tests/spider/college_1/0073.yaml
No solution tests/spider/college_1/0075.yaml
No solution tests/spider/college_1/0076.yaml
Wrong output for base solution in spider/college_1/0077
	EXPECTED
		SELECT T1.stu_lname
		FROM student AS T1
		JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
		WHERE T2.enroll_grade = 'A'
		  AND T2.class_code = 10018
	  stu_lname
	0    Bowser
	ACTUAL
		
		SELECT `stu_lname`
		FROM
		  (SELECT `LHS`.`class_code` AS `class_code`,
		          `LHS`.`stu_num` AS `stu_num`,
		          `LHS`.`enroll_grade` AS `enroll_grade`,
		          `LHS`.`stu_lname` AS `stu_lname`,
		          `LHS`.`stu_fname` AS `stu_fname`,
		          `LHS`.`stu_init` AS `stu_init`,
		          `LHS`.`stu_dob` AS `stu_dob`,
		          `LHS`.`stu_hrs` AS `stu_hrs`,
		          `LHS`.`stu_class` AS `stu_class`,
		          `LHS`.`stu_gpa` AS `stu_gpa`,
		          `LHS`.`stu_transfer` AS `stu_transfer`,
		          `LHS`.`dept_code` AS `dept_code`,
		          `LHS`.`stu_phone` AS `stu_phone`,
		          `LHS`.`prof_num` AS `prof_num`
		   FROM
		     (SELECT `LHS`.`class_code` AS `class_code`,
		             `LHS`.`stu_num` AS `stu_num`,
		             `LHS`.`enroll_grade` AS `enroll_grade`,
		             `RHS`.`stu_lname` AS `stu_lname`,
		             `RHS`.`stu_fname` AS `stu_fname`,
		             `RHS`.`stu_init` AS `stu_init`,
		             `RHS`.`stu_dob` AS `stu_dob`,
		             `RHS`.`stu_hrs` AS `stu_hrs`,
		             `RHS`.`stu_class` AS `stu_class`,
		             `RHS`.`stu_gpa` AS `stu_gpa`,
		             `RHS`.`stu_transfer` AS `stu_transfer`,
		             `RHS`.`dept_code` AS `dept_code`,
		             `RHS`.`stu_phone` AS `stu_phone`,
		             `RHS`.`prof_num` AS `prof_num`
		      FROM `enroll` AS `LHS`
		      INNER JOIN `student` AS `RHS` ON (`LHS`.`stu_num` = `RHS`.`stu_num`)) AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `enroll`
		      WHERE (`enroll_grade` = 'A'
		             AND class_code = 10018.0)) AS RHS ON (LHS.class_code = RHS.class_code
		                                                   AND LHS.stu_num = RHS.stu_num
		                                                   AND LHS.enroll_grade = RHS.enroll_grade))
		ORDER BY stu_lname
		
	Empty DataFrame
	Columns: [stu_lname]
	Index: []
No solution tests/spider/college_1/0078.yaml
No solution tests/spider/college_1/0081.yaml
No solution tests/spider/college_1/0082.yaml
No solution tests/spider/college_2/0006.yaml
Error while executing solution for spider/college_2/0013
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT course_id) OVER () AS count___
	FROM
	  (SELECT *
	   FROM course AS LHS
	   WHERE NOT EXISTS
	       (SELECT 1
	        FROM prereq AS RHS
	        WHERE (LHS.course_id = RHS.course_id) ))
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/college_2/0015
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT id) OVER () AS count__distinct_id_
	FROM teaches
	ORDER BY count__distinct_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/college_2/0017.yaml
No solution tests/spider/college_2/0021.yaml
No solution tests/spider/college_2/0022.yaml
No solution tests/spider/college_2/0023.yaml
No solution tests/spider/college_2/0025.yaml
No solution tests/spider/college_2/0026.yaml
No solution tests/spider/college_2/0031.yaml
No solution tests/spider/college_2/0040.yaml
No solution tests/spider/college_2/0042.yaml
No solution tests/spider/college_2/0044.yaml
No solution tests/spider/college_2/0046.yaml
No solution tests/spider/college_2/0048.yaml
No solution tests/spider/college_2/0050.yaml
No solution tests/spider/college_2/0051.yaml
No solution tests/spider/college_2/0052.yaml
No solution tests/spider/college_2/0055.yaml
No solution tests/spider/college_2/0056.yaml
No solution tests/spider/college_2/0057.yaml
No solution tests/spider/college_2/0058.yaml
No solution tests/spider/college_2/0062.yaml
No solution tests/spider/college_2/0063.yaml
No solution tests/spider/college_2/0065.yaml
No solution tests/spider/college_2/0066.yaml
No solution tests/spider/college_2/0068.yaml
No solution tests/spider/college_2/0069.yaml
No solution tests/spider/college_2/0076.yaml
No solution tests/spider/college_2/0082.yaml
No solution tests/spider/college_2/0084.yaml
Error while executing solution for spider/college_3/0007
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT `stuid`) OVER () AS `count_distinct_stuid_`
	FROM `enrolled_in`
	WHERE (`grade` = 'B')
	ORDER BY count_distinct_stuid_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/college_3/0009.yaml
No solution tests/spider/college_3/0019.yaml
No solution tests/spider/college_3/0021.yaml
No solution tests/spider/college_3/0022.yaml
No solution tests/spider/college_3/0023.yaml
No solution tests/spider/college_3/0024.yaml
No solution tests/spider/college_3/0027.yaml
No ground truth tests/spider/college_3/0028.yaml
No ground truth tests/spider/college_3/0029.yaml
No solution tests/spider/college_3/0032.yaml
No solution tests/spider/college_3/0033.yaml
No solution tests/spider/college_3/0034.yaml
No solution tests/spider/company_1/0001.yaml
Error while executing ground truth for spider/company_employee/0011
	The column label 'Name' is not unique.
Error while executing ground truth for spider/company_employee/0012
	The column label 'Name' is not unique.
No solution tests/spider/company_office/0002.yaml
No solution tests/spider/company_office/0004.yaml
Error while executing solution for spider/company_office/0007
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT industry) OVER () AS count_distinct_industry_
	FROM companies
	ORDER BY count_distinct_industry_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for spider/company_office/0010
	The column label 'name' is not unique.
No solution tests/spider/company_office/0011.yaml
No solution tests/spider/company_office/0012.yaml
No solution tests/spider/county_public_safety/0009.yaml
Error while executing ground truth for spider/county_public_safety/0010
	The column label 'Name' is not unique.
No solution tests/spider/county_public_safety/0012.yaml
No solution tests/spider/county_public_safety/0013.yaml
No solution tests/spider/cre_Doc_Control_Systems/0001.yaml
No solution tests/spider/cre_Doc_Control_Systems/0003.yaml
No solution tests/spider/cre_Doc_Control_Systems/0005.yaml
No solution tests/spider/cre_Doc_Control_Systems/0007.yaml
No solution tests/spider/cre_Doc_Control_Systems/0011.yaml
No solution tests/spider/cre_Doc_Control_Systems/0013.yaml
No solution tests/spider/cre_Doc_Control_Systems/0020.yaml
Error while executing solution for spider/cre_Doc_Control_Systems/0027
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT document_id AS count___
	FROM
	  (SELECT document_id,
	          draft_number,
	          copy_number,
	          COUNT(DISTINCT document_id) OVER () AS n_distinct
	   FROM draft_copies)
	WHERE (document_id = 2.0
	       OR n_distinct < 2.0)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/cre_Doc_Tracking_DB/0002.yaml
Wrong output for base solution in spider/cre_Doc_Tracking_DB/0010
	EXPECTED
		SELECT T2.document_type_name
		FROM All_documents AS T1
		JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code
		WHERE T1.document_name = "How to read a book"
	  document_type_name
	0               Book
	ACTUAL
		
		SELECT `document_type_name`
		FROM
		  (SELECT `document_type_code`,
		          `document_type_name`,
		          `document_type_description`,
		          `document_id`,
		          `date_stored`,
		          `document_name`,
		          `other_details`,
		          `document_type_description` AS `document_description`
		   FROM
		     (SELECT `LHS`.`document_type_code` AS `document_type_code`,
		             `LHS`.`document_type_name` AS `document_type_name`,
		             `LHS`.`document_type_description` AS `document_type_description`,
		             `RHS`.`document_id` AS `document_id`,
		             `RHS`.`date_stored` AS `date_stored`,
		             `RHS`.`document_name` AS `document_name`,
		             `RHS`.`other_details` AS `other_details`
		      FROM `ref_document_types` AS `LHS`
		      INNER JOIN `all_documents` AS `RHS` ON (`LHS`.`document_type_code` = `RHS`.`document_type_code`
		                                                 AND `LHS`.`document_type_description` = `RHS`.`document_description`)))
		WHERE (`document_name` = 'How to read a book')
		ORDER BY document_type_name
		
	Empty DataFrame
	Columns: [document_type_name]
	Index: []
No solution tests/spider/cre_Doc_Tracking_DB/0016.yaml
No solution tests/spider/cre_Doc_Tracking_DB/0026.yaml
No solution tests/spider/cre_Doc_Tracking_DB/0030.yaml
Wrong output for base solution in spider/cre_Doc_Tracking_DB/0031
	EXPECTED
		SELECT T3.location_name
		FROM All_documents AS T1
		JOIN Document_locations AS T2 ON T1.document_id = T2.document_id
		JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code
		WHERE T1.document_name = "Robin CV"
	  location_name
	0     Edinburgh
	ACTUAL
		
		SELECT `location_name`
		FROM
		  (SELECT `LHS`.`location_code` AS `location_code`,
		          `LHS`.`location_name` AS `location_name`,
		          `LHS`.`location_description` AS `location_description`,
		          `LHS`.`document_id` AS `document_id`,
		          `LHS`.`date_stored` AS `date_stored`,
		          `LHS`.`document_type_code` AS `document_type_code`,
		          `LHS`.`document_name` AS `document_name`,
		          `LHS`.`document_description` AS `document_description`,
		          `LHS`.`other_details` AS `other_details`,
		          `LHS`.`date_in_location_from` AS `date_in_location_from`,
		          `LHS`.`date_in_locaton_to` AS `date_in_locaton_to`
		   FROM
		     (SELECT `LHS`.`location_code` AS `location_code`,
		             `LHS`.`location_name` AS `location_name`,
		             `LHS`.`location_description` AS `location_description`,
		             `LHS`.`document_id` AS `document_id`,
		             `LHS`.`date_stored` AS `date_stored`,
		             `LHS`.`document_type_code` AS `document_type_code`,
		             `LHS`.`document_name` AS `document_name`,
		             `LHS`.`document_description` AS `document_description`,
		             `LHS`.`other_details` AS `other_details`,
		             `RHS`.`date_in_location_from` AS `date_in_location_from`,
		             `RHS`.`date_in_locaton_to` AS `date_in_locaton_to`
		      FROM
		        (SELECT `LHS`.`location_code` AS `location_code`,
		                `LHS`.`location_name` AS `location_name`,
		                `LHS`.`location_description` AS `location_description`,
		                `RHS`.`document_id` AS `document_id`,
		                `RHS`.`date_stored` AS `date_stored`,
		                `RHS`.`document_type_code` AS `document_type_code`,
		                `RHS`.`document_name` AS `document_name`,
		                `RHS`.`document_description` AS `document_description`,
		                `RHS`.`other_details` AS `other_details`
		         FROM `ref_locations` AS `LHS`
		         CROSS JOIN `all_documents` AS `RHS`) AS `LHS`
		      INNER JOIN `document_locations` AS `RHS` ON (`LHS`.`location_code` = `RHS`.`location_code`
		                                                      AND `LHS`.`document_id` = `RHS`.`document_id`)) AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `all_documents`
		      WHERE (`document_name` = 'Robin CV')) AS RHS ON (LHS.document_id = RHS.document_id
		                                                       AND LHS.date_stored = RHS.date_stored
		                                                       AND LHS.document_type_code = RHS.document_type_code
		                                                       AND LHS.document_name = RHS.document_name
		                                                       AND LHS.document_description = RHS.document_description
		                                                       AND LHS.other_details = RHS.other_details))
		ORDER BY location_name
		
	Empty DataFrame
	Columns: [location_name]
	Index: []
No solution tests/spider/cre_Doc_Tracking_DB/0032.yaml
No solution tests/spider/cre_Doc_Tracking_DB/0037.yaml
Error while executing ground truth for spider/cre_Doc_Tracking_DB/0038
	The column label 'Employee_Name' is not unique.
Wrong output for base solution in spider/cre_Doc_Tracking_DB/0041
	EXPECTED
		SELECT employee_id
		FROM Employees
		EXCEPT
		SELECT Destruction_Authorised_by_Employee_ID
		FROM Documents_to_be_destroyed
	   employee_id
	0           25
	1           57
	2           71
	3           99
	4          136
	5          138
	6          159
	7          173
	8          181
	ACTUAL
		
		SELECT employee_id
		FROM
		  (SELECT *
		   FROM employees AS LHS
		   WHERE NOT EXISTS
		       (SELECT 1
		        FROM
		          (SELECT document_id,
		                  destruction_authorised_by_employee_id,
		                  destroyed_by_employee_id,
		                  planned_destruction_date,
		                  actual_destruction_date,
		                  other_details,
		                  role_code,
		                  employee_name,
		                  gender_mfu,
		                  date_of_birth,
		                  destruction_authorised_by_employee_id AS employee_id
		           FROM
		             (SELECT LHS.document_id AS document_id,
		                     LHS.destruction_authorised_by_employee_id AS destruction_authorised_by_employee_id,
		                     LHS.destroyed_by_employee_id AS destroyed_by_employee_id,
		                     LHS.planned_destruction_date AS planned_destruction_date,
		                     LHS.actual_destruction_date AS actual_destruction_date,
		                     LHS.other_details AS other_details,
		                     RHS.role_code AS role_code,
		                     RHS.employee_name AS employee_name,
		                     RHS.gender_mfu AS gender_mfu,
		                     RHS.date_of_birth AS date_of_birth
		              FROM documents_to_be_destroyed AS LHS
		              INNER JOIN employees AS RHS ON (LHS.destruction_authorised_by_employee_id = RHS.employee_id
		                                                 AND LHS.other_details = RHS.other_details))) AS RHS
		        WHERE (LHS.date_of_birth = RHS.date_of_birth
		               AND LHS.gender_mfu = RHS.gender_mfu) ))
		ORDER BY employee_id
		
	    employee_id
	0            25
	1            30
	2            38
	3            55
	4            57
	5            71
	6            99
	7           123
	8           136
	9           138
	10          156
	11          159
	12          173
	13          181
	14          183
Wrong output for base solution in spider/cre_Doc_Tracking_DB/0042
	EXPECTED
		SELECT DISTINCT Destruction_Authorised_by_Employee_ID
		FROM Documents_to_be_destroyed
	   destruction_authorised_by_employee_id
	0                                     30
	1                                     38
	2                                     55
	3                                    123
	4                                    156
	5                                    183
	ACTUAL
		
		SELECT DISTINCT destruction_authorised_by_employee_id
		FROM
		  (SELECT LHS.document_id AS document_id,
		          LHS.destruction_authorised_by_employee_id AS destruction_authorised_by_employee_id,
		          LHS.destroyed_by_employee_id AS destroyed_by_employee_id,
		          LHS.planned_destruction_date AS planned_destruction_date,
		          LHS.actual_destruction_date AS actual_destruction_date,
		          LHS.other_details AS other_details,
		          RHS.document_id AS document_id_other,
		          RHS.destruction_authorised_by_employee_id AS destruction_authorised_by_employee_id_other,
		          RHS.planned_destruction_date AS planned_destruction_date_other,
		          RHS.actual_destruction_date AS actual_destruction_date_other
		   FROM documents_to_be_destroyed AS LHS
		   INNER JOIN documents_to_be_destroyed AS RHS ON (LHS.destroyed_by_employee_id = RHS.destroyed_by_employee_id
		                                                      AND LHS.other_details = RHS.other_details))
		ORDER BY destruction_authorised_by_employee_id
		
	Empty DataFrame
	Columns: [destruction_authorised_by_employee_id]
	Index: []
Wrong output for base solution in spider/cre_Doc_Tracking_DB/0043
	EXPECTED
		SELECT DISTINCT Destroyed_by_Employee_ID
		FROM Documents_to_be_destroyed
	   destroyed_by_employee_id
	0                        38
	1                        55
	2                        99
	3                       136
	4                       138
	5                       156
	6                       173
	ACTUAL
		
		SELECT DISTINCT destroyed_by_employee_id
		FROM
		  (SELECT LHS.document_id AS document_id,
		          LHS.destruction_authorised_by_employee_id AS destruction_authorised_by_employee_id,
		          LHS.destroyed_by_employee_id AS destroyed_by_employee_id,
		          LHS.planned_destruction_date AS planned_destruction_date,
		          LHS.actual_destruction_date AS actual_destruction_date,
		          LHS.other_details AS other_details,
		          RHS.document_id AS document_id_other,
		          RHS.destruction_authorised_by_employee_id AS destruction_authorised_by_employee_id_other,
		          RHS.planned_destruction_date AS planned_destruction_date_other,
		          RHS.actual_destruction_date AS actual_destruction_date_other
		   FROM documents_to_be_destroyed AS LHS
		   INNER JOIN documents_to_be_destroyed AS RHS ON (LHS.destroyed_by_employee_id = RHS.destroyed_by_employee_id
		                                                      AND LHS.other_details = RHS.other_details))
		ORDER BY destroyed_by_employee_id
		
	Empty DataFrame
	Columns: [destroyed_by_employee_id]
	Index: []
Wrong output for base solution in spider/cre_Doc_Tracking_DB/0044
	EXPECTED
		SELECT employee_id
		FROM Employees
		EXCEPT
		SELECT Destroyed_by_Employee_ID
		FROM Documents_to_be_destroyed
	   employee_id
	0           25
	1           30
	2           57
	3           71
	4          123
	5          159
	6          181
	7          183
	ACTUAL
		
		SELECT employee_id
		FROM
		  (SELECT *
		   FROM employees AS LHS
		   WHERE NOT EXISTS
		       (SELECT 1
		        FROM
		          (SELECT employee_id,
		                  role_code,
		                  employee_name,
		                  gender_mfu,
		                  date_of_birth,
		                  other_details,
		                  document_id,
		                  destruction_authorised_by_employee_id,
		                  planned_destruction_date,
		                  actual_destruction_date,
		                  other_details_other,
		                  employee_id AS destroyed_by_employee_id
		           FROM
		             (SELECT LHS.employee_id AS employee_id,
		                     LHS.role_code AS role_code,
		                     LHS.employee_name AS employee_name,
		                     LHS.gender_mfu AS gender_mfu,
		                     LHS.date_of_birth AS date_of_birth,
		                     LHS.other_details AS other_details,
		                     RHS.document_id AS document_id,
		                     RHS.destruction_authorised_by_employee_id AS destruction_authorised_by_employee_id,
		                     RHS.planned_destruction_date AS planned_destruction_date,
		                     RHS.actual_destruction_date AS actual_destruction_date,
		                     RHS.other_details AS other_details_other
		              FROM employees AS LHS
		              INNER JOIN documents_to_be_destroyed AS RHS ON (LHS.employee_id = RHS.destroyed_by_employee_id))) AS RHS
		        WHERE (LHS.date_of_birth = RHS.date_of_birth
		               AND LHS.other_details = RHS.other_details) ))
		ORDER BY employee_id
		
	    employee_id
	0            25
	1            30
	2            38
	3            55
	4            57
	5            71
	6            99
	7           123
	8           136
	9           138
	10          156
	11          159
	12          173
	13          181
	14          183
No solution tests/spider/cre_Doc_Tracking_DB/0045.yaml
No solution tests/spider/cre_Docs_and_Epenses/0004.yaml
Wrong output for base solution in spider/cre_Docs_and_Epenses/0010
	EXPECTED
		SELECT document_id,
		       document_name
		FROM Documents
	    document_id             document_name
	0            29        Review on UK files
	1            42  Review on Canadian files
	2            57    Review on French files
	3           121       Review on USA files
	4           181  Chapter on private files
	5           192         Book on USA files
	6           226        Review on UK files
	7           227             Deontae files
	8           240               Winona Book
	9           300      Trenton Presentation
	10          309                   Noel CV
	11          318                 King Book
	12          367               Jevon Paper
	13          371        Katheryn statement
	14          383        Review on UK files
	ACTUAL
		
		SELECT DISTINCT document_id,
		                document_name
		FROM
		  (SELECT LHS.document_id AS document_id,
		          LHS.document_type_code AS document_type_code,
		          LHS.project_id AS project_id,
		          LHS.document_date AS document_date,
		          LHS.document_name AS document_name,
		          LHS.document_description AS document_description,
		          LHS.other_details AS other_details,
		          RHS.document_id AS document_id_other,
		          RHS.project_id AS project_id_other,
		          RHS.document_date AS document_date_other,
		          RHS.document_name AS document_name_other,
		          RHS.document_description AS document_description_other
		   FROM documents AS LHS
		   INNER JOIN documents AS RHS ON (LHS.document_type_code = RHS.document_type_code
		                                      AND LHS.document_description = RHS.other_details))
		ORDER BY document_id
		
	Empty DataFrame
	Columns: [document_id, document_name]
	Index: []
No solution tests/spider/cre_Docs_and_Epenses/0018.yaml
No solution tests/spider/cre_Docs_and_Epenses/0021.yaml
No solution tests/spider/cre_Docs_and_Epenses/0025.yaml
Wrong output for base solution in spider/cre_Docs_and_Epenses/0027
	EXPECTED
		SELECT T1.project_details
		FROM Projects AS T1
		JOIN Documents AS T2 ON T1.project_id = T2.project_id
		WHERE T2.document_name = "King Book"
	          project_details
	0  Human Resource project
	ACTUAL
		
		SELECT `project_details`
		FROM
		  (SELECT `LHS`.`project_id` AS `project_id`,
		          `LHS`.`project_details` AS `project_details`,
		          `LHS`.`document_id` AS `document_id`,
		          `LHS`.`document_type_code` AS `document_type_code`,
		          `LHS`.`document_date` AS `document_date`,
		          `LHS`.`document_name` AS `document_name`,
		          `LHS`.`document_description` AS `document_description`,
		          `LHS`.`other_details` AS `other_details`
		   FROM
		     (SELECT `LHS`.`project_id` AS `project_id`,
		             `LHS`.`project_details` AS `project_details`,
		             `RHS`.`document_id` AS `document_id`,
		             `RHS`.`document_type_code` AS `document_type_code`,
		             `RHS`.`document_date` AS `document_date`,
		             `RHS`.`document_name` AS `document_name`,
		             `RHS`.`document_description` AS `document_description`,
		             `RHS`.`other_details` AS `other_details`
		      FROM `projects` AS `LHS`
		      INNER JOIN `documents` AS `RHS` ON (`LHS`.`project_id` = `RHS`.`project_id`)) AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `documents`
		      WHERE (`document_name` = 'King Book')) AS RHS ON (LHS.project_id = RHS.project_id
		                                                        AND LHS.document_id = RHS.document_id
		                                                        AND LHS.document_type_code = RHS.document_type_code
		                                                        AND LHS.document_date = RHS.document_date
		                                                        AND LHS.document_name = RHS.document_name
		                                                        AND LHS.document_description = RHS.document_description
		                                                        AND LHS.other_details = RHS.other_details))
		ORDER BY project_details
		
	Empty DataFrame
	Columns: [project_details]
	Index: []
No solution tests/spider/cre_Docs_and_Epenses/0029.yaml
No solution tests/spider/cre_Docs_and_Epenses/0039.yaml
No solution tests/spider/cre_Docs_and_Epenses/0042.yaml
Wrong output for base solution in spider/cre_Drama_Workshop_Groups/0012
	EXPECTED
		SELECT Product_Name
		FROM Products
		ORDER BY Product_Price ASC
	   product_name
	0       dinning
	1       dinning
	2       dinning
	3          film
	4          film
	5          film
	6          film
	7          film
	8          film
	9         photo
	10        photo
	11        photo
	12        photo
	13        photo
	14        photo
	ACTUAL
		
		SELECT product_name
		FROM
		  (SELECT LHS.product_id AS product_id,
		          LHS.product_name AS product_name,
		          LHS.product_price AS product_price,
		          LHS.product_description AS product_description,
		          LHS.other_product_service_details AS other_product_service_details,
		          RHS.product_id AS product_id_other,
		          RHS.product_name AS product_name_other,
		          RHS.other_product_service_details AS other_product_service_details_other
		   FROM products AS LHS
		   INNER JOIN products AS RHS ON (LHS.product_price = RHS.product_price
		                                     AND LHS.other_product_service_details = RHS.product_description))
		ORDER BY product_name
		
	Empty DataFrame
	Columns: [product_name]
	Index: []
No solution tests/spider/cre_Drama_Workshop_Groups/0021.yaml
Wrong output for base solution in spider/cre_Drama_Workshop_Groups/0026
	EXPECTED
		SELECT sum(T1.Order_Quantity)
		FROM ORDER_ITEMS AS T1
		JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
		WHERE T2.Product_Name = "photo"
	   sum(t1.order_quantity)
	0                       3
	ACTUAL
		
		SELECT `sumorder_quantity` AS `sum_t1_order_quantity_`
		FROM
		  (SELECT `product_name`,
		          SUM(`order_quantity`) AS `sumorder_quantity`
		   FROM
		     (SELECT `LHS`.`product_id` AS `product_id`,
		             `LHS`.`product_name` AS `product_name`,
		             `LHS`.`product_price` AS `product_price`,
		             `LHS`.`product_description` AS `product_description`,
		             `LHS`.`other_product_service_details` AS `other_product_service_details`,
		             `LHS`.`order_item_id` AS `order_item_id`,
		             `LHS`.`order_id` AS `order_id`,
		             `LHS`.`order_quantity` AS `order_quantity`,
		             `LHS`.`other_item_details` AS `other_item_details`
		      FROM
		        (SELECT `LHS`.`product_id` AS `product_id`,
		                `LHS`.`product_name` AS `product_name`,
		                `LHS`.`product_price` AS `product_price`,
		                `LHS`.`product_description` AS `product_description`,
		                `LHS`.`other_product_service_details` AS `other_product_service_details`,
		                `RHS`.`order_item_id` AS `order_item_id`,
		                `RHS`.`order_id` AS `order_id`,
		                `RHS`.`order_quantity` AS `order_quantity`,
		                `RHS`.`other_item_details` AS `other_item_details`
		         FROM `products` AS `LHS`
		         INNER JOIN `order_items` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`)) AS `LHS`
		      INNER JOIN
		        (SELECT *
		         FROM `products`
		         WHERE (`product_name` = 'photo')) AS RHS ON (LHS.product_id = RHS.product_id
		                                                      AND LHS.product_name = RHS.product_name
		                                                      AND LHS.product_price = RHS.product_price
		                                                      AND LHS.product_description = RHS.product_description
		                                                      AND LHS.other_product_service_details = RHS.other_product_service_details))
		   GROUP BY product_name)
		ORDER BY sum_t1_order_quantity_
		
	Empty DataFrame
	Columns: [sum_t1_order_quantity_]
	Index: []
Wrong output for base solution in spider/cre_Drama_Workshop_Groups/0028
	EXPECTED
		SELECT T1.Actual_Delivery_Date
		FROM Customer_Orders AS T1
		JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID
		WHERE T2.Order_Quantity = 1
	  actual_delivery_date
	0  1990-11-14 03:53:06
	1  1992-07-21 22:11:11
	2  1993-09-16 23:20:05
	3  1993-09-16 23:20:05
	4  1998-08-22 17:57:32
	5  2004-03-27 23:30:12
	6  2004-03-27 23:30:12
	7  2011-04-13 07:15:35
	8  2015-06-20 20:51:17
	ACTUAL
		
		SELECT actual_delivery_date
		FROM
		  (SELECT LHS.order_id AS order_id,
		          LHS.customer_id AS customer_id,
		          LHS.store_id AS store_id,
		          LHS.order_date AS order_date,
		          LHS.planned_delivery_date AS planned_delivery_date,
		          LHS.actual_delivery_date AS actual_delivery_date,
		          LHS.other_order_details AS other_order_details,
		          LHS.order_item_id AS order_item_id,
		          LHS.product_id AS product_id,
		          LHS.order_quantity AS order_quantity,
		          LHS.other_item_details AS other_item_details
		   FROM
		     (SELECT LHS.order_id AS order_id,
		             LHS.customer_id AS customer_id,
		             LHS.store_id AS store_id,
		             LHS.order_date AS order_date,
		             LHS.planned_delivery_date AS planned_delivery_date,
		             LHS.actual_delivery_date AS actual_delivery_date,
		             LHS.other_order_details AS other_order_details,
		             RHS.order_item_id AS order_item_id,
		             RHS.product_id AS product_id,
		             RHS.order_quantity AS order_quantity,
		             RHS.other_item_details AS other_item_details
		      FROM customer_orders AS LHS
		      INNER JOIN order_items AS RHS ON (LHS.order_id = RHS.order_id)) AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM order_items
		      WHERE (order_quantity = 1.0)) AS RHS ON (LHS.order_id = RHS.order_id
		                                               AND LHS.order_item_id = RHS.order_item_id
		                                               AND LHS.product_id = RHS.product_id
		                                               AND LHS.order_quantity = RHS.order_quantity
		                                               AND LHS.other_item_details = RHS.other_item_details))
		ORDER BY actual_delivery_date
		
	Empty DataFrame
	Columns: [actual_delivery_date]
	Index: []
Wrong output for base solution in spider/cre_Drama_Workshop_Groups/0029
	EXPECTED
		SELECT T1.Order_Date
		FROM Customer_Orders AS T1
		JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID
		JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID
		WHERE T3.Product_price > 1000
	             order_date
	0   1981-06-20 16:29:43
	1   1981-06-20 16:29:43
	2   1985-05-29 01:20:18
	3   1988-11-13 15:42:13
	4   1994-08-03 12:34:58
	5   1998-03-10 14:01:00
	6   1999-11-20 18:48:05
	7   1999-11-20 18:48:05
	8   2000-07-03 21:41:50
	9   2008-04-02 18:00:15
	10  2011-01-05 08:01:07
	11  2011-01-05 08:01:07
	12  2011-01-05 08:01:07
	13  2014-07-10 10:56:01
	ACTUAL
		
		SELECT order_date
		FROM
		  (SELECT LHS.product_id AS product_id,
		          LHS.product_name AS product_name,
		          LHS.product_price AS product_price,
		          LHS.product_description AS product_description,
		          LHS.other_product_service_details AS other_product_service_details,
		          LHS.order_id AS order_id,
		          LHS.customer_id AS customer_id,
		          LHS.store_id AS store_id,
		          LHS.order_date AS order_date,
		          LHS.planned_delivery_date AS planned_delivery_date,
		          LHS.actual_delivery_date AS actual_delivery_date,
		          LHS.other_order_details AS other_order_details,
		          LHS.order_item_id AS order_item_id,
		          LHS.order_quantity AS order_quantity,
		          LHS.other_item_details AS other_item_details
		   FROM
		     (SELECT LHS.product_id AS product_id,
		             LHS.product_name AS product_name,
		             LHS.product_price AS product_price,
		             LHS.product_description AS product_description,
		             LHS.other_product_service_details AS other_product_service_details,
		             LHS.order_id AS order_id,
		             LHS.customer_id AS customer_id,
		             LHS.store_id AS store_id,
		             LHS.order_date AS order_date,
		             LHS.planned_delivery_date AS planned_delivery_date,
		             LHS.actual_delivery_date AS actual_delivery_date,
		             LHS.other_order_details AS other_order_details,
		             RHS.order_item_id AS order_item_id,
		             RHS.order_quantity AS order_quantity,
		             RHS.other_item_details AS other_item_details
		      FROM
		        (SELECT LHS.product_id AS product_id,
		                LHS.product_name AS product_name,
		                LHS.product_price AS product_price,
		                LHS.product_description AS product_description,
		                LHS.other_product_service_details AS other_product_service_details,
		                RHS.order_id AS order_id,
		                RHS.customer_id AS customer_id,
		                RHS.store_id AS store_id,
		                RHS.order_date AS order_date,
		                RHS.planned_delivery_date AS planned_delivery_date,
		                RHS.actual_delivery_date AS actual_delivery_date,
		                RHS.other_order_details AS other_order_details
		         FROM products AS LHS
		         CROSS JOIN customer_orders AS RHS) AS LHS
		      INNER JOIN order_items AS RHS ON (LHS.product_id = RHS.product_id
		                                           AND LHS.order_id = RHS.order_id)) AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM products
		      WHERE (product_price > 1000.0)) AS RHS ON (LHS.product_id = RHS.product_id
		                                                 AND LHS.product_name = RHS.product_name
		                                                 AND LHS.product_price = RHS.product_price
		                                                 AND LHS.product_description = RHS.product_description
		                                                 AND LHS.other_product_service_details = RHS.other_product_service_details))
		ORDER BY order_date
		
	Empty DataFrame
	Columns: [order_date]
	Index: []
No solution tests/spider/cre_Drama_Workshop_Groups/0034.yaml
No solution tests/spider/cre_Drama_Workshop_Groups/0035.yaml
No solution tests/spider/cre_Drama_Workshop_Groups/0038.yaml
No solution tests/spider/cre_Drama_Workshop_Groups/0041.yaml
Error while executing ground truth for spider/cre_Theme_park/0002
	'<' not supported between instances of 'str' and 'float'
No solution tests/spider/cre_Theme_park/0003.yaml
No solution tests/spider/cre_Theme_park/0005.yaml
Error while executing ground truth for spider/cre_Theme_park/0006
	'<' not supported between instances of 'str' and 'float'
No solution tests/spider/cre_Theme_park/0007.yaml
No solution tests/spider/cre_Theme_park/0010.yaml
No solution tests/spider/cre_Theme_park/0012.yaml
Wrong output for base solution in spider/cre_Theme_park/0017
	EXPECTED
		SELECT T2.Name
		FROM PHOTOS AS T1
		JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
		WHERE T1.Name = "game1"
	                    name
	0  impressions de France
	ACTUAL
		
		SELECT `name`
		FROM
		  (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
		          `LHS`.`attraction_type_code` AS `attraction_type_code`,
		          `LHS`.`location_id` AS `location_id`,
		          `LHS`.`how_to_get_there` AS `how_to_get_there`,
		          `LHS`.`name` AS `name`,
		          `LHS`.`description` AS `description`,
		          `LHS`.`opening_hours` AS `opening_hours`,
		          `LHS`.`other_details` AS `other_details`,
		          `RHS`.`photo_id` AS `photo_id`,
		          `RHS`.`name` AS `name_other`,
		          `RHS`.`description` AS `description_other`,
		          `RHS`.`filename` AS `filename`
		   FROM `tourist_attractions` AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `photos`
		      WHERE (`name` = 'game1')) AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id
		                                           AND LHS.opening_hours = RHS.other_details))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name]
	Index: []
Wrong output for base solution in spider/cre_Theme_park/0018
	EXPECTED
		SELECT T1.Name,
		       T1.Description
		FROM PHOTOS AS T1
		JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
		WHERE T2.Name = "film festival"
	    name description
	0  park1        None
	ACTUAL
		
		SELECT `name_other` AS `name`,
		       `opening_hours` AS `description`
		FROM
		  (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
		          `LHS`.`attraction_type_code` AS `attraction_type_code`,
		          `LHS`.`location_id` AS `location_id`,
		          `LHS`.`how_to_get_there` AS `how_to_get_there`,
		          `LHS`.`name` AS `name`,
		          `LHS`.`description` AS `description`,
		          `LHS`.`opening_hours` AS `opening_hours`,
		          `LHS`.`other_details` AS `other_details`,
		          `RHS`.`photo_id` AS `photo_id`,
		          `RHS`.`name` AS `name_other`,
		          `RHS`.`filename` AS `filename`,
		          `RHS`.`other_details` AS `other_details_other`
		   FROM
		     (SELECT *
		      FROM `tourist_attractions`
		      WHERE (`name` = 'film festival')) AS LHS
		   INNER JOIN photos AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id
		                                   AND LHS.opening_hours = RHS.description))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name, description]
	Index: []
Wrong output for base solution in spider/cre_Theme_park/0019
	EXPECTED
		SELECT T1.Royal_Family_Details,
		       T2.How_to_Get_There
		FROM ROYAL_FAMILY AS T1
		JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID
	  royal_family_details how_to_get_there
	0                 None              bus
	1                 None          shuttle
	ACTUAL
		
		SELECT description AS royal_family_details,
		       how_to_get_there
		FROM
		  (SELECT tourist_attraction_id,
		          attraction_type_code,
		          location_id,
		          how_to_get_there,
		          name,
		          description,
		          opening_hours,
		          other_details,
		          tourist_attraction_id AS royal_family_id
		   FROM
		     (SELECT LHS.tourist_attraction_id AS tourist_attraction_id,
		             LHS.attraction_type_code AS attraction_type_code,
		             LHS.location_id AS location_id,
		             LHS.how_to_get_there AS how_to_get_there,
		             LHS.name AS name,
		             LHS.description AS description,
		             LHS.opening_hours AS opening_hours,
		             LHS.other_details AS other_details
		      FROM tourist_attractions AS LHS
		      INNER JOIN royal_family AS RHS ON (LHS.tourist_attraction_id = RHS.royal_family_id
		                                            AND LHS.other_details = RHS.royal_family_details)))
		ORDER BY royal_family_details
		
	Empty DataFrame
	Columns: [royal_family_details, how_to_get_there]
	Index: []
Wrong output for base solution in spider/cre_Theme_park/0021
	EXPECTED
		SELECT T1.Name
		FROM STAFF AS T1
		JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
		WHERE T2.Name = "US museum"
	      name
	0    Kaela
	1  Trinity
	2  Whitney
	ACTUAL
		
		SELECT `name`
		FROM
		  (SELECT `LHS`.`staff_id` AS `staff_id`,
		          `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
		          `LHS`.`name` AS `name`,
		          `LHS`.`other_details` AS `other_details`,
		          `RHS`.`attraction_type_code` AS `attraction_type_code`,
		          `RHS`.`location_id` AS `location_id`,
		          `RHS`.`how_to_get_there` AS `how_to_get_there`,
		          `RHS`.`name` AS `name_other`,
		          `RHS`.`opening_hours` AS `opening_hours`,
		          `RHS`.`other_details` AS `other_details_other`
		   FROM `staff` AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `tourist_attractions`
		      WHERE (`name` = 'US museum')) AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id
		                                               AND LHS.other_details = RHS.description))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name]
	Index: []
No ground truth tests/spider/cre_Theme_park/0025.yaml
No solution tests/spider/cre_Theme_park/0026.yaml
No solution tests/spider/cre_Theme_park/0027.yaml
Wrong output for base solution in spider/cre_Theme_park/0029
	EXPECTED
		SELECT other_hotel_details
		FROM HOTELS
		ORDER BY price_range DESC
		LIMIT 3
	  other_hotel_details
	0                None
	1                None
	2                None
	ACTUAL
		
		SELECT pets_allowed_yn AS other_hotel_details
		FROM
		  (SELECT LHS.hotel_id AS hotel_id,
		          LHS.star_rating_code AS star_rating_code,
		          LHS.pets_allowed_yn AS pets_allowed_yn,
		          LHS.price_range AS price_range,
		          LHS.other_hotel_details AS other_hotel_details,
		          RHS.star_rating_code AS star_rating_code_other,
		          RHS.pets_allowed_yn AS pets_allowed_yn_other,
		          RHS.other_hotel_details AS other_hotel_details_other
		   FROM hotels AS LHS
		   INNER JOIN hotels AS RHS ON (LHS.hotel_id = RHS.hotel_id
		                                   AND LHS.pets_allowed_yn = RHS.price_range))
		ORDER BY other_hotel_details
		
	  other_hotel_details
	0                    
	1                    
	2                    
No solution tests/spider/cre_Theme_park/0030.yaml
Wrong output for base solution in spider/cre_Theme_park/0034
	EXPECTED
		SELECT T1.Name,
		       T2.Tourist_Attraction_ID,
		       COUNT(*)
		FROM Tourist_Attractions AS T1
		JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
		GROUP BY T2.Tourist_Attraction_ID
	                name  tourist_attraction_id  count(*)
	0         UK gallery                   2701         1
	1    flying elephant                   5076         1
	2          fun shops                   9360         1
	3    history gallery                   6653         1
	4    presidents hall                   8429         1
	5          fun games                   6523         2
	6            parking                   9919         2
	7      jungle cruise                   8698         3
	8          US museum                   6476         4
	9  exploration trial                   6852         4
	ACTUAL
		
		SELECT name,
		       tourist_attraction_id,
		       n AS count___
		FROM
		  (SELECT LHS.tourist_attraction_id AS tourist_attraction_id,
		          LHS.attraction_type_code AS attraction_type_code,
		          LHS.location_id AS location_id,
		          LHS.how_to_get_there AS how_to_get_there,
		          LHS.name AS name,
		          LHS.description AS description,
		          LHS.opening_hours AS opening_hours,
		          LHS.other_details AS other_details,
		          RHS.n AS n
		   FROM tourist_attractions AS LHS
		   INNER JOIN
		     (SELECT tourist_attraction_id,
		             visit_details,
		             COUNT() AS n
		      FROM visits
		      GROUP BY tourist_attraction_id,
		               visit_details) AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id
		                                         AND LHS.opening_hours = RHS.visit_details))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name, tourist_attraction_id, count___]
	Index: []
Wrong output for base solution in spider/cre_Theme_park/0036
	EXPECTED
		SELECT T1.Name,
		       T1.Tourist_Attraction_ID
		FROM Tourist_Attractions AS T1
		JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
		GROUP BY T2.Tourist_Attraction_ID
		HAVING count(*) <= 1
	              name  tourist_attraction_id
	0       UK gallery                   2701
	1  flying elephant                   5076
	2        fun shops                   9360
	3  history gallery                   6653
	4  presidents hall                   8429
	ACTUAL
		
		SELECT name,
		       tourist_attraction_id
		FROM
		  (SELECT tourist_attraction_id,
		          attraction_type_code,
		          location_id,
		          how_to_get_there,
		          name,
		          description,
		          opening_hours,
		          other_details,
		          n,
		          opening_hours AS visit_details
		   FROM
		     (SELECT LHS.tourist_attraction_id AS tourist_attraction_id,
		             LHS.attraction_type_code AS attraction_type_code,
		             LHS.location_id AS location_id,
		             LHS.how_to_get_there AS how_to_get_there,
		             LHS.name AS name,
		             LHS.description AS description,
		             LHS.opening_hours AS opening_hours,
		             LHS.other_details AS other_details,
		             RHS.n AS n
		      FROM tourist_attractions AS LHS
		      INNER JOIN
		        (SELECT tourist_attraction_id,
		                visit_details,
		                COUNT() AS n
		         FROM visits
		         GROUP BY tourist_attraction_id,
		                  visit_details) AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id
		                                            AND LHS.opening_hours = RHS.visit_details)))
		WHERE (n <= 1.0)
		ORDER BY name
		
	Empty DataFrame
	Columns: [name, tourist_attraction_id]
	Index: []
No solution tests/spider/cre_Theme_park/0040.yaml
No ground truth tests/spider/cre_Theme_park/0041.yaml
No solution tests/spider/csu_1/0007.yaml
No solution tests/spider/csu_1/0008.yaml
No solution tests/spider/csu_1/0009.yaml
No solution tests/spider/csu_1/0013.yaml
Wrong output for base solution in spider/csu_1/0015
	EXPECTED
		SELECT avg(campusfee)
		FROM csu_fees
		WHERE YEAR = 2005
	  avg(campusfee)
	0           None
	ACTUAL
		
		SELECT DISTINCT year_other AS avg_campusfee_
		FROM
		  (SELECT LHS.campus AS campus,
		          LHS.year AS YEAR,
		          LHS.campusfee AS campusfee,
		          RHS.year AS year_other,
		          RHS.meancampusfee AS meancampusfee
		   FROM csu_fees AS LHS
		   CROSS JOIN
		     (SELECT YEAR,
		             AVG(campusfee) AS meancampusfee
		      FROM csu_fees
		      WHERE (YEAR >= 2005.0
		             AND campusfee != 2005.0)
		      GROUP BY YEAR) AS RHS)
		WHERE (YEAR < campusfee
		       OR YEAR > year_other)
		ORDER BY avg_campusfee_
		
	Empty DataFrame
	Columns: [avg_campusfee_]
	Index: []
No solution tests/spider/csu_1/0016.yaml
No solution tests/spider/csu_1/0017.yaml
No solution tests/spider/csu_1/0018.yaml
No solution tests/spider/csu_1/0019.yaml
No solution tests/spider/csu_1/0021.yaml
No solution tests/spider/csu_1/0022.yaml
No solution tests/spider/csu_1/0024.yaml
No solution tests/spider/csu_1/0025.yaml
No solution tests/spider/csu_1/0027.yaml
No solution tests/spider/csu_1/0029.yaml
No solution tests/spider/csu_1/0030.yaml
Error while executing solution for spider/culture_company/0012
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT director) OVER () AS count__distinct_director_
	FROM movie
	ORDER BY count__distinct_director_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/culture_company/0013.yaml
No solution tests/spider/culture_company/0014.yaml
No solution tests/spider/culture_company/0016.yaml
No solution tests/spider/culture_company/0018.yaml
No solution tests/spider/customer_complaints/0003.yaml
No solution tests/spider/customer_complaints/0005.yaml
No solution tests/spider/customer_complaints/0006.yaml
No solution tests/spider/customer_complaints/0007.yaml
No solution tests/spider/customer_complaints/0009.yaml
No solution tests/spider/customer_complaints/0014.yaml
No solution tests/spider/customer_complaints/0016.yaml
No solution tests/spider/customer_complaints/0018.yaml
Error while executing solution for spider/customer_complaints/0019
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT complaint_type_code) OVER () AS count_distinct_complaint_type_code_
	FROM complaints
	ORDER BY count_distinct_complaint_type_code_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/customer_complaints/0022.yaml
No solution tests/spider/customer_complaints/0023.yaml
Error while executing solution for spider/customer_deliveries/0004
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT payment_method) OVER () AS count_distinct_payment_method_
	FROM customers
	ORDER BY count_distinct_payment_method_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/customer_deliveries/0007.yaml
No solution tests/spider/customer_deliveries/0011.yaml
No solution tests/spider/customer_deliveries/0012.yaml
No solution tests/spider/customer_deliveries/0015.yaml
No solution tests/spider/customers_and_addresses/0001.yaml
No solution tests/spider/customers_and_addresses/0006.yaml
No solution tests/spider/customers_and_addresses/0007.yaml
No solution tests/spider/customers_and_addresses/0008.yaml
No solution tests/spider/customers_and_addresses/0009.yaml
No solution tests/spider/customers_and_addresses/0010.yaml
No solution tests/spider/customers_and_addresses/0011.yaml
No solution tests/spider/customers_and_addresses/0015.yaml
No solution tests/spider/customers_and_addresses/0016.yaml
No solution tests/spider/customers_and_addresses/0017.yaml
Wrong output for base solution in spider/customers_and_addresses/0018
	EXPECTED
		SELECT city
		FROM addresses
		WHERE zip_postcode = 255
	          city
	0  Reingertown
	ACTUAL
		
		SELECT city
		FROM addresses
		WHERE (zip_postcode = 255.0)
		ORDER BY city
		
	Empty DataFrame
	Columns: [city]
	Index: []
No solution tests/spider/customers_and_addresses/0019.yaml
No solution tests/spider/customers_and_addresses/0024.yaml
No solution tests/spider/customers_and_addresses/0025.yaml
Error while executing solution for spider/customers_and_addresses/0036
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `sumorder_quantity` AS `sum_t2_order_quantity_`
	FROM
	  (SELECT SUM(`order_quantity`) AS `sumorder_quantity`
	   FROM
	     (SELECT `LHS`.`order_id` AS `order_id`,
	             `LHS`.`customer_id` AS `customer_id`,
	             `LHS`.`order_status` AS `order_status`,
	             `LHS`.`order_date` AS `order_date`,
	             `LHS`.`order_details` AS `order_details`,
	             `RHS`.`product_id` AS `product_id`,
	             `RHS`.`order_quantity` AS `order_quantity`
	      FROM
	        (SELECT *
	         FROM `customer_orders`
	         WHERE (`order_date` < parse_datetime('2018-03-17 07:13:53'))) AS LHS
	      INNER JOIN order_items AS RHS ON (LHS.order_id = RHS.order_id)))
	ORDER BY sum_t2_order_quantity_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Wrong output for base solution in spider/customers_and_addresses/0037
	EXPECTED
		SELECT t1.customer_name
		FROM customers AS t1
		JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
		ORDER BY t2.order_date DESC
		LIMIT 1
	  customer_name
	0  Eunice Morar
	ACTUAL
		
		SELECT DISTINCT customer_name
		FROM
		  (SELECT LHS.customer_id AS customer_id,
		          LHS.payment_method AS payment_method,
		          LHS.customer_name AS customer_name,
		          LHS.date_became_customer AS date_became_customer,
		          LHS.other_customer_details AS other_customer_details,
		          LHS.order_id AS order_id,
		          LHS.order_status AS order_status,
		          LHS.order_date AS order_date,
		          LHS.order_details AS order_details,
		          LHS.maxorder_date AS maxorder_date,
		          RHS.customer_id AS customer_id_other,
		          RHS.payment_method AS payment_method_other,
		          RHS.customer_name AS customer_name_other,
		          RHS.date_became_customer AS date_became_customer_other,
		          RHS.other_customer_details AS other_customer_details_other,
		          RHS.order_id AS order_id_other,
		          RHS.order_status AS order_status_other,
		          RHS.order_date AS order_date_other,
		          RHS.order_details AS order_details_other,
		          RHS.maxorder_date AS maxorder_date_other
		   FROM
		     (SELECT LHS.customer_id AS customer_id,
		             LHS.payment_method AS payment_method,
		             LHS.customer_name AS customer_name,
		             LHS.date_became_customer AS date_became_customer,
		             LHS.other_customer_details AS other_customer_details,
		             LHS.order_id AS order_id,
		             LHS.order_status AS order_status,
		             LHS.order_date AS order_date,
		             LHS.order_details AS order_details,
		             RHS.maxorder_date AS maxorder_date
		      FROM
		        (SELECT LHS.customer_id AS customer_id,
		                LHS.payment_method AS payment_method,
		                LHS.customer_name AS customer_name,
		                LHS.date_became_customer AS date_became_customer,
		                LHS.other_customer_details AS other_customer_details,
		                RHS.order_id AS order_id,
		                RHS.order_status AS order_status,
		                RHS.order_date AS order_date,
		                RHS.order_details AS order_details
		         FROM customers AS LHS
		         INNER JOIN customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
		      INNER JOIN
		        (SELECT order_details,
		                MAX(order_date) AS maxorder_date
		         FROM customer_orders
		         GROUP BY order_details) AS RHS ON (LHS.order_details = RHS.order_details)) AS LHS
		   CROSS JOIN
		     (SELECT LHS.customer_id AS customer_id,
		             LHS.payment_method AS payment_method,
		             LHS.customer_name AS customer_name,
		             LHS.date_became_customer AS date_became_customer,
		             LHS.other_customer_details AS other_customer_details,
		             LHS.order_id AS order_id,
		             LHS.order_status AS order_status,
		             LHS.order_date AS order_date,
		             LHS.order_details AS order_details,
		             RHS.maxorder_date AS maxorder_date
		      FROM
		        (SELECT LHS.customer_id AS customer_id,
		                LHS.payment_method AS payment_method,
		                LHS.customer_name AS customer_name,
		                LHS.date_became_customer AS date_became_customer,
		                LHS.other_customer_details AS other_customer_details,
		                RHS.order_id AS order_id,
		                RHS.order_status AS order_status,
		                RHS.order_date AS order_date,
		                RHS.order_details AS order_details
		         FROM customers AS LHS
		         INNER JOIN customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
		      INNER JOIN
		        (SELECT order_details,
		                MAX(order_date) AS maxorder_date
		         FROM customer_orders
		         GROUP BY order_details) AS RHS ON (LHS.order_details = RHS.order_details)) AS RHS)
		WHERE (order_date >= maxorder_date
		       AND order_date > maxorder_date_other)
		ORDER BY customer_name
		
	Empty DataFrame
	Columns: [customer_name]
	Index: []
Wrong output for base solution in spider/customers_and_addresses/0044
	EXPECTED
		SELECT t1.customer_name
		FROM customers AS t1
		JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
		JOIN order_items AS t3 ON t2.order_id = t3.order_id
		JOIN products AS t4 ON t3.product_id = t4.product_id
		WHERE t4.product_details = 'Latte' INTERSECT
		  SELECT t1.customer_name
		  FROM customers AS t1
		  JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
		  JOIN order_items AS t3 ON t2.order_id = t3.order_id
		  JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'
	    customer_name
	0  Clifford Pagac
	ACTUAL
		
		SELECT DISTINCT `customer_name`
		FROM
		  (SELECT `LHS`.`product_id` AS `product_id`,
		          `LHS`.`product_details` AS `product_details`,
		          `LHS`.`order_id` AS `order_id`,
		          `LHS`.`order_quantity` AS `order_quantity`,
		          `RHS`.`customer_id` AS `customer_id`,
		          `RHS`.`order_status` AS `order_status`,
		          `RHS`.`order_date` AS `order_date`,
		          `RHS`.`order_details` AS `order_details`,
		          `RHS`.`payment_method` AS `payment_method`,
		          `RHS`.`customer_name` AS `customer_name`,
		          `RHS`.`date_became_customer` AS `date_became_customer`,
		          `RHS`.`other_customer_details` AS `other_customer_details`
		   FROM
		     (SELECT `LHS`.`product_id` AS `product_id`,
		             `LHS`.`product_details` AS `product_details`,
		             `RHS`.`order_id` AS `order_id`,
		             `RHS`.`order_quantity` AS `order_quantity`
		      FROM `products` AS `LHS`
		      INNER JOIN `order_items` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`)) AS `LHS`
		   INNER JOIN
		     (SELECT `order_id`,
		             `customer_id`,
		             `order_status`,
		             `order_date`,
		             `order_details`,
		             `payment_method`,
		             `customer_name`,
		             `date_became_customer`,
		             `order_details` AS `other_customer_details`
		      FROM
		        (SELECT `LHS`.`order_id` AS `order_id`,
		                `LHS`.`customer_id` AS `customer_id`,
		                `LHS`.`order_status` AS `order_status`,
		                `LHS`.`order_date` AS `order_date`,
		                `LHS`.`order_details` AS `order_details`,
		                `RHS`.`payment_method` AS `payment_method`,
		                `RHS`.`customer_name` AS `customer_name`,
		                `RHS`.`date_became_customer` AS `date_became_customer`
		         FROM `customer_orders` AS `LHS`
		         INNER JOIN `customers` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`
		                                                AND `LHS`.`order_details` = `RHS`.`other_customer_details`))) AS `RHS` ON (`LHS`.`order_id` = `RHS`.`order_id`))
		WHERE (`product_details` = 'Latte'
		       AND `product_details` != 'Americano')
		ORDER BY customer_name
		
	Empty DataFrame
	Columns: [customer_name]
	Index: []
Error while executing solution for spider/customers_and_invoices/0002
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT customer_id) OVER () AS count_distinct_customer_id_
	FROM accounts
	ORDER BY count_distinct_customer_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/customers_and_invoices/0003.yaml
No solution tests/spider/customers_and_invoices/0004.yaml
No solution tests/spider/customers_and_invoices/0011.yaml
No solution tests/spider/customers_and_invoices/0012.yaml
No solution tests/spider/customers_and_invoices/0019.yaml
No solution tests/spider/customers_and_invoices/0021.yaml
No solution tests/spider/customers_and_invoices/0033.yaml
No solution tests/spider/customers_and_products_contacts/0005.yaml
No solution tests/spider/customers_and_products_contacts/0007.yaml
No solution tests/spider/customers_and_products_contacts/0009.yaml
No solution tests/spider/customers_and_products_contacts/0012.yaml
No solution tests/spider/customers_campaigns_ecommerce/0011.yaml
Wrong output for base solution in spider/customers_card_transactions/0003
	EXPECTED
		SELECT other_account_details
		FROM Accounts
		WHERE account_name = "338"
	  other_account_details
	0               Regular
	ACTUAL
		
		SELECT other_account_details
		FROM accounts
		WHERE (account_name = 338.0)
		ORDER BY other_account_details
		
	Empty DataFrame
	Columns: [other_account_details]
	Index: []
Wrong output for base solution in spider/customers_card_transactions/0004
	EXPECTED
		SELECT T2.customer_first_name,
		       T2.customer_last_name,
		       T2.customer_phone
		FROM Accounts AS T1
		JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
		WHERE T1.account_name = "162"
	  customer_first_name customer_last_name customer_phone
	0            Faustino          Langworth   284.749.0453
	ACTUAL
		
		SELECT customer_first_name,
		       customer_last_name,
		       customer_phone
		FROM
		  (SELECT LHS.account_id AS account_id,
		          LHS.customer_id AS customer_id,
		          LHS.account_name AS account_name,
		          LHS.other_account_details AS other_account_details,
		          LHS.customer_first_name AS customer_first_name,
		          LHS.customer_last_name AS customer_last_name,
		          LHS.customer_address AS customer_address,
		          LHS.customer_phone AS customer_phone,
		          LHS.customer_email AS customer_email,
		          LHS.other_customer_details AS other_customer_details
		   FROM
		     (SELECT LHS.account_id AS account_id,
		             LHS.customer_id AS customer_id,
		             LHS.account_name AS account_name,
		             LHS.other_account_details AS other_account_details,
		             RHS.customer_first_name AS customer_first_name,
		             RHS.customer_last_name AS customer_last_name,
		             RHS.customer_address AS customer_address,
		             RHS.customer_phone AS customer_phone,
		             RHS.customer_email AS customer_email,
		             RHS.other_customer_details AS other_customer_details
		      FROM accounts AS LHS
		      INNER JOIN customers AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM accounts
		      WHERE (account_name = 162.0)) AS RHS ON (LHS.account_id = RHS.account_id
		                                               AND LHS.customer_id = RHS.customer_id
		                                               AND LHS.account_name = RHS.account_name
		                                               AND LHS.other_account_details = RHS.other_account_details))
		ORDER BY customer_first_name
		
	Empty DataFrame
	Columns: [customer_first_name, customer_last_name, customer_phone]
	Index: []
No solution tests/spider/customers_card_transactions/0007.yaml
No solution tests/spider/customers_card_transactions/0008.yaml
Error while executing solution for spider/customers_card_transactions/0012
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT customer_id) OVER () AS count_distinct_customer_id_
	FROM accounts
	ORDER BY count_distinct_customer_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/customers_card_transactions/0014.yaml
No solution tests/spider/customers_card_transactions/0024.yaml
No solution tests/spider/customers_card_transactions/0026.yaml
Error while executing solution for spider/customers_card_transactions/0033
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT card_type_code) OVER () AS count_distinct_card_type_code_
	FROM customers_cards
	ORDER BY count_distinct_card_type_code_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/customers_card_transactions/0036.yaml
Wrong output for base solution in spider/debate/0001
	EXPECTED
		SELECT count(*)
		FROM debate
	   count(*)
	0         6
	ACTUAL
		
		SELECT n AS count___
		FROM
		  (SELECT date, COUNT() AS n
		   FROM debate
		   GROUP BY date)
		ORDER BY count___
		
	   count___
	0         1
	1         1
	2         1
	3         1
	4         1
	5         1
No solution tests/spider/debate/0009.yaml
No solution tests/spider/decoration_competition/0003.yaml
Error while executing ground truth for spider/decoration_competition/0009
	The column label 'Name' is not unique.
Error while executing solution for spider/department_management/0001
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT age) OVER () AS count___
	FROM head
	WHERE (age <= 56.0)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/department_management/0016.yaml
No solution tests/spider/department_store/0001.yaml
No solution tests/spider/department_store/0008.yaml
No solution tests/spider/department_store/0009.yaml
No solution tests/spider/department_store/0015.yaml
No solution tests/spider/department_store/0019.yaml
Error while executing solution for spider/department_store/0021
	(sqlite3.OperationalError) near ".": syntax error
	[SQL: 
	SELECT DISTINCT staff_id,
	                staff_name
	FROM
	  (SELECT LHS.staff_id AS staff_id,
	          LHS.staff_gender AS staff_gender,
	          LHS.staff_name AS staff_name,
	          LHS.staff_id_other AS staff_id_other,
	          LHS.date_assigned_from AS date_assigned_from,
	          LHS.job_title_code AS job_title_code,
	          LHS.date_assigned_to AS date_assigned_to,
	          LHS.department_id AS department_id,
	          RHS.staff_id AS staff_id.other_other,
	          RHS.job_title_code AS job_title_code_other,
	          RHS.date_assigned_to AS date_assigned_to_other
	   FROM
	     (SELECT staff_id,
	             staff_gender,
	             staff_name,
	             staff_id_other,
	             date_assigned_from,
	             job_title_code,
	             date_assigned_to,
	             staff_gender AS department_id
	      FROM
	        (SELECT LHS.staff_id AS staff_id,
	                LHS.staff_gender AS staff_gender,
	                LHS.staff_name AS staff_name,
	                RHS.staff_id AS staff_id_other,
	                RHS.date_assigned_from AS date_assigned_from,
	                RHS.job_title_code AS job_title_code,
	                RHS.date_assigned_to AS date_assigned_to
	         FROM staff AS LHS
	         INNER JOIN staff_department_assignments AS RHS ON (LHS.staff_gender = RHS.department_id))) AS LHS
	   INNER JOIN staff_department_assignments AS RHS ON (LHS.staff_id = RHS.department_id
	                                                         AND LHS.date_assigned_from = RHS.date_assigned_from))
	ORDER BY staff_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/department_store/0025.yaml
No solution tests/spider/department_store/0026.yaml
No solution tests/spider/department_store/0029.yaml
No solution tests/spider/department_store/0030.yaml
No solution tests/spider/department_store/0033.yaml
No solution tests/spider/department_store/0037.yaml
No solution tests/spider/department_store/0042.yaml
Error while executing solution for spider/device/0007
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT software_platform) OVER () AS count_distinct_software_platform_
	FROM device
	ORDER BY count_distinct_software_platform_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/device/0008.yaml
No solution tests/spider/document_management/0001.yaml
No solution tests/spider/document_management/0004.yaml
No solution tests/spider/document_management/0006.yaml
No solution tests/spider/document_management/0012.yaml
No solution tests/spider/document_management/0015.yaml
No solution tests/spider/document_management/0016.yaml
Wrong output for base solution in spider/document_management/0017
	EXPECTED
		SELECT count(*)
		FROM users
		WHERE user_login = 1
	   count(*)
	0         7
	ACTUAL
		
		SELECT DISTINCT COUNT(*) OVER () AS count___
		FROM users
		WHERE (user_login >= 1.0)
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___]
	Index: []
No solution tests/spider/document_management/0018.yaml
No solution tests/spider/document_management/0019.yaml
Error while executing solution for spider/dorm_1/0012
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT dormid) OVER () AS count_distinct_dormid_
	FROM has_amenity
	ORDER BY count_distinct_dormid_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/dorm_1/0015.yaml
No solution tests/spider/dorm_1/0017.yaml
No solution tests/spider/dorm_1/0018.yaml
No solution tests/spider/dorm_1/0019.yaml
No solution tests/spider/dorm_1/0022.yaml
No solution tests/spider/dorm_1/0023.yaml
No solution tests/spider/dorm_1/0024.yaml
No solution tests/spider/dorm_1/0027.yaml
No solution tests/spider/dorm_1/0028.yaml
No solution tests/spider/dorm_1/0030.yaml
No solution tests/spider/dorm_1/0031.yaml
No solution tests/spider/dorm_1/0034.yaml
No solution tests/spider/dorm_1/0037.yaml
No solution tests/spider/dorm_1/0039.yaml
No solution tests/spider/dorm_1/0046.yaml
No solution tests/spider/dorm_1/0049.yaml
No solution tests/spider/driving_school/0001.yaml
No solution tests/spider/driving_school/0017.yaml
No solution tests/spider/driving_school/0018.yaml
No solution tests/spider/driving_school/0029.yaml
No solution tests/spider/driving_school/0034.yaml
No solution tests/spider/driving_school/0040.yaml
No solution tests/spider/driving_school/0041.yaml
No solution tests/spider/e_government/0009.yaml
No solution tests/spider/e_government/0012.yaml
No solution tests/spider/e_government/0015.yaml
Error while executing solution for spider/e_government/0016
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT payment_method_code) OVER () AS count_distinct_payment_method_code_
	FROM parties
	ORDER BY count_distinct_payment_method_code_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/e_government/0018.yaml
No solution tests/spider/e_government/0019.yaml
No solution tests/spider/e_learning/0004.yaml
No solution tests/spider/e_learning/0005.yaml
Error while executing solution for spider/e_learning/0007
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT student_id) OVER () AS count_distinct_student_id_
	FROM student_course_enrolment
	ORDER BY count_distinct_student_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/e_learning/0013.yaml
No solution tests/spider/e_learning/0014.yaml
No solution tests/spider/e_learning/0015.yaml
No solution tests/spider/e_learning/0020.yaml
Error while executing solution for spider/e_learning/0039
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT student_id) OVER () AS count___
	FROM
	  (SELECT *
	   FROM students AS LHS
	   WHERE NOT EXISTS
	       (SELECT 1
	        FROM student_course_enrolment AS RHS
	        WHERE (LHS.student_id = RHS.student_id) ))
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/election/0002.yaml
Error while executing solution for spider/election/0009
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT governor) OVER () AS count_distinct_governor_
	FROM party
	ORDER BY count_distinct_governor_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/election/0017.yaml
No solution tests/spider/election/0019.yaml
No solution tests/spider/election/0022.yaml
No solution tests/spider/election/0026.yaml
No solution tests/spider/election/0032.yaml
No solution tests/spider/election_representative/0002.yaml
No solution tests/spider/election_representative/0005.yaml
No solution tests/spider/election_representative/0011.yaml
Wrong output for base solution in spider/election_representative/0013
	EXPECTED
		SELECT avg(T1.Votes)
		FROM election AS T1
		JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
		WHERE T2.Party = "Republican"
	   avg(t1.votes)
	0        11750.0
	ACTUAL
		
		SELECT `meanvotes` AS `avg_t1_votes_`
		FROM
		  (SELECT `date`,
		          `party`,
		          AVG(`votes`) AS `meanvotes`
		   FROM
		     (SELECT `LHS`.`election_id` AS `election_id`,
		             `LHS`.`representative_id` AS `representative_id`,
		             `LHS`.`date` AS `date`,
		             `LHS`.`votes` AS `votes`,
		             `LHS`.`vote_percent` AS `vote_percent`,
		             `LHS`.`seats` AS `seats`,
		             `LHS`.`place` AS `place`,
		             `RHS`.`name` AS `name`,
		             `RHS`.`state` AS `state`,
		             `RHS`.`party` AS `party`,
		             `RHS`.`lifespan` AS `lifespan`
		      FROM `election` AS `LHS`
		      LEFT JOIN `representative` AS `RHS` ON (`LHS`.`representative_id` = `RHS`.`representative_id`))
		   GROUP BY `date`,
		            `party`)
		WHERE (`party` = 'Republican')
		ORDER BY avg_t1_votes_
		
	   avg_t1_votes_
	0         9423.0
	1        14077.0
No solution tests/spider/entertainment_awards/0009.yaml
No solution tests/spider/entrepreneur/0010.yaml
Error while executing solution for spider/entrepreneur/0019
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT company) OVER () AS count_distinct_company_
	FROM entrepreneur
	ORDER BY count_distinct_company_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/epinions_1/0002.yaml
Error while executing solution for spider/epinions_1/0008
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT i_id) OVER () AS count_distinct_i_id_
	FROM review
	ORDER BY count_distinct_i_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/epinions_1/0015.yaml
No solution tests/spider/epinions_1/0016.yaml
No solution tests/spider/epinions_1/0017.yaml
No solution tests/spider/epinions_1/0019.yaml
Error while executing solution for spider/epinions_1/0028
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT u_id) OVER () AS count___
	FROM
	  (SELECT *
	   FROM useracct AS LHS
	   WHERE NOT EXISTS
	       (SELECT 1
	        FROM review AS RHS
	        WHERE (LHS.u_id = RHS.u_id) ))
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/farm/0002.yaml
No solution tests/spider/farm/0005.yaml
No solution tests/spider/film_rank/0004.yaml
Wrong output for base solution in spider/film_rank/0012
	EXPECTED
		SELECT avg(T2.Number_cities)
		FROM film_market_estimation AS T1
		JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
		WHERE T1.Low_Estimate > 10000
	   avg(t2.number_cities)
	0                  209.0
	ACTUAL
		
		SELECT number_cities AS avg_t2_number_cities_
		FROM
		  (SELECT LHS.market_id AS market_id,
		          LHS.country AS country,
		          LHS.number_cities AS number_cities,
		          LHS.estimation_id AS estimation_id,
		          LHS.low_estimate AS low_estimate,
		          LHS.high_estimate AS high_estimate,
		          LHS.film_id AS film_id,
		          LHS.type AS TYPE,
		          LHS.year AS YEAR,
		          RHS.meannumber_cities AS meannumber_cities
		   FROM
		     (SELECT LHS.market_id AS market_id,
		             LHS.country AS country,
		             LHS.number_cities AS number_cities,
		             RHS.estimation_id AS estimation_id,
		             RHS.low_estimate AS low_estimate,
		             RHS.high_estimate AS high_estimate,
		             RHS.film_id AS film_id,
		             RHS.type AS TYPE,
		             RHS.year AS YEAR
		      FROM market AS LHS
		      INNER JOIN film_market_estimation AS RHS ON (LHS.market_id = RHS.market_id)) AS LHS
		   INNER JOIN
		     (SELECT market_id,
		             country,
		             number_cities,
		             AVG(number_cities) OVER () AS meannumber_cities
		      FROM market) AS RHS ON (LHS.market_id = RHS.market_id
		                                 AND LHS.country = RHS.country
		                                 AND LHS.number_cities = RHS.number_cities))
		WHERE (low_estimate > 10000.0)
		ORDER BY avg_t2_number_cities_
		
	   avg_t2_number_cities_
	0                    209
No solution tests/spider/film_rank/0016.yaml
No solution tests/spider/film_rank/0020.yaml
No solution tests/spider/film_rank/0023.yaml
No solution tests/spider/film_rank/0024.yaml
No solution tests/spider/flight_1/0008.yaml
No solution tests/spider/flight_1/0017.yaml
Wrong output for base solution in spider/flight_1/0021
	EXPECTED
		SELECT flno,
		       origin,
		       destination
		FROM Flight
		ORDER BY origin
	   flno       origin      destination
	0   387  Los Angeles           Boston
	1    13  Los Angeles          Chicago
	2   346  Los Angeles           Dallas
	3    33  Los Angeles         Honolulu
	4    34  Los Angeles         Honolulu
	5    76      Chicago      Los Angeles
	6    68      Chicago         New York
	7     7  Los Angeles           Sydney
	8     2  Los Angeles            Tokyo
	9    99  Los Angeles  Washington D.C.
	ACTUAL
		
		SELECT DISTINCT flno,
		                origin,
		                destination
		FROM
		  (SELECT LHS.flno AS flno,
		          LHS.origin AS origin,
		          LHS.destination AS destination,
		          LHS.distance AS distance,
		          LHS.departure_date AS departure_date,
		          LHS.arrival_date AS arrival_date,
		          LHS.price AS price,
		          LHS.aid AS aid,
		          RHS.flno AS flno_other,
		          RHS.origin AS origin_other,
		          RHS.destination AS destination_other,
		          RHS.distance AS distance_other,
		          RHS.arrival_date AS arrival_date_other,
		          RHS.price AS price_other
		   FROM flight AS LHS
		   INNER JOIN flight AS RHS ON (LHS.aid = RHS.aid
		                                   AND LHS.arrival_date = RHS.departure_date))
		ORDER BY flno
		
	   flno       origin destination
	0    13  Los Angeles     Chicago
Wrong output for base solution in spider/flight_1/0026
	EXPECTED
		SELECT avg(price)
		FROM Flight
		WHERE origin = "Los Angeles"
		  AND destination = "Honolulu"
	   avg(price)
	0     400.605
	ACTUAL
		
		SELECT `meanprice` AS `avg_price_`
		FROM
		  (SELECT `departure_date`,
		          AVG(`price`) AS `meanprice`
		   FROM
		     (SELECT *
		      FROM `flight`
		      WHERE (`origin` = 'Los Angeles'
		             AND `destination` = 'Honolulu'))
		   GROUP BY departure_date)
		ORDER BY avg_price_
		
	   avg_price_
	0      375.23
	1      425.98
No solution tests/spider/flight_1/0029.yaml
No solution tests/spider/flight_1/0030.yaml
Wrong output for base solution in spider/flight_1/0031
	EXPECTED
		SELECT origin,
		       count(*)
		FROM Flight
		GROUP BY origin
	        origin  count(*)
	0      Chicago         2
	1  Los Angeles         8
	ACTUAL
		
		SELECT origin,
		       n AS count___
		FROM
		  (SELECT arrival_date,
		          origin,
		          COUNT() AS n
		   FROM flight
		   GROUP BY arrival_date,
		            origin)
		ORDER BY origin
		
	        origin  count___
	0      Chicago         1
	1      Chicago         1
	2  Los Angeles         1
	3  Los Angeles         1
	4  Los Angeles         1
	5  Los Angeles         1
	6  Los Angeles         1
	7  Los Angeles         1
	8  Los Angeles         1
	9  Los Angeles         1
No solution tests/spider/flight_1/0034.yaml
Wrong output for base solution in spider/flight_1/0037
	EXPECTED
		SELECT T2.name,
		       count(*)
		FROM Flight AS T1
		JOIN Aircraft AS T2 ON T1.aid = T2.aid
		GROUP BY T1.aid
	               name  count(*)
	0    Boeing 737-800         1
	1    Boeing 747-400         1
	2    Boeing 757-300         1
	3   Embraer ERJ-145         1
	4  Piper Archer III         1
	5          SAAB 340         1
	6   Airbus A340-300         2
	7    Lockheed L1011         2
	ACTUAL
		
		SELECT name,
		       n AS count___
		FROM
		  (SELECT LHS.aid AS aid,
		          LHS.name AS name,
		          LHS.distance AS distance,
		          RHS.arrival_date AS arrival_date,
		          RHS.n AS n
		   FROM aircraft AS LHS
		   INNER JOIN
		     (SELECT aid,
		             arrival_date,
		             COUNT() AS n
		      FROM flight
		      GROUP BY aid,
		               arrival_date) AS RHS ON (LHS.aid = RHS.aid))
		ORDER BY name
		
	               name  count___
	0   Airbus A340-300         1
	1   Airbus A340-300         1
	2    Boeing 737-800         1
	3    Boeing 747-400         1
	4    Boeing 757-300         1
	5   Embraer ERJ-145         1
	6    Lockheed L1011         1
	7    Lockheed L1011         1
	8  Piper Archer III         1
	9          SAAB 340         1
Error while executing solution for spider/flight_1/0039
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT eid) OVER () AS count_distinct_eid_
	FROM certificate
	ORDER BY count_distinct_eid_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/flight_1/0043.yaml
No solution tests/spider/flight_1/0045.yaml
Error while executing solution for spider/flight_1/0046
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT name
	FROM
	  (SELECT LHS.eid AS eid,
	          LHS.aid AS aid,
	          RHS.name AS name,
	          RHS.distance AS distance,
	          RHS.n_distinct AS n_distinct
	   FROM certificate AS LHS
	   INNER JOIN
	     (SELECT aid,
	             name,
	             distance,
	             COUNT(DISTINCT distance) OVER () AS n_distinct
	      FROM aircraft) AS RHS ON (LHS.aid = RHS.aid))
	WHERE (distance >= 5000.0
	       AND n_distinct >= 5.0)
	ORDER BY name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/flight_1/0047.yaml
No solution tests/spider/flight_1/0048.yaml
No solution tests/spider/flight_4/0007.yaml
No solution tests/spider/flight_4/0009.yaml
No solution tests/spider/flight_4/0010.yaml
No solution tests/spider/flight_4/0013.yaml
No solution tests/spider/flight_4/0014.yaml
No solution tests/spider/flight_4/0015.yaml
No solution tests/spider/flight_4/0016.yaml
No solution tests/spider/flight_4/0017.yaml
No solution tests/spider/flight_4/0018.yaml
No solution tests/spider/flight_4/0019.yaml
Wrong output for base solution in spider/flight_4/0021
	EXPECTED
		SELECT country
		FROM airlines
		WHERE active = 'Y'
		GROUP BY country
		ORDER BY count(*) DESC
		LIMIT 1
	         country
	0  United States
	ACTUAL
		
		SELECT `country_other` AS `country`
		FROM
		  (SELECT `country`,
		          `country` AS `iata`,
		          `n_distinct`,
		          `name`,
		          `icao`,
		          `callsign`,
		          `country_other`,
		          `active`,
		          `alid`
		   FROM
		     (SELECT `country`,
		             `iata`,
		             `n_distinct`,
		             `name`,
		             `icao`,
		             `callsign`,
		             `country_other`,
		             `active`,
		             `n_distinct` AS `alid`
		      FROM
		        (SELECT `LHS`.`country` AS `country`,
		                `LHS`.`iata` AS `iata`,
		                `LHS`.`n_distinct` AS `n_distinct`,
		                `RHS`.`name` AS `name`,
		                `RHS`.`icao` AS `icao`,
		                `RHS`.`callsign` AS `callsign`,
		                `RHS`.`country` AS `country_other`,
		                `RHS`.`active` AS `active`
		         FROM
		           (SELECT `country`,
		                   `iata`,
		                   COUNT(DISTINCT `active`) AS `n_distinct`
		            FROM `airlines`
		            GROUP BY `country`,
		                     `iata`) AS `LHS`
		         INNER JOIN `airlines` AS `RHS` ON (`LHS`.`n_distinct` = `RHS`.`alid`
		                                               AND `LHS`.`country` = `RHS`.`iata`))))
		WHERE (`active` != 'Y')
		ORDER BY country
		
	Empty DataFrame
	Columns: [country]
	Index: []
No solution tests/spider/flight_4/0022.yaml
No solution tests/spider/flight_4/0024.yaml
No solution tests/spider/flight_4/0025.yaml
No solution tests/spider/flight_4/0026.yaml
No solution tests/spider/flight_4/0027.yaml
No solution tests/spider/flight_4/0029.yaml
No solution tests/spider/flight_4/0030.yaml
No solution tests/spider/flight_4/0034.yaml
No solution tests/spider/flight_4/0035.yaml
No solution tests/spider/flight_4/0036.yaml
No solution tests/spider/flight_4/0037.yaml
No solution tests/spider/flight_4/0038.yaml
No solution tests/spider/flight_4/0039.yaml
No solution tests/spider/flight_4/0040.yaml
No solution tests/spider/flight_4/0041.yaml
No solution tests/spider/flight_company/0003.yaml
Wrong output for base solution in spider/flight_company/0005
	EXPECTED
		SELECT avg(velocity)
		FROM flight
		WHERE pilot = 'Thompson'
	   avg(velocity)
	0          229.5
	ACTUAL
		
		SELECT `meanvelocity` AS `avg_velocity_`
		FROM
		  (SELECT `date`,
		          `pilot`,
		          AVG(`velocity`) AS `meanvelocity`
		   FROM
		     (SELECT *
		      FROM `flight`
		      WHERE (`pilot` = 'Thompson'))
		   GROUP BY date, pilot)
		ORDER BY avg_velocity_
		
	   avg_velocity_
	0          135.0
	1          240.0
	2          240.0
	3          240.0
	4          240.0
	5          240.0
	6          240.0
	7          240.0
	8          240.0
	9          240.0
No solution tests/spider/flight_company/0013.yaml
No solution tests/spider/flight_company/0015.yaml
Wrong output for base solution in spider/flight_company/0016
	EXPECTED
		SELECT T3.id,
		       count(*)
		FROM operate_company AS T1
		JOIN flight AS t2 ON T1.id = T2.company_id
		JOIN airport AS T3 ON T2.airport_id = T3.id
		GROUP BY T3.id
	   id  count(*)
	0   1         1
	1   3         1
	2   5         1
	3   8         1
	4   9         1
	5   6         2
	6   2         3
	7   4         3
	ACTUAL
		
		SELECT airport_id AS id,
		       n AS count___
		FROM
		  (SELECT LHS.id AS id,
		          LHS.city AS city,
		          LHS.country AS country,
		          LHS.iata AS iata,
		          LHS.icao AS icao,
		          LHS.name AS name,
		          LHS.type AS TYPE,
		          LHS.principal_activities AS principal_activities,
		          LHS.incorporated_in AS incorporated_in,
		          LHS.group_equity_shareholding AS group_equity_shareholding,
		          RHS.airport_id AS airport_id,
		          RHS.velocity AS velocity,
		          RHS.n AS n
		   FROM
		     (SELECT LHS.id AS id,
		             LHS.city AS city,
		             LHS.country AS country,
		             LHS.iata AS iata,
		             LHS.icao AS icao,
		             LHS.name AS name,
		             RHS.type AS TYPE,
		             RHS.principal_activities AS principal_activities,
		             RHS.incorporated_in AS incorporated_in,
		             RHS.group_equity_shareholding AS group_equity_shareholding
		      FROM airport AS LHS
		      INNER JOIN operate_company AS RHS ON (LHS.id = RHS.id
		                                               AND LHS.name = RHS.name)) AS LHS
		   CROSS JOIN
		     (SELECT airport_id,
		             velocity,
		             COUNT() AS n
		      FROM flight
		      GROUP BY airport_id,
		               velocity) AS RHS)
		ORDER BY id
		
	Empty DataFrame
	Columns: [id, count___]
	Index: []
No solution tests/spider/game_1/0009.yaml
No solution tests/spider/game_1/0014.yaml
Error while executing solution for spider/game_1/0017
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT stuid) OVER () AS count_distinct_stuid_
	FROM sportsinfo
	ORDER BY count_distinct_stuid_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/game_1/0023.yaml
No solution tests/spider/game_1/0025.yaml
Error while executing solution for spider/game_1/0026
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT `sportname`
	FROM
	  (SELECT `onscholarship`,
	          `sportname`,
	          `n`,
	          COUNT(DISTINCT `onscholarship`) OVER () AS `n_distinct`
	   FROM
	     (SELECT `onscholarship`,
	             `sportname`,
	             COUNT() AS `n`
	      FROM `sportsinfo`
	      GROUP BY `onscholarship`,
	               `sportname`))
	WHERE (`onscholarship` = 'Y'
	       AND n_distinct <= n)
	ORDER BY sportname
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/game_1/0030.yaml
No solution tests/spider/game_1/0031.yaml
No solution tests/spider/game_1/0032.yaml
No solution tests/spider/game_injury/0008.yaml
No solution tests/spider/game_injury/0009.yaml
No solution tests/spider/game_injury/0010.yaml
No solution tests/spider/game_injury/0012.yaml
No solution tests/spider/game_injury/0015.yaml
No solution tests/spider/game_injury/0016.yaml
Wrong output for base solution in spider/game_injury/0018
	EXPECTED
		SELECT T1.date,
		       T2.player
		FROM game AS T1
		JOIN injury_accident AS T2 ON T1.id = T2.game_id
		ORDER BY T1.season DESC
	                 date                 player
	0        10 July 2008        Wesley Sneijder
	1       14 March 2010    Dejan Stanković (2)
	2       14 March 2010    Wesley Sneijder (2)
	3     14 October 2009           Iván Córdoba
	4      16 August 2008           Diego Milito
	5      16 August 2008         Javier Zanetti
	6         18 May 2007          Davide Santon
	7   22 September 2007                 Maicon
	8     31 October 2008           Goran Pandev
	9     31 October 2008           Thiago Motta
	10    31 October 2008          Walter Samuel
	11    31 October 2010  Esteban Cambiasso (2)
	12        7 July 2011       Thiago Motta (2)
	13      8 August 2009      Esteban Cambiasso
	14    9 December 2007        Dejan Stanković
	ACTUAL
		
		SELECT date, player
		FROM
		  (SELECT LHS.stadium_id AS stadium_id,
		          LHS.id AS id,
		          LHS.season AS season,
		          LHS.date AS date,
		          LHS.home_team AS home_team,
		          LHS.away_team AS away_team,
		          LHS.score AS score,
		          LHS.competition AS competition,
		          RHS.game_id AS game_id,
		          RHS.player AS player,
		          RHS.injury AS injury,
		          RHS.number_of_matches AS number_of_matches,
		          RHS.source AS SOURCE
		   FROM game AS LHS
		   INNER JOIN injury_accident AS RHS ON (LHS.id = RHS.id))
		ORDER BY date
		
	                 date                 player
	0        10 July 2008        Wesley Sneijder
	1       11 March 2012  Esteban Cambiasso (2)
	2        12 July 2009          Walter Samuel
	3       14 March 2010           Iván Córdoba
	4     14 October 2009           Thiago Motta
	5      16 August 2008           Diego Milito
	6         18 May 2007          Davide Santon
	7      21 August 2011    Wesley Sneijder (2)
	8   22 September 2007                 Maicon
	9        26 June 2012       Thiago Motta (2)
	10    31 October 2008         Javier Zanetti
	11    31 October 2010      Esteban Cambiasso
	12        7 July 2011    Dejan Stanković (2)
	13      8 August 2009           Goran Pandev
	14    9 December 2007        Dejan Stanković
No solution tests/spider/gas_company/0002.yaml
No solution tests/spider/gas_company/0004.yaml
No solution tests/spider/gas_company/0008.yaml
No solution tests/spider/gas_company/0009.yaml
No solution tests/spider/gas_company/0020.yaml
No solution tests/spider/gas_company/0023.yaml
No solution tests/spider/gymnast/0009.yaml
No solution tests/spider/gymnast/0010.yaml
No solution tests/spider/gymnast/0017.yaml
Error while executing solution for spider/gymnast/0019
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT hometown) OVER () AS count_distinct_hometown_
	FROM people
	ORDER BY count_distinct_hometown_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/hospital_1/0003.yaml
No solution tests/spider/hospital_1/0005.yaml
No solution tests/spider/hospital_1/0006.yaml
No solution tests/spider/hospital_1/0008.yaml
Error while executing ground truth for spider/hospital_1/0009
	The column label 'Name' is not unique.
No solution tests/spider/hospital_1/0010.yaml
No solution tests/spider/hospital_1/0015.yaml
Wrong output for base solution in spider/hospital_1/0022
	EXPECTED
		SELECT DISTINCT T1.name
		FROM physician AS T1
		JOIN prescribes AS T2 ON T1.employeeid = T2.physician
		JOIN medication AS T3 ON T3.code = T2.medication
		WHERE T3.name = "Thesisin"
	          name
	0  Molly Clock
	ACTUAL
		
		SELECT `name_other` AS `name`
		FROM
		  (SELECT `code`,
		          `name`,
		          `brand`,
		          `description`,
		          `employeeid`,
		          `name_other`,
		          `position`,
		          `ssn`,
		          `patient`,
		          `date`,
		          `dose`,
		          `physician`,
		          `code` AS `medication`
		   FROM
		     (SELECT `LHS`.`code` AS `code`,
		             `LHS`.`name` AS `name`,
		             `LHS`.`brand` AS `brand`,
		             `LHS`.`description` AS `description`,
		             `RHS`.`employeeid` AS `employeeid`,
		             `RHS`.`name` AS `name_other`,
		             `RHS`.`position` AS `position`,
		             `RHS`.`ssn` AS `ssn`,
		             `RHS`.`patient` AS `patient`,
		             `RHS`.`date` AS `date`,
		             `RHS`.`dose` AS `dose`,
		             `RHS`.`physician` AS `physician`
		      FROM `medication` AS `LHS`
		      INNER JOIN
		        (SELECT *
		         FROM
		           (SELECT `employeeid`,
		                   `name`,
		                   `position`,
		                   `ssn`,
		                   `patient`,
		                   `medication`,
		                   `date`,
		                   `appointment`,
		                   `dose`,
		                   `employeeid` AS `physician`
		            FROM
		              (SELECT `LHS`.`employeeid` AS `employeeid`,
		                      `LHS`.`name` AS `name`,
		                      `LHS`.`position` AS `position`,
		                      `LHS`.`ssn` AS `ssn`,
		                      `RHS`.`patient` AS `patient`,
		                      `RHS`.`medication` AS `medication`,
		                      `RHS`.`date` AS `date`,
		                      `RHS`.`appointment` AS `appointment`,
		                      `RHS`.`dose` AS `dose`
		               FROM `physician` AS `LHS`
		               INNER JOIN `prescribes` AS `RHS` ON (`LHS`.`employeeid` = `RHS`.`physician`)))
		         WHERE (`name` != 'Thesisin')) AS RHS ON (LHS.code = RHS.medication
		                                                  AND LHS.description = RHS.appointment)))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name]
	Index: []
Wrong output for base solution in spider/hospital_1/0023
	EXPECTED
		SELECT DISTINCT T1.name,
		                T1.position
		FROM physician AS T1
		JOIN prescribes AS T2 ON T1.employeeid = T2.physician
		JOIN medication AS T3 ON T3.code = T2.medication
		WHERE T3.Brand = "X"
	          name         position
	0  John Dorian  Staff Internist
	ACTUAL
		
		SELECT `name`,
		       `position`
		FROM
		  (SELECT `LHS`.`employeeid` AS `employeeid`,
		          `LHS`.`name` AS `name`,
		          `LHS`.`position` AS `position`,
		          `LHS`.`ssn` AS `ssn`,
		          `RHS`.`name` AS `name_other`,
		          `RHS`.`brand` AS `brand`,
		          `RHS`.`description` AS `description`,
		          `RHS`.`physician` AS `physician`,
		          `RHS`.`patient` AS `patient`,
		          `RHS`.`medication` AS `medication`,
		          `RHS`.`date` AS `date`,
		          `RHS`.`dose` AS `dose`,
		          `RHS`.`appointment` AS `appointment`
		   FROM `physician` AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM
		        (SELECT `code`,
		                `name`,
		                `brand`,
		                `description`,
		                `physician`,
		                `patient`,
		                `medication`,
		                `date`,
		                `dose`,
		                `description` AS `appointment`
		         FROM
		           (SELECT `LHS`.`code` AS `code`,
		                   `LHS`.`name` AS `name`,
		                   `LHS`.`brand` AS `brand`,
		                   `LHS`.`description` AS `description`,
		                   `RHS`.`physician` AS `physician`,
		                   `RHS`.`patient` AS `patient`,
		                   `RHS`.`medication` AS `medication`,
		                   `RHS`.`date` AS `date`,
		                   `RHS`.`dose` AS `dose`
		            FROM `medication` AS `LHS`
		            INNER JOIN `prescribes` AS `RHS` ON (`LHS`.`description` = `RHS`.`appointment`)))
		      WHERE (`brand` = 'X')) AS RHS ON (LHS.employeeid = RHS.code))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name, position]
	Index: []
No solution tests/spider/hospital_1/0025.yaml
Wrong output for base solution in spider/hospital_1/0026
	EXPECTED
		SELECT patient
		FROM undergoes
		ORDER BY dateundergoes
		LIMIT 1
	     patient
	0  100000001
	ACTUAL
		
		SELECT patient
		FROM
		  (SELECT LHS.patient AS patient,
		          LHS.procedures AS procedures,
		          LHS.stay AS stay,
		          LHS.dateundergoes AS dateundergoes,
		          LHS.physician AS physician,
		          LHS.assistingnurse AS assistingnurse,
		          LHS.mindateundergoes AS mindateundergoes,
		          RHS.ssn AS ssn,
		          RHS.name AS name,
		          RHS.address AS address,
		          RHS.phone AS phone,
		          RHS.insuranceid AS insuranceid,
		          RHS.pcp AS pcp,
		          RHS.patient AS patient_other,
		          RHS.stay AS stay_other,
		          RHS.dateundergoes AS dateundergoes_other,
		          RHS.assistingnurse AS assistingnurse_other,
		          RHS.mindateundergoes AS mindateundergoes_other,
		          RHS.procedures AS procedures_other,
		          RHS.physician AS physician_other
		   FROM
		     (SELECT patient,
		             procedures,
		             stay,
		             dateundergoes,
		             physician,
		             assistingnurse,
		             MIN(dateundergoes) OVER () AS mindateundergoes
		      FROM undergoes) AS LHS
		   CROSS JOIN
		     (SELECT ssn,
		             name,
		             address,
		             phone,
		             insuranceid,
		             pcp,
		             patient,
		             stay,
		             dateundergoes,
		             assistingnurse,
		             mindateundergoes,
		             procedures,
		             pcp AS physician
		      FROM
		        (SELECT ssn,
		                name,
		                address,
		                phone,
		                insuranceid,
		                pcp,
		                patient,
		                stay,
		                dateundergoes,
		                assistingnurse,
		                mindateundergoes,
		                insuranceid AS procedures
		         FROM
		           (SELECT LHS.ssn AS ssn,
		                   LHS.name AS name,
		                   LHS.address AS address,
		                   LHS.phone AS phone,
		                   LHS.insuranceid AS insuranceid,
		                   LHS.pcp AS pcp,
		                   RHS.patient AS patient,
		                   RHS.stay AS stay,
		                   RHS.dateundergoes AS dateundergoes,
		                   RHS.assistingnurse AS assistingnurse,
		                   RHS.mindateundergoes AS mindateundergoes
		            FROM patient AS LHS
		            INNER JOIN
		              (SELECT patient,
		                      procedures,
		                      stay,
		                      dateundergoes,
		                      physician,
		                      assistingnurse,
		                      MIN(dateundergoes) OVER () AS mindateundergoes
		               FROM undergoes) AS RHS ON (LHS.insuranceid = RHS.procedures
		                                             AND LHS.pcp = RHS.physician)))) AS RHS)
		WHERE (dateundergoes = mindateundergoes
		       OR dateundergoes != dateundergoes_other)
		ORDER BY patient
		
	Empty DataFrame
	Columns: [patient]
	Index: []
Wrong output for base solution in spider/hospital_1/0032
	EXPECTED
		SELECT physician,
		       department
		FROM affiliated_with
		WHERE primaryaffiliation = 1
	   physician  department
	0          1           1
	1          2           1
	2          4           1
	3          5           1
	4          8           1
	5          3           2
	6          6           2
	7          7           2
	8          9           3
	ACTUAL
		
		SELECT physician,
		       department
		FROM
		  (SELECT LHS.employeeid AS employeeid,
		          LHS.name AS name,
		          LHS.position AS POSITION,
		          LHS.ssn AS ssn,
		          LHS.departmentid AS departmentid,
		          LHS.head AS head,
		          RHS.physician AS physician,
		          RHS.department AS department,
		          RHS.primaryaffiliation AS primaryaffiliation
		   FROM
		     (SELECT LHS.employeeid AS employeeid,
		             LHS.name AS name,
		             LHS.position AS POSITION,
		             LHS.ssn AS ssn,
		             RHS.departmentid AS departmentid,
		             RHS.head AS head
		      FROM physician AS LHS
		      INNER JOIN department AS RHS ON (LHS.name = RHS.name)) AS LHS
		   CROSS JOIN
		     (SELECT *
		      FROM affiliated_with
		      WHERE (primaryaffiliation = 1.0)) AS RHS)
		ORDER BY physician
		
	Empty DataFrame
	Columns: [physician, department]
	Index: []
No solution tests/spider/hospital_1/0034.yaml
No solution tests/spider/hospital_1/0036.yaml
No solution tests/spider/hospital_1/0037.yaml
No solution tests/spider/hospital_1/0039.yaml
No solution tests/spider/hospital_1/0046.yaml
No solution tests/spider/hospital_1/0047.yaml
Wrong output for base solution in spider/hospital_1/0048
	EXPECTED
		SELECT count(*)
		FROM patient
		WHERE SSN NOT IN
		    (SELECT T1.patient
		     FROM Prescribes AS T1
		     JOIN Medication AS T2 ON T1.Medication = T2.Code
		     WHERE T2.name = 'Procrastin-X' )
	   count(*)
	0         3
	ACTUAL
		
		SELECT DISTINCT `n` AS `count___`
		FROM
		  (SELECT `LHS`.`ssn` AS `ssn`,
		          `LHS`.`name` AS `name`,
		          `LHS`.`address` AS `address`,
		          `LHS`.`phone` AS `phone`,
		          `LHS`.`insuranceid` AS `insuranceid`,
		          `LHS`.`pcp` AS `pcp`,
		          `LHS`.`code` AS `code`,
		          `LHS`.`brand` AS `brand`,
		          `LHS`.`description` AS `description`,
		          `RHS`.`physician` AS `physician`,
		          `RHS`.`patient` AS `patient`,
		          `RHS`.`medication` AS `medication`,
		          `RHS`.`date` AS `date`,
		          `RHS`.`appointment` AS `appointment`,
		          `RHS`.`dose` AS `dose`,
		          `RHS`.`n` AS `n`
		   FROM
		     (SELECT `LHS`.`ssn` AS `ssn`,
		             `LHS`.`name` AS `name`,
		             `LHS`.`address` AS `address`,
		             `LHS`.`phone` AS `phone`,
		             `LHS`.`insuranceid` AS `insuranceid`,
		             `LHS`.`pcp` AS `pcp`,
		             `RHS`.`code` AS `code`,
		             `RHS`.`brand` AS `brand`,
		             `RHS`.`description` AS `description`
		      FROM `patient` AS `LHS`
		      INNER JOIN
		        (SELECT *
		         FROM `medication`
		         WHERE (`name` != 'Procrastin-X')) AS RHS ON (LHS.name = RHS.name)) AS LHS
		   CROSS JOIN
		     (SELECT physician,
		             patient,
		             medication, date, appointment,
		                               dose,
		                               COUNT(*) OVER () AS n
		      FROM prescribes) AS RHS)
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___]
	Index: []
No solution tests/spider/hr_1/0006.yaml
No solution tests/spider/hr_1/0007.yaml
No solution tests/spider/hr_1/0008.yaml
No solution tests/spider/hr_1/0012.yaml
Error while executing solution for spider/hr_1/0016
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `employee_id`,
	       `first_name`,
	       `last_name`,
	       `email`,
	       `phone_number`,
	       `hire_date`,
	       `job_id`,
	       `salary`,
	       `commission_pct`,
	       `manager_id`,
	       `department_id`
	FROM `employees`
	WHERE (`hire_date` <= parse_datetime('2002-06-21'))
	ORDER BY employee_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/hr_1/0017.yaml
Error while executing solution for spider/hr_1/0018
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `employee_id`,
	       `first_name`,
	       `last_name`,
	       `email`,
	       `phone_number`,
	       `hire_date`,
	       `job_id`,
	       `salary`,
	       `commission_pct`,
	       `manager_id`,
	       `department_id`
	FROM `employees`
	WHERE (`hire_date` > parse_datetime('1987-09-07'))
	ORDER BY employee_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/hr_1/0020.yaml
No solution tests/spider/hr_1/0022.yaml
No solution tests/spider/hr_1/0031.yaml
No solution tests/spider/hr_1/0033.yaml
No solution tests/spider/hr_1/0035.yaml
No solution tests/spider/hr_1/0036.yaml
No solution tests/spider/hr_1/0039.yaml
No solution tests/spider/hr_1/0043.yaml
No solution tests/spider/hr_1/0044.yaml
No solution tests/spider/hr_1/0045.yaml
No solution tests/spider/hr_1/0046.yaml
No solution tests/spider/hr_1/0047.yaml
No solution tests/spider/hr_1/0048.yaml
No solution tests/spider/hr_1/0050.yaml
No solution tests/spider/hr_1/0051.yaml
No solution tests/spider/hr_1/0052.yaml
No solution tests/spider/hr_1/0053.yaml
No solution tests/spider/hr_1/0054.yaml
No solution tests/spider/hr_1/0055.yaml
No solution tests/spider/hr_1/0057.yaml
No solution tests/spider/hr_1/0059.yaml
No solution tests/spider/icfp_1/0021.yaml
No solution tests/spider/icfp_1/0022.yaml
No solution tests/spider/icfp_1/0023.yaml
No solution tests/spider/icfp_1/0024.yaml
No solution tests/spider/icfp_1/0025.yaml
No solution tests/spider/icfp_1/0026.yaml
No solution tests/spider/icfp_1/0027.yaml
No solution tests/spider/inn_1/0003.yaml
No solution tests/spider/inn_1/0006.yaml
No solution tests/spider/inn_1/0016.yaml
No solution tests/spider/inn_1/0017.yaml
No solution tests/spider/inn_1/0021.yaml
Error while executing solution for spider/inn_1/0029
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT bedtype) OVER () AS count_distinct_bedtype_
	FROM rooms
	ORDER BY count_distinct_bedtype_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/inn_1/0030.yaml
Wrong output for base solution in spider/inn_1/0033
	EXPECTED
		SELECT T2.roomName,
		       count(*),
		       T1.Room
		FROM Reservations AS T1
		JOIN Rooms AS T2 ON T1.Room = T2.RoomId
		GROUP BY T1.Room
	                   roomname  count(*) room
	0        Abscond or bolster        51  AOB
	1       Riddle to exculpate        55  RTE
	2    Mendicant with cryptic        56  MWC
	3      Interim but salutary        59  IBS
	4       Thrift and accolade        59  TAA
	5     Harbinger but bequest        60  HBB
	6      Recluse and defiance        62  RND
	7  Immutable before decorum        63  IBD
	8        Frugal not apropos        66  FNA
	9      Convoke and sanguine        69  CAS
	ACTUAL
		
		SELECT roomname,
		       n AS count___,
		       roomid AS room
		FROM
		  (SELECT LHS.roomid AS roomid,
		          LHS.roomname AS roomname,
		          LHS.beds AS beds,
		          LHS.bedtype AS bedtype,
		          LHS.maxoccupancy AS maxoccupancy,
		          LHS.baseprice AS baseprice,
		          LHS.decor AS decor,
		          RHS.checkout AS checkout,
		          RHS.n AS n
		   FROM rooms AS LHS
		   INNER JOIN
		     (SELECT checkout,
		             room,
		             COUNT() AS n
		      FROM reservations
		      GROUP BY checkout,
		               room) AS RHS ON (LHS.roomid = RHS.room))
		ORDER BY roomname
		
	                roomname  count___ room
	0     Abscond or bolster         1  AOB
	1     Abscond or bolster         1  AOB
	2     Abscond or bolster         1  AOB
	3     Abscond or bolster         1  AOB
	4     Abscond or bolster         1  AOB
	..                   ...       ...  ...
	595  Thrift and accolade         1  TAA
	596  Thrift and accolade         1  TAA
	597  Thrift and accolade         1  TAA
	598  Thrift and accolade         1  TAA
	599  Thrift and accolade         1  TAA
	
	[600 rows x 3 columns]
Wrong output for base solution in spider/inn_1/0034
	EXPECTED
		SELECT T2.roomName
		FROM Reservations AS T1
		JOIN Rooms AS T2 ON T1.Room = T2.RoomId
		GROUP BY T1.Room
		HAVING count(*) > 60
	                   roomname
	0      Convoke and sanguine
	1        Frugal not apropos
	2  Immutable before decorum
	3      Recluse and defiance
	ACTUAL
		
		SELECT roomname
		FROM
		  (SELECT roomid,
		          roomname,
		          beds,
		          bedtype,
		          maxoccupancy,
		          baseprice,
		          decor,
		          checkout,
		          n,
		          roomid AS room
		   FROM
		     (SELECT LHS.roomid AS roomid,
		             LHS.roomname AS roomname,
		             LHS.beds AS beds,
		             LHS.bedtype AS bedtype,
		             LHS.maxoccupancy AS maxoccupancy,
		             LHS.baseprice AS baseprice,
		             LHS.decor AS decor,
		             RHS.checkout AS checkout,
		             RHS.n AS n
		      FROM rooms AS LHS
		      INNER JOIN
		        (SELECT checkout,
		                room,
		                COUNT() AS n
		         FROM reservations
		         GROUP BY checkout,
		                  room) AS RHS ON (LHS.roomid = RHS.room)))
		WHERE (n > 60.0)
		ORDER BY roomname
		
	Empty DataFrame
	Columns: [roomname]
	Index: []
No solution tests/spider/inn_1/0036.yaml
No solution tests/spider/insurance_and_eClaims/0001.yaml
No solution tests/spider/insurance_and_eClaims/0006.yaml
No solution tests/spider/insurance_and_eClaims/0012.yaml
No solution tests/spider/insurance_and_eClaims/0015.yaml
No solution tests/spider/insurance_and_eClaims/0017.yaml
No solution tests/spider/insurance_fnol/0003.yaml
No solution tests/spider/insurance_fnol/0004.yaml
No solution tests/spider/insurance_fnol/0006.yaml
No solution tests/spider/insurance_fnol/0010.yaml
No solution tests/spider/insurance_fnol/0012.yaml
No solution tests/spider/insurance_fnol/0013.yaml
No solution tests/spider/insurance_fnol/0018.yaml
No solution tests/spider/insurance_fnol/0020.yaml
No solution tests/spider/insurance_fnol/0021.yaml
No solution tests/spider/insurance_policies/0001.yaml
No solution tests/spider/insurance_policies/0002.yaml
No solution tests/spider/insurance_policies/0003.yaml
No solution tests/spider/insurance_policies/0006.yaml
No solution tests/spider/insurance_policies/0009.yaml
No solution tests/spider/insurance_policies/0015.yaml
No solution tests/spider/insurance_policies/0018.yaml
No solution tests/spider/journal_committee/0002.yaml
No solution tests/spider/journal_committee/0003.yaml
No solution tests/spider/journal_committee/0008.yaml
No solution tests/spider/journal_committee/0009.yaml
Wrong output for base solution in spider/loan_1/0004
	EXPECTED
		SELECT avg(no_of_customers)
		FROM bank
		WHERE state = 'Utah'
	   avg(no_of_customers)
	0                 123.0
	ACTUAL
		
		SELECT `no_of_customers` AS `avg_no_of_customers_`
		FROM `bank`
		WHERE (`state` = 'Utah')
		ORDER BY avg_no_of_customers_
		
	   avg_no_of_customers_
	0                   123
Error while executing solution for spider/loan_1/0013
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT acc_type) OVER () AS count_distinct_acc_type_
	FROM customer
	ORDER BY count_distinct_acc_type_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/loan_1/0014.yaml
No solution tests/spider/loan_1/0031.yaml
No solution tests/spider/loan_1/0032.yaml
No solution tests/spider/loan_1/0037.yaml
No solution tests/spider/local_govt_and_lot/0004.yaml
No solution tests/spider/local_govt_and_lot/0008.yaml
Error while executing solution for spider/local_govt_and_lot/0009
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT DISTINCT `thing_id`,
	                `type_of_thing_code`
	FROM
	  (SELECT `LHS`.`thing_id` AS `thing_id`,
	          `LHS`.`date_and_date` AS `date_and_date`,
	          `LHS`.`status_of_thing_code` AS `status_of_thing_code`,
	          `RHS`.`organization_id` AS `organization_id`,
	          `RHS`.`type_of_thing_code` AS `type_of_thing_code`,
	          `RHS`.`service_type_code` AS `service_type_code`,
	          `RHS`.`service_details` AS `service_details`
	   FROM `timed_status_of_things` AS `LHS`
	   INNER JOIN `things` AS `RHS` ON (`LHS`.`thing_id` = `RHS`.`thing_id`))
	WHERE (`status_of_thing_code` = 'Close'
	       OR `date_and_date` <= parse_datetime('2017-06-19 02:59:21'))
	ORDER BY thing_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/local_govt_and_lot/0014.yaml
Error while executing solution for spider/local_govt_and_lot/0016
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT customer_id) OVER () AS count___
	FROM
	  (SELECT *
	   FROM customers AS LHS
	   WHERE NOT EXISTS
	       (SELECT 1
	        FROM customer_events AS RHS
	        WHERE (LHS.customer_id = RHS.customer_id) ))
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/local_govt_and_lot/0017.yaml
No solution tests/spider/local_govt_in_alabama/0006.yaml
No solution tests/spider/local_govt_in_alabama/0008.yaml
Error while executing solution for spider/local_govt_in_alabama/0015
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT participant_id) OVER () AS count_distinct_participant_id_
	FROM participants_in_events
	ORDER BY count_distinct_participant_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/local_govt_mdm/0009.yaml
No solution tests/spider/local_govt_mdm/0010.yaml
No solution tests/spider/local_govt_mdm/0014.yaml
No solution tests/spider/machine_repair/0003.yaml
No solution tests/spider/machine_repair/0008.yaml
No solution tests/spider/machine_repair/0012.yaml
No solution tests/spider/manufactory_1/0003.yaml
Error while executing solution for spider/manufactory_1/0005
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT `code` AS `count___`
	FROM
	  (SELECT `code`,
	          `name`,
	          `headquarter`,
	          `founder`,
	          `revenue`,
	          COUNT(DISTINCT `founder`) OVER () AS `n_distinct`
	   FROM `manufacturers`)
	WHERE (`founder` = 'Andy')
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/manufactory_1/0007.yaml
Error while executing solution for spider/manufactory_1/0008
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT `headquarter`) OVER () AS `count___`
	FROM `manufacturers`
	WHERE (`headquarter` = 'Tokyo'
	       OR `headquarter` = 'Beijing')
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/manufactory_1/0009.yaml
No solution tests/spider/manufactory_1/0014.yaml
Error while executing solution for spider/manufactory_1/0023
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT `name`) OVER () AS `count_distinct_name_`
	FROM
	  (SELECT *
	   FROM `products` AS `LHS`
	   WHERE NOT EXISTS
	       (SELECT 1
	        FROM
	          (SELECT *
	           FROM `manufacturers`
	           WHERE (`name` = 'Sony')) AS RHS
	        WHERE (LHS.code = RHS.code) ))
	ORDER BY count_distinct_name_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/manufactory_1/0034.yaml
No solution tests/spider/manufactory_1/0039.yaml
No solution tests/spider/manufactory_1/0040.yaml
No solution tests/spider/manufacturer/0009.yaml
No solution tests/spider/manufacturer/0011.yaml
No solution tests/spider/match_season/0002.yaml
No solution tests/spider/match_season/0003.yaml
No solution tests/spider/match_season/0010.yaml
No solution tests/spider/match_season/0011.yaml
No solution tests/spider/match_season/0028.yaml
No solution tests/spider/medicine_enzyme_interaction/0008.yaml
No solution tests/spider/medicine_enzyme_interaction/0011.yaml
No solution tests/spider/medicine_enzyme_interaction/0015.yaml
No solution tests/spider/medicine_enzyme_interaction/0018.yaml
No solution tests/spider/medicine_enzyme_interaction/0019.yaml
No solution tests/spider/medicine_enzyme_interaction/0021.yaml
No solution tests/spider/mountain_photos/0006.yaml
No solution tests/spider/mountain_photos/0012.yaml
No solution tests/spider/mountain_photos/0015.yaml
No solution tests/spider/mountain_photos/0016.yaml
No solution tests/spider/movie_1/0006.yaml
No solution tests/spider/movie_1/0015.yaml
No solution tests/spider/movie_1/0017.yaml
No solution tests/spider/movie_1/0025.yaml
Error while executing solution for spider/movie_1/0028
	(sqlite3.OperationalError) near ".": syntax error
	[SQL: 
	SELECT DISTINCT title,
	                YEAR
	FROM
	  (SELECT LHS.mid AS mid,
	          LHS.title AS title,
	          LHS.year AS YEAR,
	          LHS.director AS director,
	          LHS.mid_other AS mid_other,
	          LHS.title_other AS title_other,
	          LHS.year_other AS year_other,
	          RHS.mid AS mid.other_other,
	          RHS.title AS title.other_other,
	          RHS.year AS year.other_other,
	          RHS.director AS director_other,
	          RHS.mid_other AS mid.other.other_other,
	          RHS.title_other AS title.other.other_other,
	          RHS.year_other AS year.other.other_other
	   FROM
	     (SELECT LHS.mid AS mid,
	             LHS.title AS title,
	             LHS.year AS YEAR,
	             LHS.director AS director,
	             RHS.mid AS mid_other,
	             RHS.title AS title_other,
	             RHS.year AS year_other
	      FROM movie AS LHS
	      INNER JOIN movie AS RHS ON (LHS.director = RHS.director)) AS LHS
	   CROSS JOIN
	     (SELECT LHS.mid AS mid,
	             LHS.title AS title,
	             LHS.year AS YEAR,
	             LHS.director AS director,
	             RHS.mid AS mid_other,
	             RHS.title AS title_other,
	             RHS.year AS year_other
	      FROM movie AS LHS
	      INNER JOIN movie AS RHS ON (LHS.director = RHS.director)) AS RHS)
	WHERE (title != title_other)
	ORDER BY title
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/movie_1/0032.yaml
No solution tests/spider/movie_1/0033.yaml
No solution tests/spider/movie_1/0034.yaml
No solution tests/spider/movie_1/0035.yaml
No solution tests/spider/movie_1/0036.yaml
No solution tests/spider/movie_1/0037.yaml
No solution tests/spider/movie_1/0048.yaml
No solution tests/spider/movie_1/0049.yaml
No solution tests/spider/music_1/0001.yaml
No solution tests/spider/music_1/0007.yaml
No solution tests/spider/music_1/0008.yaml
No solution tests/spider/music_1/0009.yaml
No solution tests/spider/music_1/0016.yaml
Wrong output for base solution in spider/music_1/0018
	EXPECTED
		SELECT avg(rating),
		       languages
		FROM song
		GROUP BY languages
	   avg(rating) languages
	0          7.0   english
	1          7.5    bangla
	ACTUAL
		
		SELECT meanrating AS avg_rating_,
		       languages
		FROM
		  (SELECT languages,
		          releasedate,
		          AVG(rating) AS meanrating
		   FROM song
		   GROUP BY languages,
		            releasedate)
		ORDER BY avg_rating_
		
	   avg_rating_ languages
	0          5.0    bangla
	1          6.0   english
	2          7.0    bangla
	3          8.0    bangla
	4          8.0   english
	5         10.0    bangla
No solution tests/spider/music_1/0019.yaml
No solution tests/spider/music_1/0023.yaml
No solution tests/spider/music_1/0024.yaml
No solution tests/spider/music_1/0027.yaml
No solution tests/spider/music_1/0028.yaml
No solution tests/spider/music_1/0030.yaml
No solution tests/spider/music_1/0035.yaml
No solution tests/spider/music_1/0037.yaml
No solution tests/spider/music_1/0041.yaml
No solution tests/spider/music_1/0046.yaml
No solution tests/spider/music_4/0005.yaml
Error while executing solution for spider/music_4/0011
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT artist_id) OVER () AS count_distinct_artist_id_
	FROM volume
	ORDER BY count_distinct_artist_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/music_4/0012.yaml
Wrong output for base solution in spider/music_4/0019
	EXPECTED
		SELECT Famous_Release_date
		FROM artist
		ORDER BY Age DESC
		LIMIT 1
	  famous_release_date
	0       June 15, 2009
	ACTUAL
		
		SELECT DISTINCT famous_release_date
		FROM
		  (SELECT age,
		          famous_release_date,
		          MAX(age) AS maxage
		   FROM artist
		   GROUP BY age,
		            famous_release_date)
		ORDER BY famous_release_date
		
	  famous_release_date
	0                2009
	1    January 21, 2008
	2       June 15, 2009
	3       June 23, 2008
	4       November 2007
No solution tests/spider/music_4/0027.yaml
Wrong output for base solution in spider/music_4/0029
	EXPECTED
		SELECT Issue_Date
		FROM artist AS T1
		JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
		WHERE T1.age <= 23
	  issue_date
	0     6 June
	ACTUAL
		
		SELECT artist AS issue_date
		FROM
		  (SELECT LHS.artist_id AS artist_id,
		          LHS.artist AS artist,
		          LHS.age AS age,
		          LHS.famous_title AS famous_title,
		          LHS.famous_release_date AS famous_release_date,
		          RHS.volume_id AS volume_id,
		          RHS.volume_issue AS volume_issue,
		          RHS.issue_date AS issue_date,
		          RHS.weeks_on_top AS weeks_on_top,
		          RHS.song AS song
		   FROM
		     (SELECT *
		      FROM artist
		      WHERE (age <= 23.0)) AS LHS
		   INNER JOIN volume AS RHS ON (LHS.artist_id = RHS.artist_id))
		ORDER BY issue_date
		
	    issue_date
	0  Black Flame
Error while executing ground truth for spider/musical/0009
	The column label 'Name' is not unique.
Wrong output for base solution in spider/network_2/0014
	EXPECTED
		SELECT avg(age),
		       job
		FROM Person
		WHERE gender = 'male'
		GROUP BY job
	   avg(age)       job
	0      35.0  engineer
	1      45.0    doctor
	ACTUAL
		
		SELECT `age` AS `avg_age_`,
		       `job`
		FROM
		  (SELECT `name`,
		          `age`,
		          `city`,
		          `gender`,
		          `job`,
		          AVG(`age`) OVER () AS `meanage`
		   FROM `person`)
		WHERE (`gender` = 'male'
		       AND meanage != age)
		ORDER BY avg_age_
		
	   avg_age_       job
	0        35  engineer
	1        45    doctor
Error while executing solution for spider/network_2/0018
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT `n_distinct` AS `count___`
	FROM
	  (SELECT `name`,
	          `age`,
	          `city`,
	          `gender`,
	          `job`,
	          COUNT(DISTINCT `age`) OVER () AS `n_distinct`
	   FROM
	     (SELECT `name`,
	             MAX(`age`) OVER () AS `age`,
	                             `city`,
	                             `gender`,
	                             `job`
	      FROM `person`))
	WHERE (`job` = 'engineer'
	       OR n_distinct <= age)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/network_2/0026.yaml
No solution tests/spider/network_2/0035.yaml
No solution tests/spider/network_2/0037.yaml
No solution tests/spider/network_2/0041.yaml
Error while executing solution for spider/network_2/0042
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT n_distinct AS count_distinct_name_
	FROM
	  (SELECT LHS.name AS name,
	          LHS.friend AS friend,
	          LHS.year AS YEAR,
	          LHS.n_distinct AS n_distinct,
	          RHS.name AS name_other,
	          RHS.age AS age,
	          RHS.city AS city,
	          RHS.gender AS gender,
	          RHS.job AS job
	   FROM
	     (SELECT name,
	             friend,
	             YEAR,
	             COUNT(DISTINCT name) OVER () AS n_distinct
	      FROM personfriend) AS LHS
	   CROSS JOIN person AS RHS)
	WHERE (name != friend
	       AND name != name_other)
	ORDER BY count_distinct_name_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/news_report/0010.yaml
No solution tests/spider/news_report/0011.yaml
Error while executing ground truth for spider/news_report/0012
	The column label 'Name' is not unique.
No solution tests/spider/news_report/0017.yaml
No solution tests/spider/news_report/0018.yaml
No solution tests/spider/party_host/0002.yaml
No solution tests/spider/party_host/0003.yaml
No solution tests/spider/party_people/0002.yaml
Wrong output for base solution in spider/party_people/0005
	EXPECTED
		SELECT minister
		FROM party
		WHERE took_office > 1961
		  OR took_office < 1959
	                 minister
	0  Dr. Kwame Nkrumah (MP)
	1        Kojo Botsio (MP)
	ACTUAL
		
		SELECT minister
		FROM party
		WHERE (took_office != 1961.0
		       AND took_office < 1959.0)
		ORDER BY minister
		
	                  minister
	0   Dr. Kwame Nkrumah (MP)
	1  Ebenezer Ako-Adjei (MP)
	2         Kojo Botsio (MP)
Wrong output for base solution in spider/party_people/0011
	EXPECTED
		SELECT T2.party_name
		FROM Member AS T1
		JOIN party AS T2 ON T1.party_id = T2.party_id
		GROUP BY T1.party_id
		ORDER BY count(*) DESC
		LIMIT 1
	  party_name
	0          3
	ACTUAL
		
		SELECT n AS party_name
		FROM
		  (SELECT COUNT() AS n
		   FROM
		     (SELECT party_id
		      FROM member INTERSECT SELECT party_id
		      FROM party))
		ORDER BY party_name
		
	   party_name
	0           0
Wrong output for base solution in spider/performance_attendance/0006
	EXPECTED
		SELECT Date
		FROM performance
		ORDER BY Attendance DESC
		LIMIT 1
	          date
	0  February 10
	ACTUAL
		
		SELECT DISTINCT date
		FROM
		  (SELECT date, performance_id,
		                MAX(attendance) AS attendance
		   FROM performance
		   GROUP BY date, performance_id)
		ORDER BY date
		
	          date
	0  February 10
	1  February 11
	2   February 2
	3   February 4
	4   February 5
	5   February 7
Wrong output for base solution in spider/performance_attendance/0009
	EXPECTED
		SELECT LOCATION
		FROM performance
		GROUP BY LOCATION
		HAVING COUNT(*) >= 2
	         location
	0  Verizon Center
	ACTUAL
		
		SELECT LOCATION
		FROM
		  (SELECT date, LOCATION,
		                COUNT() AS n
		   FROM performance
		   GROUP BY date, LOCATION)
		WHERE (n = 2.0)
		ORDER BY LOCATION
		
	Empty DataFrame
	Columns: [location]
	Index: []
Wrong output for base solution in spider/performance_attendance/0013
	EXPECTED
		SELECT T3.Date
		FROM member_attendance AS T1
		JOIN member AS T2 ON T1.Member_ID = T2.Member_ID
		JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
		WHERE T2.Role = "Violin"
	          date
	0  February 11
	1   February 2
	2   February 2
	3   February 5
	ACTUAL
		
		SELECT `date`
		FROM
		  (SELECT `LHS`.`member_id` AS `member_id`,
		          `LHS`.`name` AS `name`,
		          `LHS`.`nationality` AS `nationality`,
		          `LHS`.`role` AS `role`,
		          `LHS`.`performance_id` AS `performance_id`,
		          `LHS`.`date` AS `date`,
		          `LHS`.`host` AS `host`,
		          `LHS`.`location` AS `location`,
		          `LHS`.`attendance` AS `attendance`,
		          `RHS`.`num_of_pieces` AS `num_of_pieces`
		   FROM
		     (SELECT `LHS`.`member_id` AS `member_id`,
		             `LHS`.`name` AS `name`,
		             `LHS`.`nationality` AS `nationality`,
		             `LHS`.`role` AS `role`,
		             `RHS`.`performance_id` AS `performance_id`,
		             `RHS`.`date` AS `date`,
		             `RHS`.`host` AS `host`,
		             `RHS`.`location` AS `location`,
		             `RHS`.`attendance` AS `attendance`
		      FROM `member` AS `LHS`
		      CROSS JOIN `performance` AS `RHS`) AS `LHS`
		   INNER JOIN `member_attendance` AS `RHS` ON (`LHS`.`member_id` = `RHS`.`member_id`
		                                                  AND `LHS`.`performance_id` = `RHS`.`performance_id`))
		WHERE (`role` != 'Violin')
		ORDER BY date
		
	         date
	0  February 2
	1  February 4
	2  February 5
	3  February 7
No solution tests/spider/perpetrator/0002.yaml
No solution tests/spider/perpetrator/0003.yaml
Error while executing solution for spider/perpetrator/0007
	(sqlite3.OperationalError) no such column: RHS.home_town
	[SQL: 
	SELECT name
	FROM
	  (SELECT LHS.perpetrator_id AS perpetrator_id,
	          LHS.people_id AS people_id,
	          LHS.date AS date,
	          LHS.year AS YEAR,
	          LHS.location AS LOCATION,
	          LHS.country AS country,
	          LHS.killed AS killed,
	          LHS.injured AS injured,
	          RHS.name AS name,
	          RHS.height AS height,
	          RHS.weight AS weight,
	          RHS.home_town AS home_town
	   FROM perpetrator AS LHS
	   INNER JOIN people AS RHS ON (LHS.people_id = RHS.people_id))
	ORDER BY name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/perpetrator/0009
	(sqlite3.OperationalError) no such column: LHS.home_town
	[SQL: 
	SELECT name
	FROM
	  (SELECT name,
	          people_id,
	          MAX(weight) AS maxweight
	   FROM
	     (SELECT people_id,
	             name,
	             height,
	             weight,
	             home_town,
	             perpetrator_id,
	             people_id_other, date, YEAR,
	                                    LOCATION,
	                                    country,
	                                    killed,
	                                    people_id AS injured
	      FROM
	        (SELECT LHS.people_id AS people_id,
	                LHS.name AS name,
	                LHS.height AS height,
	                LHS.weight AS weight,
	                LHS.home_town AS home_town,
	                RHS.perpetrator_id AS perpetrator_id,
	                RHS.people_id AS people_id_other,
	                RHS.date AS date,
	                RHS.year AS YEAR,
	                RHS.location AS LOCATION,
	                RHS.country AS country,
	                RHS.killed AS killed
	         FROM people AS LHS
	         INNER JOIN perpetrator AS RHS ON (LHS.people_id = RHS.injured)))
	   GROUP BY name,
	            people_id)
	ORDER BY name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/perpetrator/0010
	(sqlite3.OperationalError) no such column: LHS.home_town
	[SQL: 
	SELECT DISTINCT sumkilled AS sum_t2_killed_
	FROM
	  (SELECT LHS.people_id AS people_id,
	          LHS.name AS name,
	          LHS.height AS height,
	          LHS.weight AS weight,
	          LHS.home_town AS home_town,
	          RHS.perpetrator_id AS perpetrator_id,
	          RHS.date AS date,
	          RHS.year AS YEAR,
	          RHS.location AS LOCATION,
	          RHS.country AS country,
	          RHS.killed AS killed,
	          RHS.injured AS injured,
	          RHS.sumkilled AS sumkilled
	   FROM people AS LHS
	   INNER JOIN
	     (SELECT perpetrator_id,
	             people_id, date, YEAR,
	                              LOCATION,
	                              country,
	                              killed,
	                              injured,
	                              SUM(killed) OVER () AS sumkilled
	      FROM perpetrator
	      WHERE (killed >= 1.84)) AS RHS ON (LHS.people_id = RHS.people_id))
	ORDER BY sum_t2_killed_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/perpetrator/0011
	(sqlite3.OperationalError) no such column: RHS.home_town
	[SQL: 
	SELECT `name`
	FROM
	  (SELECT `LHS`.`perpetrator_id` AS `perpetrator_id`,
	          `LHS`.`people_id` AS `people_id`,
	          `LHS`.`date` AS `date`,
	          `LHS`.`year` AS `year`,
	          `LHS`.`location` AS `location`,
	          `LHS`.`country` AS `country`,
	          `LHS`.`killed` AS `killed`,
	          `LHS`.`injured` AS `injured`,
	          `LHS`.`name` AS `name`,
	          `LHS`.`height` AS `height`,
	          `LHS`.`weight` AS `weight`,
	          `LHS`.`home_town` AS `home_town`
	   FROM
	     (SELECT `LHS`.`perpetrator_id` AS `perpetrator_id`,
	             `LHS`.`people_id` AS `people_id`,
	             `LHS`.`date` AS `date`,
	             `LHS`.`year` AS `year`,
	             `LHS`.`location` AS `location`,
	             `LHS`.`country` AS `country`,
	             `LHS`.`killed` AS `killed`,
	             `LHS`.`injured` AS `injured`,
	             `RHS`.`name` AS `name`,
	             `RHS`.`height` AS `height`,
	             `RHS`.`weight` AS `weight`,
	             `RHS`.`home_town` AS `home_town`
	      FROM `perpetrator` AS `LHS`
	      INNER JOIN `people` AS `RHS` ON (`LHS`.`people_id` = `RHS`.`people_id`)) AS `LHS`
	   INNER JOIN
	     (SELECT *
	      FROM `perpetrator`
	      WHERE (`country` = 'China'
	             OR `country` = 'Japan')) AS RHS ON (LHS.perpetrator_id = RHS.perpetrator_id
	                                                 AND LHS.people_id = RHS.people_id
	                                                 AND LHS.date = RHS.date
	                                                 AND LHS.year = RHS.year
	                                                 AND LHS.location = RHS.location
	                                                 AND LHS.country = RHS.country
	                                                 AND LHS.killed = RHS.killed
	                                                 AND LHS.injured = RHS.injured))
	ORDER BY name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/perpetrator/0012
	(sqlite3.OperationalError) no such column: RHS.home_town
	[SQL: 
	SELECT height
	FROM
	  (SELECT LHS.perpetrator_id AS perpetrator_id,
	          LHS.people_id AS people_id,
	          LHS.date AS date,
	          LHS.year AS YEAR,
	          LHS.location AS LOCATION,
	          LHS.country AS country,
	          LHS.killed AS killed,
	          LHS.injured AS injured,
	          RHS.name AS name,
	          RHS.height AS height,
	          RHS.weight AS weight,
	          RHS.home_town AS home_town
	   FROM perpetrator AS LHS
	   INNER JOIN people AS RHS ON (LHS.people_id = RHS.people_id))
	ORDER BY height
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/perpetrator/0016
	(sqlite3.OperationalError) no such column: RHS.home_town
	[SQL: 
	SELECT name
	FROM
	  (SELECT LHS.perpetrator_id AS perpetrator_id,
	          LHS.people_id AS people_id,
	          LHS.date AS date,
	          LHS.year AS YEAR,
	          LHS.location AS LOCATION,
	          LHS.country AS country,
	          LHS.killed AS killed,
	          LHS.injured AS injured,
	          RHS.name AS name,
	          RHS.height AS height,
	          RHS.weight AS weight,
	          RHS.home_town AS home_town
	   FROM perpetrator AS LHS
	   INNER JOIN people AS RHS ON (LHS.people_id = RHS.people_id))
	ORDER BY name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/perpetrator/0020.yaml
No solution tests/spider/phone_1/0002.yaml
No solution tests/spider/phone_1/0005.yaml
No solution tests/spider/phone_1/0007.yaml
No solution tests/spider/phone_1/0008.yaml
No solution tests/spider/phone_1/0009.yaml
No solution tests/spider/phone_1/0010.yaml
No solution tests/spider/phone_1/0011.yaml
No solution tests/spider/phone_1/0014.yaml
No solution tests/spider/phone_1/0015.yaml
No solution tests/spider/phone_1/0016.yaml
No solution tests/spider/phone_1/0017.yaml
No solution tests/spider/phone_1/0019.yaml
No solution tests/spider/phone_1/0025.yaml
No solution tests/spider/phone_1/0026.yaml
No solution tests/spider/phone_1/0027.yaml
No solution tests/spider/phone_market/0003.yaml
Wrong output for base solution in spider/pilot_record/0014
	EXPECTED
		SELECT T2.Pilot_name,
		       COUNT(*)
		FROM pilot_record AS T1
		JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID
		GROUP BY T2.Pilot_name
		HAVING COUNT(*) > 1
	         pilot_name  count(*)
	0  Patrick O'Bryant         3
	ACTUAL
		
		SELECT pilot_name,
		       n AS count___
		FROM
		  (SELECT LHS.date AS date,
		          LHS.pilot_id AS pilot_id,
		          LHS.n AS n,
		          RHS.pilot_name AS pilot_name,
		          RHS.rank AS rank,
		          RHS.age AS age,
		          RHS.nationality AS nationality,
		          RHS.position AS POSITION,
		          RHS.join_year AS join_year,
		          RHS.team AS team
		   FROM
		     (SELECT date, pilot_id,
		                   COUNT() AS n
		      FROM pilot_record
		      GROUP BY date, pilot_id) AS LHS
		   INNER JOIN pilot AS RHS ON (LHS.pilot_id = RHS.pilot_id))
		WHERE (n != 1.0)
		ORDER BY pilot_name
		
	Empty DataFrame
	Columns: [pilot_name, count___]
	Index: []
No solution tests/spider/product_catalog/0001.yaml
No solution tests/spider/product_catalog/0005.yaml
No solution tests/spider/product_catalog/0006.yaml
No solution tests/spider/product_catalog/0008.yaml
No solution tests/spider/product_catalog/0011.yaml
No solution tests/spider/product_catalog/0014.yaml
Wrong output for base solution in spider/product_catalog/0017
	EXPECTED
		SELECT t1.attribute_name,
		       t1.attribute_id
		FROM Attribute_Definitions AS t1
		JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id
		WHERE t2.attribute_value = 0
	  attribute_name  attribute_id
	0          Black             2
	1          Black             2
	2          Black             2
	3         Yellow             3
	4         Yellow             3
	5          Sweet             4
	6          Sweet             4
	7          Sweet             4
	ACTUAL
		
		SELECT attribute_name,
		       attribute_id
		FROM
		  (SELECT LHS.attribute_id AS attribute_id,
		          LHS.attribute_name AS attribute_name,
		          LHS.attribute_data_type AS attribute_data_type,
		          LHS.catalog_entry_id AS catalog_entry_id,
		          LHS.catalog_level_number AS catalog_level_number,
		          LHS.attribute_value AS attribute_value
		   FROM
		     (SELECT LHS.attribute_id AS attribute_id,
		             LHS.attribute_name AS attribute_name,
		             LHS.attribute_data_type AS attribute_data_type,
		             RHS.catalog_entry_id AS catalog_entry_id,
		             RHS.catalog_level_number AS catalog_level_number,
		             RHS.attribute_value AS attribute_value
		      FROM attribute_definitions AS LHS
		      INNER JOIN catalog_contents_additional_attributes AS RHS ON (LHS.attribute_id = RHS.attribute_id)) AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM catalog_contents_additional_attributes
		      WHERE (attribute_value = 0.0)) AS RHS ON (LHS.attribute_id = RHS.attribute_id
		                                                AND LHS.catalog_entry_id = RHS.catalog_entry_id
		                                                AND LHS.catalog_level_number = RHS.catalog_level_number
		                                                AND LHS.attribute_value = RHS.attribute_value))
		ORDER BY attribute_name
		
	Empty DataFrame
	Columns: [attribute_name, attribute_id]
	Index: []
No solution tests/spider/products_for_hire/0002.yaml
No solution tests/spider/products_for_hire/0003.yaml
Wrong output for base solution in spider/products_for_hire/0008
	EXPECTED
		SELECT T2.product_name
		FROM view_product_availability AS T1
		JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id
		WHERE T1.available_yn = 1
	        product_name
	0  Book collection A
	1  Book collection C
	2   DVD collection B
	ACTUAL
		
		SELECT product_name
		FROM
		  (SELECT LHS.product_id AS product_id,
		          LHS.product_type_code AS product_type_code,
		          LHS.daily_hire_cost AS daily_hire_cost,
		          LHS.product_name AS product_name,
		          LHS.product_description AS product_description,
		          LHS.booking_id AS booking_id,
		          LHS.status_date AS status_date,
		          LHS.available_yn AS available_yn
		   FROM
		     (SELECT LHS.product_id AS product_id,
		             LHS.product_type_code AS product_type_code,
		             LHS.daily_hire_cost AS daily_hire_cost,
		             LHS.product_name AS product_name,
		             LHS.product_description AS product_description,
		             RHS.booking_id AS booking_id,
		             RHS.status_date AS status_date,
		             RHS.available_yn AS available_yn
		      FROM products_for_hire AS LHS
		      INNER JOIN view_product_availability AS RHS ON (LHS.product_id = RHS.product_id)) AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM view_product_availability
		      WHERE (available_yn = 1.0)) AS RHS ON (LHS.product_id = RHS.product_id
		                                             AND LHS.booking_id = RHS.booking_id
		                                             AND LHS.status_date = RHS.status_date
		                                             AND LHS.available_yn = RHS.available_yn))
		ORDER BY product_name
		
	Empty DataFrame
	Columns: [product_name]
	Index: []
No solution tests/spider/products_for_hire/0011.yaml
Wrong output for base solution in spider/products_for_hire/0012
	EXPECTED
		SELECT max(booked_count),
		       min(booked_count),
		       avg(booked_count)
		FROM products_booked
	   max(booked_count)  min(booked_count)  avg(booked_count)
	0                  9                  1                4.0
	ACTUAL
		
		SELECT DISTINCT MAX(booked_count) OVER () AS max_booked_count_,
		                                       returned_yn AS min_booked_count_,
		                                       meanbooked_count AS avg_booked_count_
		FROM
		  (SELECT booked_amount,
		          returned_yn,
		          booked_count,
		          AVG(booked_count) OVER () AS meanbooked_count
		   FROM
		     (SELECT booked_amount,
		             returned_yn,
		             MIN(booked_count) AS booked_count
		      FROM products_booked
		      GROUP BY booked_amount,
		               returned_yn))
		ORDER BY max_booked_count_
		
	   max_booked_count_ min_booked_count_  avg_booked_count_
	0                  9                 1                4.0
No solution tests/spider/products_for_hire/0013.yaml
No solution tests/spider/products_for_hire/0014.yaml
No solution tests/spider/products_for_hire/0016.yaml
No solution tests/spider/products_gen_characteristics/0005.yaml
No solution tests/spider/products_gen_characteristics/0006.yaml
Wrong output for base solution in spider/products_gen_characteristics/0010
	EXPECTED
		SELECT count(*)
		FROM products
		WHERE product_category_code = "Spices"
		  AND typical_buying_price > 1000
	   count(*)
	0         2
	ACTUAL
		
		SELECT DISTINCT `n_distinct` AS `count___`
		FROM
		  (SELECT `color_code`,
		          COUNT(DISTINCT `typical_buying_price`) AS `n_distinct`
		   FROM
		     (SELECT *
		      FROM `products`
		      WHERE (`product_category_code` = 'Spices'
		             OR typical_buying_price >= 1000.0))
		   GROUP BY color_code)
		ORDER BY count___
		
	   count___
	0         2
	1         3
	2         4
No solution tests/spider/products_gen_characteristics/0014.yaml
Wrong output for base solution in spider/products_gen_characteristics/0035
	EXPECTED
		SELECT t2.unit_of_measure
		FROM products AS t1
		JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
		WHERE t1.product_name = "cumin"
	        unit_of_measure
	0  Weight - pound,kilo.
	ACTUAL
		
		SELECT `unit_of_measure`
		FROM
		  (SELECT `LHS`.`product_category_code` AS `product_category_code`,
		          `LHS`.`product_category_description` AS `product_category_description`,
		          `LHS`.`unit_of_measure` AS `unit_of_measure`,
		          `LHS`.`product_id` AS `product_id`,
		          `LHS`.`color_code` AS `color_code`,
		          `LHS`.`product_name` AS `product_name`,
		          `LHS`.`typical_buying_price` AS `typical_buying_price`,
		          `LHS`.`typical_selling_price` AS `typical_selling_price`,
		          `LHS`.`product_description` AS `product_description`,
		          `LHS`.`other_product_details` AS `other_product_details`
		   FROM
		     (SELECT `LHS`.`product_category_code` AS `product_category_code`,
		             `LHS`.`product_category_description` AS `product_category_description`,
		             `LHS`.`unit_of_measure` AS `unit_of_measure`,
		             `RHS`.`product_id` AS `product_id`,
		             `RHS`.`color_code` AS `color_code`,
		             `RHS`.`product_name` AS `product_name`,
		             `RHS`.`typical_buying_price` AS `typical_buying_price`,
		             `RHS`.`typical_selling_price` AS `typical_selling_price`,
		             `RHS`.`product_description` AS `product_description`,
		             `RHS`.`other_product_details` AS `other_product_details`
		      FROM `ref_product_categories` AS `LHS`
		      INNER JOIN `products` AS `RHS` ON (`LHS`.`product_category_code` = `RHS`.`product_category_code`)) AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `products`
		      WHERE (`product_name` = 'cumin')) AS RHS ON (LHS.product_category_code = RHS.product_category_code
		                                                   AND LHS.product_id = RHS.product_id
		                                                   AND LHS.color_code = RHS.color_code
		                                                   AND LHS.product_name = RHS.product_name
		                                                   AND LHS.typical_buying_price = RHS.typical_buying_price
		                                                   AND LHS.typical_selling_price = RHS.typical_selling_price
		                                                   AND LHS.product_description = RHS.product_description
		                                                   AND LHS.other_product_details = RHS.other_product_details))
		ORDER BY unit_of_measure
		
	Empty DataFrame
	Columns: [unit_of_measure]
	Index: []
Wrong output for base solution in spider/products_gen_characteristics/0036
	EXPECTED
		SELECT t2.unit_of_measure,
		       t2.product_category_code
		FROM products AS t1
		JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
		WHERE t1.product_name = "chervil"
	        unit_of_measure product_category_code
	0  Handful                              Herbs
	ACTUAL
		
		SELECT `unit_of_measure`,
		       `product_category_code`
		FROM
		  (SELECT `LHS`.`product_category_code` AS `product_category_code`,
		          `LHS`.`product_category_description` AS `product_category_description`,
		          `LHS`.`unit_of_measure` AS `unit_of_measure`,
		          `LHS`.`product_id` AS `product_id`,
		          `LHS`.`color_code` AS `color_code`,
		          `LHS`.`product_name` AS `product_name`,
		          `LHS`.`typical_buying_price` AS `typical_buying_price`,
		          `LHS`.`typical_selling_price` AS `typical_selling_price`,
		          `LHS`.`product_description` AS `product_description`,
		          `LHS`.`other_product_details` AS `other_product_details`
		   FROM
		     (SELECT `LHS`.`product_category_code` AS `product_category_code`,
		             `LHS`.`product_category_description` AS `product_category_description`,
		             `LHS`.`unit_of_measure` AS `unit_of_measure`,
		             `RHS`.`product_id` AS `product_id`,
		             `RHS`.`color_code` AS `color_code`,
		             `RHS`.`product_name` AS `product_name`,
		             `RHS`.`typical_buying_price` AS `typical_buying_price`,
		             `RHS`.`typical_selling_price` AS `typical_selling_price`,
		             `RHS`.`product_description` AS `product_description`,
		             `RHS`.`other_product_details` AS `other_product_details`
		      FROM `ref_product_categories` AS `LHS`
		      INNER JOIN `products` AS `RHS` ON (`LHS`.`product_category_code` = `RHS`.`product_category_code`)) AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `products`
		      WHERE (`product_name` = 'chervil')) AS RHS ON (LHS.product_category_code = RHS.product_category_code
		                                                     AND LHS.product_id = RHS.product_id
		                                                     AND LHS.color_code = RHS.color_code
		                                                     AND LHS.product_name = RHS.product_name
		                                                     AND LHS.typical_buying_price = RHS.typical_buying_price
		                                                     AND LHS.typical_selling_price = RHS.typical_selling_price
		                                                     AND LHS.product_description = RHS.product_description
		                                                     AND LHS.other_product_details = RHS.other_product_details))
		ORDER BY unit_of_measure
		
	Empty DataFrame
	Columns: [unit_of_measure, product_category_code]
	Index: []
Wrong output for base solution in spider/products_gen_characteristics/0039
	EXPECTED
		SELECT t2.color_description
		FROM products AS t1
		JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
		GROUP BY t2.color_description
		ORDER BY count(*) ASC
		LIMIT 1
	  color_description
	0             black
	ACTUAL
		
		SELECT DISTINCT color_description
		FROM
		  (SELECT LHS.color_code AS color_code,
		          LHS.color_description AS color_description,
		          LHS.product_id AS product_id,
		          LHS.product_category_code AS product_category_code,
		          LHS.product_name AS product_name,
		          LHS.typical_buying_price AS typical_buying_price,
		          LHS.typical_selling_price AS typical_selling_price,
		          LHS.product_description AS product_description,
		          LHS.other_product_details AS other_product_details,
		          LHS.product_id_other AS product_id_other,
		          LHS.color_code_other AS color_code_other,
		          LHS.product_category_code_other AS product_category_code_other,
		          LHS.product_name_other AS product_name_other,
		          LHS.typical_selling_price_other AS typical_selling_price_other,
		          LHS.product_description_other AS product_description_other,
		          RHS.n AS n
		   FROM
		     (SELECT LHS.color_code AS color_code,
		             LHS.color_description AS color_description,
		             LHS.product_id AS product_id,
		             LHS.product_category_code AS product_category_code,
		             LHS.product_name AS product_name,
		             LHS.typical_buying_price AS typical_buying_price,
		             LHS.typical_selling_price AS typical_selling_price,
		             LHS.product_description AS product_description,
		             LHS.other_product_details AS other_product_details,
		             RHS.product_id_other AS product_id_other,
		             RHS.color_code_other AS color_code_other,
		             RHS.product_category_code_other AS product_category_code_other,
		             RHS.product_name_other AS product_name_other,
		             RHS.typical_selling_price_other AS typical_selling_price_other,
		             RHS.product_description_other AS product_description_other
		      FROM
		        (SELECT LHS.color_code AS color_code,
		                LHS.color_description AS color_description,
		                RHS.product_id AS product_id,
		                RHS.product_category_code AS product_category_code,
		                RHS.product_name AS product_name,
		                RHS.typical_buying_price AS typical_buying_price,
		                RHS.typical_selling_price AS typical_selling_price,
		                RHS.product_description AS product_description,
		                RHS.other_product_details AS other_product_details
		         FROM ref_colors AS LHS
		         INNER JOIN products AS RHS ON (LHS.color_code = RHS.color_code)) AS LHS
		      INNER JOIN
		        (SELECT product_id,
		                color_code,
		                product_category_code,
		                product_name,
		                other_product_details AS typical_buying_price,
		                typical_selling_price,
		                product_description,
		                other_product_details,
		                product_id_other,
		                color_code_other,
		                product_category_code_other,
		                product_name_other,
		                typical_selling_price_other,
		                product_description_other
		         FROM
		           (SELECT product_id,
		                   color_code,
		                   product_category_code,
		                   product_name,
		                   typical_buying_price,
		                   typical_selling_price,
		                   product_description,
		                   typical_selling_price AS other_product_details,
		                   product_id_other,
		                   color_code_other,
		                   product_category_code_other,
		                   product_name_other,
		                   typical_selling_price_other,
		                   product_description_other
		            FROM
		              (SELECT LHS.product_id AS product_id,
		                      LHS.color_code AS color_code,
		                      LHS.product_category_code AS product_category_code,
		                      LHS.product_name AS product_name,
		                      LHS.typical_buying_price AS typical_buying_price,
		                      LHS.typical_selling_price AS typical_selling_price,
		                      LHS.product_description AS product_description,
		                      LHS.other_product_details AS other_product_details,
		                      RHS.product_id AS product_id_other,
		                      RHS.color_code AS color_code_other,
		                      RHS.product_category_code AS product_category_code_other,
		                      RHS.product_name AS product_name_other,
		                      RHS.typical_selling_price AS typical_selling_price_other,
		                      RHS.product_description AS product_description_other
		               FROM products AS LHS
		               INNER JOIN products AS RHS ON (LHS.typical_selling_price = RHS.other_product_details
		                                                 AND LHS.other_product_details = RHS.typical_buying_price)))) AS RHS ON (LHS.color_code = RHS.color_code
		                                                                                                                         AND LHS.product_id = RHS.product_id
		                                                                                                                         AND LHS.product_category_code = RHS.product_category_code
		                                                                                                                         AND LHS.product_name = RHS.product_name
		                                                                                                                         AND LHS.typical_buying_price = RHS.typical_buying_price
		                                                                                                                         AND LHS.typical_selling_price = RHS.typical_selling_price
		                                                                                                                         AND LHS.product_description = RHS.product_description
		                                                                                                                         AND LHS.other_product_details = RHS.other_product_details)) AS LHS
		   INNER JOIN
		     (SELECT other_product_details,
		             product_description,
		             COUNT() AS n
		      FROM products
		      GROUP BY other_product_details,
		               product_description) AS RHS ON (LHS.product_description = RHS.product_description
		                                               AND LHS.other_product_details = RHS.other_product_details))
		ORDER BY color_description
		
	Empty DataFrame
	Columns: [color_description]
	Index: []
Wrong output for base solution in spider/products_gen_characteristics/0040
	EXPECTED
		SELECT t3.characteristic_name
		FROM products AS t1
		JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id
		JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
		GROUP BY t3.characteristic_name
		ORDER BY count(*) DESC
		LIMIT 1
	  characteristic_name
	0                fast
	ACTUAL
		
		SELECT characteristic_name
		FROM
		  (SELECT characteristic_id,
		          characteristic_type_code,
		          characteristic_data_type,
		          characteristic_name,
		          other_characteristic_details,
		          product_id,
		          color_code,
		          product_category_code,
		          product_name,
		          typical_buying_price,
		          typical_selling_price,
		          product_characteristic_value,
		          n,
		          characteristic_data_type AS product_description
		   FROM
		     (SELECT LHS.characteristic_id AS characteristic_id,
		             LHS.characteristic_type_code AS characteristic_type_code,
		             LHS.characteristic_data_type AS characteristic_data_type,
		             LHS.characteristic_name AS characteristic_name,
		             LHS.other_characteristic_details AS other_characteristic_details,
		             RHS.product_id AS product_id,
		             RHS.color_code AS color_code,
		             RHS.product_category_code AS product_category_code,
		             RHS.product_name AS product_name,
		             RHS.typical_buying_price AS typical_buying_price,
		             RHS.typical_selling_price AS typical_selling_price,
		             RHS.product_characteristic_value AS product_characteristic_value,
		             RHS.n AS n
		      FROM characteristics AS LHS
		      INNER JOIN
		        (SELECT product_id,
		                color_code,
		                product_category_code,
		                product_name,
		                typical_buying_price,
		                typical_selling_price,
		                product_description,
		                other_product_details,
		                product_characteristic_value,
		                product_id AS n
		         FROM
		           (SELECT LHS.product_id AS product_id,
		                   LHS.color_code AS color_code,
		                   LHS.product_category_code AS product_category_code,
		                   LHS.product_name AS product_name,
		                   LHS.typical_buying_price AS typical_buying_price,
		                   LHS.typical_selling_price AS typical_selling_price,
		                   LHS.product_description AS product_description,
		                   LHS.other_product_details AS other_product_details,
		                   RHS.product_characteristic_value AS product_characteristic_value
		            FROM products AS LHS
		            INNER JOIN
		              (SELECT product_characteristic_value,
		                      COUNT() AS n
		               FROM product_characteristics
		               GROUP BY product_characteristic_value) AS RHS ON (LHS.product_id = RHS.n))) AS RHS ON (LHS.characteristic_data_type = RHS.product_description
		                                                                                                      AND LHS.other_characteristic_details = RHS.other_product_details)))
		ORDER BY characteristic_name
		
	Empty DataFrame
	Columns: [characteristic_name]
	Index: []
Wrong output for base solution in spider/products_gen_characteristics/0043
	EXPECTED
		SELECT count(*)
		FROM Ref_colors
		WHERE color_code NOT IN
		    (SELECT color_code
		     FROM products)
	   count(*)
	0         2
	ACTUAL
		
		SELECT color_code AS count___
		FROM
		  (SELECT LHS.color_code AS color_code,
		          LHS.product_category_code AS product_category_code,
		          LHS.n AS n,
		          RHS.color_code AS color_code_other,
		          RHS.color_description AS color_description
		   FROM
		     (SELECT color_code,
		             product_category_code,
		             COUNT() AS n
		      FROM products
		      GROUP BY color_code,
		               product_category_code) AS LHS
		   CROSS JOIN ref_colors AS RHS)
		WHERE (color_code <= n
		       AND n > color_code_other)
		ORDER BY count___
		
	  count___
	0        2
No solution tests/spider/program_share/0001.yaml
No solution tests/spider/program_share/0002.yaml
No solution tests/spider/program_share/0005.yaml
No solution tests/spider/program_share/0006.yaml
No solution tests/spider/program_share/0008.yaml
No solution tests/spider/program_share/0015.yaml
No solution tests/spider/program_share/0018.yaml
No solution tests/spider/program_share/0019.yaml
No solution tests/spider/protein_institute/0005.yaml
No solution tests/spider/protein_institute/0008.yaml
No solution tests/spider/protein_institute/0014.yaml
Wrong output for base solution in spider/protein_institute/0017
	EXPECTED
		SELECT count(*)
		FROM institution AS T1
		JOIN protein AS T2 ON T1.institution_id = T2.institution_id
		WHERE T1.founded > 1880
		  OR T1.type = 'Private'
	   count(*)
	0         5
	ACTUAL
		
		SELECT DISTINCT `institution_id` AS `count___`
		FROM
		  (SELECT `LHS`.`institution_id` AS `institution_id`,
		          `LHS`.`institution` AS `institution`,
		          `LHS`.`location` AS `location`,
		          `LHS`.`founded` AS `founded`,
		          `LHS`.`type` AS `type`,
		          `LHS`.`enrollment` AS `enrollment`,
		          `LHS`.`team` AS `team`,
		          `LHS`.`primary_conference` AS `primary_conference`,
		          `LHS`.`building_id` AS `building_id`,
		          `LHS`.`common_name` AS `common_name`,
		          `LHS`.`protein_name` AS `protein_name`,
		          `LHS`.`divergence_from_human_lineage` AS `divergence_from_human_lineage`,
		          `LHS`.`accession_number` AS `accession_number`,
		          `LHS`.`sequence_length` AS `sequence_length`,
		          `LHS`.`sequence_identity_to_human_protein` AS `sequence_identity_to_human_protein`,
		          `LHS`.`n` AS `n`
		   FROM
		     (SELECT `LHS`.`institution_id` AS `institution_id`,
		             `LHS`.`institution` AS `institution`,
		             `LHS`.`location` AS `location`,
		             `LHS`.`founded` AS `founded`,
		             `LHS`.`type` AS `type`,
		             `LHS`.`enrollment` AS `enrollment`,
		             `LHS`.`team` AS `team`,
		             `LHS`.`primary_conference` AS `primary_conference`,
		             `LHS`.`building_id` AS `building_id`,
		             `LHS`.`common_name` AS `common_name`,
		             `LHS`.`protein_name` AS `protein_name`,
		             `LHS`.`divergence_from_human_lineage` AS `divergence_from_human_lineage`,
		             `LHS`.`accession_number` AS `accession_number`,
		             `LHS`.`sequence_length` AS `sequence_length`,
		             `LHS`.`sequence_identity_to_human_protein` AS `sequence_identity_to_human_protein`,
		             `RHS`.`n` AS `n`
		      FROM
		        (SELECT `LHS`.`institution_id` AS `institution_id`,
		                `LHS`.`institution` AS `institution`,
		                `LHS`.`location` AS `location`,
		                `LHS`.`founded` AS `founded`,
		                `LHS`.`type` AS `type`,
		                `LHS`.`enrollment` AS `enrollment`,
		                `LHS`.`team` AS `team`,
		                `LHS`.`primary_conference` AS `primary_conference`,
		                `LHS`.`building_id` AS `building_id`,
		                `RHS`.`common_name` AS `common_name`,
		                `RHS`.`protein_name` AS `protein_name`,
		                `RHS`.`divergence_from_human_lineage` AS `divergence_from_human_lineage`,
		                `RHS`.`accession_number` AS `accession_number`,
		                `RHS`.`sequence_length` AS `sequence_length`,
		                `RHS`.`sequence_identity_to_human_protein` AS `sequence_identity_to_human_protein`
		         FROM `institution` AS `LHS`
		         INNER JOIN `protein` AS `RHS` ON (`LHS`.`institution_id` = `RHS`.`institution_id`)) AS `LHS`
		      INNER JOIN
		        (SELECT `institution`,
		                `institution_id`,
		                COUNT() AS `n`
		         FROM `institution`
		         GROUP BY `institution`,
		                  `institution_id`) AS `RHS` ON (`LHS`.`institution_id` = `RHS`.`institution_id`
		                                                 AND `LHS`.`institution` = `RHS`.`institution`)) AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM `institution`
		      WHERE (`type` = 'Private'
		             OR founded <= 1880.0)) AS RHS ON (LHS.institution_id = RHS.institution_id
		                                               AND LHS.institution = RHS.institution
		                                               AND LHS.location = RHS.location
		                                               AND LHS.founded = RHS.founded
		                                               AND LHS.type = RHS.type
		                                               AND LHS.enrollment = RHS.enrollment
		                                               AND LHS.team = RHS.team
		                                               AND LHS.primary_conference = RHS.primary_conference
		                                               AND LHS.building_id = RHS.building_id))
		ORDER BY count___
		
	  count___
	0        5
No solution tests/spider/protein_institute/0019.yaml
Wrong output for base solution in spider/protein_institute/0020
	EXPECTED
		SELECT count(*)
		FROM institution
		WHERE institution_id NOT IN
		    (SELECT institution_id
		     FROM protein)
	   count(*)
	0         7
	ACTUAL
		
		SELECT institution_id AS count___
		FROM
		  (SELECT LHS.institution_id AS institution_id,
		          LHS.institution AS institution,
		          LHS.location AS LOCATION,
		          LHS.founded AS founded,
		          LHS.type AS TYPE,
		          LHS.enrollment AS enrollment,
		          LHS.team AS team,
		          LHS.primary_conference AS primary_conference,
		          LHS.building_id AS building_id
		   FROM institution AS LHS
		   INNER JOIN
		     (SELECT COUNT(DISTINCT institution_id) AS n_distinct
		      FROM protein) AS RHS ON (LHS.building_id = RHS.n_distinct))
		ORDER BY count___
		
	  count___
	0        7
No solution tests/spider/race_track/0004.yaml
No solution tests/spider/race_track/0006.yaml
No solution tests/spider/race_track/0018.yaml
Error while executing ground truth for spider/race_track/0019
	The column label 'Name' is not unique.
No solution tests/spider/railway/0004.yaml
Error while executing solution for spider/railway/0007
	(sqlite3.OperationalError) near "FROM": syntax error
	[SQL: 
	SELECT name,
	       arrival
	FROM
	  (SELECT LHS.train_id AS train_id,
	          LHS.train_num AS train_num,
	          LHS.name AS name,
	          LHS.
	   FROM AS
	   FROM,
	           LHS.arrival AS arrival,
	           LHS.railway_id AS railway_id,
	           RHS.train_id AS train_id_other,
	           RHS.name AS name_other,
	           RHS.
	   FROM AS from_other,
	           RHS.railway_id AS railway_id_other
	   FROM train AS LHS
	   INNER JOIN train AS RHS ON (LHS.arrival = RHS.arrival
	                                  AND LHS.train_num = RHS.train_num))
	ORDER BY name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/railway/0009
	(sqlite3.OperationalError) near "FROM": syntax error
	[SQL: 
	SELECT name,
	       LOCATION
	FROM
	  (SELECT LHS.railway_id AS railway_id,
	          LHS.railway AS railway,
	          LHS.builder AS builder,
	          LHS.built AS built,
	          LHS.wheels AS wheels,
	          LHS.location AS LOCATION,
	          LHS.objectnumber AS objectnumber,
	          RHS.train_id AS train_id,
	          RHS.train_num AS train_num,
	          RHS.name AS name,
	          RHS.
	   FROM AS
	   FROM,
	           RHS.arrival AS arrival
	   FROM railway AS LHS
	   INNER JOIN train AS RHS ON (LHS.railway_id = RHS.railway_id))
	ORDER BY name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/railway/0012.yaml
No solution tests/spider/restaurant_1/0012.yaml
No solution tests/spider/restaurant_1/0022.yaml
Wrong output for base solution in spider/riding_club/0006
	EXPECTED
		SELECT Player_name
		FROM player
		ORDER BY Votes DESC
		LIMIT 1
	   player_name
	0  Jim Maloway
	ACTUAL
		
		SELECT DISTINCT rank AS player_name
		FROM
		  (SELECT player_name,
		          rank,
		          MAX(votes) AS votes
		   FROM player
		   GROUP BY player_name,
		            rank)
		ORDER BY player_name
		
	  player_name
	0         1st
	1         2nd
	2         3rd
	3         4th
Wrong output for base solution in spider/riding_club/0008
	EXPECTED
		SELECT Occupation
		FROM player
		GROUP BY Occupation
		ORDER BY COUNT(*) DESC
		LIMIT 1
	  occupation
	0    Student
	ACTUAL
		
		SELECT DISTINCT rank AS occupation
		FROM
		  (SELECT LHS.occupation AS occupation,
		          LHS.residence AS residence,
		          LHS.n AS n,
		          RHS.sponsor_name AS sponsor_name,
		          RHS.player_name AS player_name,
		          RHS.gender AS gender,
		          RHS.occupation AS occupation_other,
		          RHS.votes AS votes,
		          RHS.rank AS rank
		   FROM
		     (SELECT occupation,
		             residence,
		             COUNT() AS n
		      FROM player
		      GROUP BY occupation,
		               residence) AS LHS
		   INNER JOIN player AS RHS ON (LHS.n = RHS.player_id
		                                   AND LHS.residence = RHS.residence))
		ORDER BY occupation
		
	  occupation
	0        2nd
	1        3rd
Wrong output for base solution in spider/riding_club/0009
	EXPECTED
		SELECT Residence
		FROM player
		GROUP BY Residence
		HAVING COUNT(*) >= 2
	  residence
	0  Winnipeg
	ACTUAL
		
		SELECT DISTINCT rank AS residence
		FROM
		  (SELECT player_id,
		          sponsor_name,
		          player_name,
		          gender,
		          residence,
		          occupation,
		          votes,
		          rank,
		          COUNT(*) OVER () AS n
		   FROM player)
		WHERE (n != 2.0)
		ORDER BY residence
		
	  residence
	0       1st
	1       2nd
	2       3rd
	3       4th
Wrong output for base solution in spider/riding_club/0010
	EXPECTED
		SELECT T3.Player_name,
		       T2.coach_name
		FROM player_coach AS T1
		JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID
		JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
	        player_name     coach_name
	0     Fiona Shiells  Jameson Tomas
	1   Jean Luc Bouché  Jameson Tomas
	2       Niki Ashton  Jameson Tomas
	3     Ron Strynadka     Joe Fabbri
	4  Patricia Cordner    Robert Chen
	5        Ross Eadie    Robert Chen
	6  Rachel Heinrichs    Smith Brown
	ACTUAL
		
		SELECT DISTINCT player_name,
		                rank_other AS coach_name
		FROM
		  (SELECT LHS.coach_id AS coach_id,
		          LHS.coach_name AS coach_name,
		          LHS.gender AS gender,
		          LHS.club_id AS club_id,
		          LHS.rank AS rank,
		          RHS.player_id AS player_id,
		          RHS.sponsor_name AS sponsor_name,
		          RHS.player_name AS player_name,
		          RHS.residence AS residence,
		          RHS.occupation AS occupation,
		          RHS.votes AS votes,
		          RHS.rank AS rank_other
		   FROM coach AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM player AS LHS
		      WHERE EXISTS
		          (SELECT 1
		           FROM player_coach AS RHS
		           WHERE (LHS.player_id = RHS.player_id) )) AS RHS ON (LHS.gender = RHS.gender))
		ORDER BY player_name
		
	        player_name coach_name
	0       Niki Ashton        1st
	1   Jean Luc Bouché        2nd
	2  Patricia Cordner        2nd
	3     Ron Strynadka        2nd
	4        Ross Eadie        2nd
	5     Fiona Shiells        3rd
	6  Rachel Heinrichs        3rd
No solution tests/spider/riding_club/0011.yaml
Wrong output for base solution in spider/riding_club/0013
	EXPECTED
		SELECT T3.Player_name,
		       T2.coach_name
		FROM player_coach AS T1
		JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID
		JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
		ORDER BY T3.Votes DESC
	        player_name     coach_name
	0     Fiona Shiells  Jameson Tomas
	1   Jean Luc Bouché  Jameson Tomas
	2       Niki Ashton  Jameson Tomas
	3     Ron Strynadka     Joe Fabbri
	4  Patricia Cordner    Robert Chen
	5        Ross Eadie    Robert Chen
	6  Rachel Heinrichs    Smith Brown
	ACTUAL
		
		SELECT DISTINCT player_name,
		                rank_other AS coach_name
		FROM
		  (SELECT LHS.coach_id AS coach_id,
		          LHS.coach_name AS coach_name,
		          LHS.gender AS gender,
		          LHS.club_id AS club_id,
		          LHS.rank AS rank,
		          RHS.player_id AS player_id,
		          RHS.sponsor_name AS sponsor_name,
		          RHS.player_name AS player_name,
		          RHS.residence AS residence,
		          RHS.occupation AS occupation,
		          RHS.votes AS votes,
		          RHS.rank AS rank_other
		   FROM coach AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM player AS LHS
		      WHERE EXISTS
		          (SELECT 1
		           FROM player_coach AS RHS
		           WHERE (LHS.player_id = RHS.player_id) )) AS RHS ON (LHS.gender = RHS.gender))
		ORDER BY player_name
		
	        player_name coach_name
	0       Niki Ashton        1st
	1   Jean Luc Bouché        2nd
	2  Patricia Cordner        2nd
	3     Ron Strynadka        2nd
	4        Ross Eadie        2nd
	5     Fiona Shiells        3rd
	6  Rachel Heinrichs        3rd
Wrong output for base solution in spider/riding_club/0015
	EXPECTED
		SELECT Residence
		FROM player
		WHERE gender = "M" INTERSECT
		  SELECT Residence
		  FROM player WHERE gender = "F"
	  residence
	0  Winnipeg
	ACTUAL
		
		SELECT DISTINCT `rank` AS `residence`
		FROM `player`
		WHERE (`gender` = 'M'
		       OR `gender` = 'F')
		ORDER BY residence
		
	  residence
	0       1st
	1       2nd
	2       3rd
	3       4th
No solution tests/spider/roller_coaster/0002.yaml
No solution tests/spider/roller_coaster/0003.yaml
Wrong output for base solution in spider/roller_coaster/0011
	EXPECTED
		SELECT Park
		FROM roller_coaster
		ORDER BY Speed DESC
		LIMIT 1
	          park
	0  Mt. Olympus
	ACTUAL
		
		SELECT park
		FROM
		  (SELECT LHS.roller_coaster_id AS roller_coaster_id,
		          LHS.name AS name,
		          LHS.park AS park,
		          LHS.country_id AS country_id,
		          LHS.length AS LENGTH,
		          LHS.height AS height,
		          LHS.speed AS speed,
		          LHS.opened AS opened,
		          LHS.status AS status,
		          RHS.opened AS opened_other
		   FROM roller_coaster AS LHS
		   INNER JOIN
		     (SELECT opened,
		             status,
		             MAX(speed) AS maxspeed
		      FROM roller_coaster
		      GROUP BY opened,
		               status) AS RHS ON (LHS.status = RHS.status
		                                  AND LHS.speed = RHS.maxspeed))
		ORDER BY park
		
	              park
	0       Gröna Lund
	1     Happy Valley
	2    Holiday World
	3  Kemah Boardwalk
	4      Mt. Olympus
	5        Waldameer
Error while executing ground truth for spider/roller_coaster/0012
	The column label 'Name' is not unique.
Wrong output for base solution in spider/roller_coaster/0013
	EXPECTED
		SELECT T1.Name
		FROM country AS T1
		JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
		GROUP BY T1.Name
		HAVING COUNT(*) > 1
	      name
	0  Austria
	1  Finland
	ACTUAL
		
		SELECT name
		FROM
		  (SELECT LHS.country_id AS country_id,
		          LHS.name AS name,
		          LHS.population AS population,
		          LHS.area AS area,
		          LHS.languages AS languages,
		          RHS.opened AS opened,
		          RHS.n AS n
		   FROM country AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM
		        (SELECT country_id,
		                opened,
		                COUNT() AS n
		         FROM roller_coaster
		         GROUP BY country_id,
		                  opened)
		      WHERE (n != 1.0)) AS RHS ON (LHS.country_id = RHS.country_id))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name]
	Index: []
No solution tests/spider/roller_coaster/0014.yaml
Wrong output for base solution in spider/roller_coaster/0017
	EXPECTED
		SELECT T1.name,
		       T1.area,
		       T1.population
		FROM country AS T1
		JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
		WHERE T2.speed > 60 INTERSECT
		  SELECT T1.name,
		         T1.area,
		         T1.population
		  FROM country AS T1
		  JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed < 55
	      name   area  population
	0  Austria  83871     8206524
	ACTUAL
		
		SELECT name_other AS name,
		       area,
		       population
		FROM
		  (SELECT LHS.roller_coaster_id AS roller_coaster_id,
		          LHS.name AS name,
		          LHS.park AS park,
		          LHS.country_id AS country_id,
		          LHS.length AS LENGTH,
		          LHS.height AS height,
		          LHS.speed AS speed,
		          LHS.opened AS opened,
		          LHS.status AS status,
		          RHS.name AS name_other,
		          RHS.population AS population,
		          RHS.area AS area,
		          RHS.languages AS languages
		   FROM
		     (SELECT *
		      FROM roller_coaster
		      WHERE (speed < 60.0
		             AND speed < 55.0)) AS LHS
		   INNER JOIN country AS RHS ON (LHS.roller_coaster_id = RHS.country_id))
		ORDER BY name
		
	      name    area  population
	0  Austria   83871     8206524
	1  Finland  338145     5261008
No solution tests/spider/school_finance/0005.yaml
No solution tests/spider/school_finance/0008.yaml
Error while executing solution for spider/school_finance/0009
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT `school_id` AS `count_distinct_t1_donator_name_`
	FROM
	  (SELECT `LHS`.`school_id` AS `school_id`,
	          `LHS`.`school_name` AS `school_name`,
	          `LHS`.`location` AS `location`,
	          `LHS`.`mascot` AS `mascot`,
	          `LHS`.`enrollment` AS `enrollment`,
	          `LHS`.`ihsaa_class` AS `ihsaa_class`,
	          `LHS`.`ihsaa_football_class` AS `ihsaa_football_class`,
	          `LHS`.`county` AS `county`,
	          `RHS`.`endowment_id` AS `endowment_id`,
	          `RHS`.`donator_name` AS `donator_name`,
	          `RHS`.`amount` AS `amount`,
	          `RHS`.`n_distinct` AS `n_distinct`
	   FROM
	     (SELECT *
	      FROM `school`
	      WHERE (`school_name` = 'Glenn')) AS LHS
	   INNER JOIN
	     (SELECT endowment_id,
	             school_id,
	             donator_name,
	             amount,
	             COUNT(DISTINCT donator_name) OVER () AS n_distinct
	      FROM endowment) AS RHS ON (LHS.school_id = RHS.school_id))
	ORDER BY count_distinct_t1_donator_name_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/school_finance/0012.yaml
No solution tests/spider/school_finance/0019.yaml
No solution tests/spider/school_finance/0022.yaml
No ground truth tests/spider/school_finance/0023.yaml
Error while executing solution for spider/school_player/0007
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT POSITION) OVER () AS count_distinct_position_
	FROM player
	ORDER BY count_distinct_position_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/scientist_1/0008.yaml
No solution tests/spider/scientist_1/0009.yaml
No solution tests/spider/scientist_1/0010.yaml
No solution tests/spider/scientist_1/0013.yaml
Error while executing ground truth for spider/scientist_1/0023
	The column label 'Name' is not unique.
Error while executing solution for spider/ship_1/0001
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT rank) OVER () AS count_distinct_rank_
	FROM captain
	ORDER BY count_distinct_rank_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/ship_1/0009.yaml
No solution tests/spider/ship_1/0014.yaml
No solution tests/spider/ship_1/0022.yaml
No solution tests/spider/ship_1/0024.yaml
Wrong output for base solution in spider/shop_membership/0001
	EXPECTED
		SELECT count(*)
		FROM branch
		WHERE membership_amount >
		    (SELECT avg(membership_amount)
		     FROM branch)
	   count(*)
	0         1
	ACTUAL
		
		SELECT branch_id AS count___
		FROM
		  (SELECT LHS.branch_id AS branch_id,
		          LHS.city AS city,
		          LHS.meanmembership_amount AS meanmembership_amount
		   FROM
		     (SELECT branch_id,
		             city,
		             AVG(membership_amount) AS meanmembership_amount
		      FROM branch
		      GROUP BY branch_id,
		               city) AS LHS
		   INNER JOIN
		     (SELECT city,
		             COUNT(DISTINCT membership_amount) AS n_distinct
		      FROM branch
		      GROUP BY city) AS RHS ON (LHS.branch_id = RHS.n_distinct
		                                AND LHS.city = RHS.city))
		ORDER BY count___
		
	   count___
	0         5
No solution tests/spider/shop_membership/0003.yaml
Wrong output for base solution in spider/shop_membership/0004
	EXPECTED
		SELECT DISTINCT city
		FROM branch
		WHERE membership_amount >= 100
	     city
	0  London
	ACTUAL
		
		SELECT DISTINCT city
		FROM branch
		WHERE (membership_amount <= 100.0)
		ORDER BY city
		
	     city
	0  London
	1  Oxford
No solution tests/spider/shop_membership/0006.yaml
Error while executing solution for spider/shop_membership/0007
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT city,
	                COUNT(DISTINCT open_year) OVER () AS count___
	FROM branch
	WHERE (open_year < 2010.0)
	ORDER BY city
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/shop_membership/0011.yaml
No solution tests/spider/shop_membership/0012.yaml
No solution tests/spider/shop_membership/0015.yaml
Wrong output for base solution in spider/shop_membership/0016
	EXPECTED
		SELECT T2.name,
		       T2.hometown
		FROM membership_register_branch AS T1
		JOIN member AS T2 ON T1.member_id = T2.member_id
		WHERE T1.register_year = 2016
	               name                  hometown
	0     Jeremy Jarmon   Collierville, Tennessee
	1  Ventrell Jenkins  Columbia, South Carolina
	2   Trevard Lindley            Hiram, Georgia
	3   Johnny Williams     Jacksonville, Florida
	4    Braxton Kelley         LaGrange, Georgia
	5       Myron Pryor      Louisville, Kentucky
	ACTUAL
		
		SELECT name,
		       hometown
		FROM
		  (SELECT LHS.member_id AS member_id,
		          LHS.branch_id AS branch_id,
		          LHS.register_year AS register_year,
		          RHS.card_number AS card_number,
		          RHS.name AS name,
		          RHS.hometown AS hometown,
		          RHS.level AS LEVEL
		   FROM
		     (SELECT *
		      FROM membership_register_branch
		      WHERE (register_year = 2016.0)) AS LHS
		   LEFT JOIN member AS RHS ON (LHS.member_id = RHS.member_id))
		ORDER BY name
		
	Empty DataFrame
	Columns: [name, hometown]
	Index: []
No solution tests/spider/shop_membership/0019.yaml
No solution tests/spider/shop_membership/0020.yaml
No solution tests/spider/shop_membership/0022.yaml
No solution tests/spider/small_bank_1/0007.yaml
Error while executing ground truth for spider/small_bank_1/0008
	The column label 'balance' is not unique.
No solution tests/spider/small_bank_1/0010.yaml
No solution tests/spider/small_bank_1/0011.yaml
No solution tests/spider/small_bank_1/0013.yaml
No solution tests/spider/small_bank_1/0014.yaml
No solution tests/spider/small_bank_1/0018.yaml
No solution tests/spider/small_bank_1/0019.yaml
No solution tests/spider/small_bank_1/0020.yaml
Error while executing ground truth for spider/small_bank_1/0021
	The column label 'balance' is not unique.
Error while executing ground truth for spider/small_bank_1/0022
	The column label 'balance' is not unique.
No solution tests/spider/small_bank_1/0024.yaml
No solution tests/spider/small_bank_1/0025.yaml
Error while executing ground truth for spider/soccer_1/0001
	The column label 'name' is not unique.
No solution tests/spider/soccer_1/0005.yaml
No solution tests/spider/soccer_1/0006.yaml
No solution tests/spider/soccer_1/0007.yaml
No solution tests/spider/soccer_1/0008.yaml
No solution tests/spider/soccer_1/0009.yaml
No solution tests/spider/soccer_1/0010.yaml
No solution tests/spider/soccer_1/0011.yaml
No solution tests/spider/soccer_1/0012.yaml
No solution tests/spider/soccer_1/0013.yaml
No solution tests/spider/soccer_1/0014.yaml
Error while executing solution for spider/soccer_2/0005
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT enr) OVER () AS count___
	FROM college
	WHERE (enr > 15000.0)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/soccer_2/0010
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT `n_distinct` AS `count___`
	FROM
	  (SELECT `pid`,
	          `cname`,
	          `ppos`,
	          `decision`,
	          COUNT(DISTINCT `decision`) OVER () AS `n_distinct`
	   FROM `tryout`)
	WHERE (`decision` != 'yes')
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/soccer_2/0015.yaml
No solution tests/spider/soccer_2/0024.yaml
No solution tests/spider/soccer_2/0034.yaml
No solution tests/spider/soccer_2/0037.yaml
No solution tests/spider/soccer_2/0043.yaml
No ground truth tests/spider/soccer_2/0044.yaml
No ground truth tests/spider/soccer_2/0047.yaml
No solution tests/spider/sports_competition/0002.yaml
No solution tests/spider/sports_competition/0008.yaml
No solution tests/spider/sports_competition/0009.yaml
Error while executing solution for spider/sports_competition/0021
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT POSITION) OVER () AS count_distinct_position_
	FROM player
	ORDER BY count_distinct_position_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/station_weather/0002.yaml
No solution tests/spider/station_weather/0004.yaml
No solution tests/spider/station_weather/0010.yaml
No solution tests/spider/station_weather/0013.yaml
No solution tests/spider/store_1/0001.yaml
No solution tests/spider/store_1/0002.yaml
No solution tests/spider/store_1/0003.yaml
No solution tests/spider/store_1/0004.yaml
No solution tests/spider/store_1/0005.yaml
No solution tests/spider/store_1/0006.yaml
No solution tests/spider/store_1/0007.yaml
No solution tests/spider/store_1/0010.yaml
No solution tests/spider/store_1/0011.yaml
No solution tests/spider/store_1/0016.yaml
No solution tests/spider/store_1/0024.yaml
No solution tests/spider/store_1/0025.yaml
No solution tests/spider/store_1/0027.yaml
No solution tests/spider/store_1/0029.yaml
No solution tests/spider/store_1/0035.yaml
No solution tests/spider/store_1/0037.yaml
No solution tests/spider/store_1/0038.yaml
No solution tests/spider/store_1/0039.yaml
No solution tests/spider/store_1/0046.yaml
No solution tests/spider/store_1/0047.yaml
No solution tests/spider/store_1/0048.yaml
No solution tests/spider/store_1/0051.yaml
No solution tests/spider/store_1/0052.yaml
No solution tests/spider/store_product/0006.yaml
No solution tests/spider/store_product/0018.yaml
No solution tests/spider/store_product/0021.yaml
No solution tests/spider/storm_record/0007.yaml
No solution tests/spider/storm_record/0008.yaml
Error while executing solution for spider/storm_record/0010
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT region_id) OVER () AS count_distinct_region_id_
	FROM affected_region
	ORDER BY count_distinct_region_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/storm_record/0016.yaml
No solution tests/spider/student_1/0005.yaml
No solution tests/spider/student_1/0015.yaml
Wrong output for base solution in spider/student_1/0020
	EXPECTED
		SELECT count(*)
		FROM list AS T1
		JOIN teachers AS T2 ON T1.classroom = T2.classroom
		WHERE T2.firstname = "LORIA"
		  AND T2.lastname = "ONDERSMA"
	   count(*)
	0         0
	ACTUAL
		
		SELECT `n` AS `count___`
		FROM
		  (SELECT `LHS`.`lastname` AS `lastname`,
		          `LHS`.`firstname` AS `firstname`,
		          `LHS`.`grade` AS `grade`,
		          `LHS`.`classroom` AS `classroom`,
		          `RHS`.`n` AS `n`
		   FROM
		     (SELECT `LHS`.`lastname` AS `lastname`,
		             `LHS`.`firstname` AS `firstname`,
		             `LHS`.`grade` AS `grade`,
		             `LHS`.`classroom` AS `classroom`
		      FROM `list` AS `LHS`
		      INNER JOIN `teachers` AS `RHS` ON (`LHS`.`lastname` = `RHS`.`lastname`
		                                            AND `LHS`.`firstname` = `RHS`.`firstname`
		                                            AND `LHS`.`classroom` = `RHS`.`classroom`)) AS `LHS`
		   CROSS JOIN
		     (SELECT COUNT() AS `n`
		      FROM `list`
		      WHERE (`lastname` = 'ONDERSMA')) AS RHS)
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___]
	Index: []
Wrong output for base solution in spider/student_1/0021
	EXPECTED
		SELECT count(*)
		FROM list AS T1
		JOIN teachers AS T2 ON T1.classroom = T2.classroom
		WHERE T2.firstname = "KAWA"
		  AND T2.lastname = "GORDON"
	   count(*)
	0         0
	ACTUAL
		
		SELECT `n` AS `count___`
		FROM
		  (SELECT `LHS`.`lastname` AS `lastname`,
		          `LHS`.`firstname` AS `firstname`,
		          `LHS`.`grade` AS `grade`,
		          `LHS`.`classroom` AS `classroom`,
		          `RHS`.`n` AS `n`
		   FROM
		     (SELECT `LHS`.`lastname` AS `lastname`,
		             `LHS`.`firstname` AS `firstname`,
		             `LHS`.`grade` AS `grade`,
		             `LHS`.`classroom` AS `classroom`
		      FROM `list` AS `LHS`
		      INNER JOIN `teachers` AS `RHS` ON (`LHS`.`lastname` = `RHS`.`lastname`
		                                            AND `LHS`.`firstname` = `RHS`.`firstname`
		                                            AND `LHS`.`classroom` = `RHS`.`classroom`)) AS `LHS`
		   CROSS JOIN
		     (SELECT COUNT() AS `n`
		      FROM `list`
		      WHERE (`lastname` = 'KAWA')) AS RHS)
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___]
	Index: []
Wrong output for base solution in spider/student_1/0023
	EXPECTED
		SELECT count(*)
		FROM list AS T1
		JOIN teachers AS T2 ON T1.classroom = T2.classroom
		WHERE T1.firstname = "CHRISSY"
		  AND T1.lastname = "NABOZNY"
	   count(*)
	0         0
	ACTUAL
		
		SELECT `n_distinct` AS `count___`
		FROM
		  (SELECT `LHS`.`lastname` AS `lastname`,
		          `LHS`.`firstname` AS `firstname`,
		          `LHS`.`grade` AS `grade`,
		          `LHS`.`classroom` AS `classroom`,
		          `RHS`.`n_distinct` AS `n_distinct`
		   FROM
		     (SELECT `LHS`.`lastname` AS `lastname`,
		             `LHS`.`firstname` AS `firstname`,
		             `LHS`.`grade` AS `grade`,
		             `LHS`.`classroom` AS `classroom`
		      FROM `list` AS `LHS`
		      INNER JOIN
		        (SELECT *
		         FROM `teachers`
		         WHERE (`lastname` = 'NABOZNY')) AS `RHS` ON (`LHS`.`lastname` = `RHS`.`lastname`
		                                                      AND `LHS`.`firstname` = `RHS`.`firstname`
		                                                      AND `LHS`.`classroom` = `RHS`.`classroom`)) AS `LHS`
		   CROSS JOIN
		     (SELECT COUNT(DISTINCT `lastname`) AS `n_distinct`
		      FROM `teachers`
		      WHERE (`lastname` = 'NABOZNY')) AS RHS)
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___]
	Index: []
Wrong output for base solution in spider/student_1/0024
	EXPECTED
		SELECT count(*)
		FROM list AS T1
		JOIN teachers AS T2 ON T1.classroom = T2.classroom
		WHERE T1.firstname = "MADLOCK"
		  AND T1.lastname = "RAY"
	   count(*)
	0         0
	ACTUAL
		
		SELECT `n_distinct` AS `count___`
		FROM
		  (SELECT `LHS`.`lastname` AS `lastname`,
		          `LHS`.`firstname` AS `firstname`,
		          `LHS`.`grade` AS `grade`,
		          `LHS`.`classroom` AS `classroom`,
		          `RHS`.`n_distinct` AS `n_distinct`
		   FROM
		     (SELECT `LHS`.`lastname` AS `lastname`,
		             `LHS`.`firstname` AS `firstname`,
		             `LHS`.`grade` AS `grade`,
		             `LHS`.`classroom` AS `classroom`
		      FROM `list` AS `LHS`
		      INNER JOIN
		        (SELECT *
		         FROM `teachers`
		         WHERE (`lastname` = 'MADLOCK')) AS `RHS` ON (`LHS`.`lastname` = `RHS`.`lastname`
		                                                      AND `LHS`.`firstname` = `RHS`.`firstname`
		                                                      AND `LHS`.`classroom` = `RHS`.`classroom`)) AS `LHS`
		   CROSS JOIN
		     (SELECT COUNT(DISTINCT `lastname`) AS `n_distinct`
		      FROM `teachers`
		      WHERE (`lastname` = 'MADLOCK')) AS RHS)
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___]
	Index: []
No solution tests/spider/student_1/0027.yaml
No solution tests/spider/student_1/0029.yaml
No solution tests/spider/student_1/0033.yaml
No solution tests/spider/student_assessment/0001.yaml
No solution tests/spider/student_assessment/0002.yaml
Wrong output for base solution in spider/student_assessment/0009
	EXPECTED
		SELECT count(*)
		FROM courses AS T1
		JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id
		WHERE T2.student_id = 171
	   count(*)
	0         1
	ACTUAL
		
		SELECT DISTINCT n AS count___
		FROM
		  (SELECT LHS.course_id AS course_id,
		          LHS.course_name AS course_name,
		          LHS.course_description AS course_description,
		          LHS.other_details AS other_details,
		          LHS.student_id AS student_id,
		          LHS.date_of_attendance AS date_of_attendance,
		          LHS.n AS n
		   FROM
		     (SELECT LHS.course_id AS course_id,
		             LHS.course_name AS course_name,
		             LHS.course_description AS course_description,
		             LHS.other_details AS other_details,
		             LHS.student_id AS student_id,
		             LHS.date_of_attendance AS date_of_attendance,
		             RHS.n AS n
		      FROM
		        (SELECT LHS.course_id AS course_id,
		                LHS.course_name AS course_name,
		                LHS.course_description AS course_description,
		                LHS.other_details AS other_details,
		                RHS.student_id AS student_id,
		                RHS.date_of_attendance AS date_of_attendance
		         FROM courses AS LHS
		         INNER JOIN student_course_attendance AS RHS ON (LHS.course_id = RHS.course_id)) AS LHS
		      INNER JOIN
		        (SELECT course_description,
		                other_details,
		                COUNT() AS n
		         FROM courses
		         GROUP BY course_description,
		                  other_details) AS RHS ON (LHS.course_description = RHS.course_description
		                                            AND LHS.other_details = RHS.other_details)) AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM
		        (SELECT course_description,
		                other_details,
		                COUNT() AS n
		         FROM courses
		         GROUP BY course_description,
		                  other_details)
		      WHERE (n < 171.0)) AS RHS ON (LHS.course_description = RHS.course_description
		                                    AND LHS.other_details = RHS.other_details
		                                    AND LHS.n = RHS.n))
		ORDER BY count___
		
	Empty DataFrame
	Columns: [count___]
	Index: []
No solution tests/spider/student_assessment/0012.yaml
No solution tests/spider/student_assessment/0016.yaml
No solution tests/spider/student_assessment/0021.yaml
No solution tests/spider/student_assessment/0023.yaml
Error while executing solution for spider/swimming/0013
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT `n_distinct` AS `count___`
	FROM
	  (SELECT `id`,
	          `name`,
	          `capacity`,
	          `city`,
	          `country`,
	          `opening_year`,
	          COUNT(DISTINCT `country`) OVER () AS `n_distinct`
	   FROM `stadium`)
	WHERE (`country` != 'Russia')
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/swimming/0015
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT nationality) OVER () AS count_distinct_nationality_
	FROM swimmer
	ORDER BY count_distinct_nationality_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/swimming/0019.yaml
No solution tests/spider/swimming/0021.yaml
No solution tests/spider/swimming/0022.yaml
No solution tests/spider/swimming/0025.yaml
No solution tests/spider/swimming/0027.yaml
No solution tests/spider/swimming/0028.yaml
No solution tests/spider/theme_gallery/0013.yaml
No solution tests/spider/theme_gallery/0014.yaml
No solution tests/spider/theme_gallery/0015.yaml
Wrong output for base solution in spider/theme_gallery/0016
	EXPECTED
		SELECT T2.theme,
		       T1.date,
		       T1.attendance
		FROM exhibition_record AS T1
		JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
		WHERE T2.year = 2004
	         theme        date  attendance
	0  Santa Claus  December 2         965
	1  Santa Claus  December 5        1098
	2  Santa Claus  December 7        2983
	ACTUAL
		
		SELECT DISTINCT theme,
		                theme_other AS date,
		                attendance
		FROM
		  (SELECT *
		   FROM
		     (SELECT LHS.exhibition_id AS exhibition_id,
		             LHS.year AS YEAR,
		             LHS.theme AS theme,
		             LHS.artist_id AS artist_id,
		             LHS.ticket_price AS ticket_price,
		             LHS.date AS date,
		             LHS.attendance AS attendance,
		             RHS.exhibition_id AS exhibition_id_other,
		             RHS.year AS year_other,
		             RHS.theme AS theme_other,
		             RHS.artist_id AS artist_id_other,
		             RHS.ticket_price AS ticket_price_other,
		             RHS.date AS date_other,
		             RHS.attendance AS attendance_other
		      FROM
		        (SELECT LHS.exhibition_id AS exhibition_id,
		                LHS.year AS YEAR,
		                LHS.theme AS theme,
		                LHS.artist_id AS artist_id,
		                LHS.ticket_price AS ticket_price,
		                RHS.date AS date,
		                RHS.attendance AS attendance
		         FROM exhibition AS LHS
		         INNER JOIN exhibition_record AS RHS ON (LHS.exhibition_id = RHS.exhibition_id)) AS LHS
		      CROSS JOIN
		        (SELECT LHS.exhibition_id AS exhibition_id,
		                LHS.year AS YEAR,
		                LHS.theme AS theme,
		                LHS.artist_id AS artist_id,
		                LHS.ticket_price AS ticket_price,
		                RHS.date AS date,
		                RHS.attendance AS attendance
		         FROM exhibition AS LHS
		         INNER JOIN exhibition_record AS RHS ON (LHS.exhibition_id = RHS.exhibition_id)) AS RHS)
		   WHERE (YEAR >= year_other))
		WHERE (YEAR = 2004.0)
		ORDER BY theme
		
	         theme         date  attendance
	0  Santa Claus  Santa Claus         965
	1  Santa Claus  Santa Claus        1098
	2  Santa Claus  Santa Claus        2983
No solution tests/spider/tracking_grants_for_research/0001.yaml
No solution tests/spider/tracking_grants_for_research/0002.yaml
No solution tests/spider/tracking_grants_for_research/0003.yaml
Error while executing solution for spider/tracking_grants_for_research/0004
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT `date_from`,
	       `date_to`
	FROM
	  (SELECT `date_from`,
	          `date_to`,
	          MAX(`project_id`) AS `maxproject_id`
	   FROM
	     (SELECT *
	      FROM
	        (SELECT `staff_id`,
	                `project_id`,
	                `role_code`,
	                `date_from`,
	                `date_to`,
	                `other_details`,
	                COUNT(DISTINCT `role_code`) OVER () AS `n_distinct`
	         FROM `project_staff`)
	      WHERE (`role_code` = 'leader'
	             OR n_distinct = project_id))
	   GROUP BY date_from,
	            date_to)
	ORDER BY date_from
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/tracking_grants_for_research/0006.yaml
No solution tests/spider/tracking_grants_for_research/0011.yaml
Error while executing solution for spider/tracking_grants_for_research/0013
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT role_code) OVER () AS count_distinct_role_code_
	FROM project_staff
	ORDER BY count_distinct_role_code_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/tracking_grants_for_research/0015.yaml
No solution tests/spider/tracking_grants_for_research/0021.yaml
No solution tests/spider/tracking_grants_for_research/0022.yaml
No solution tests/spider/tracking_grants_for_research/0023.yaml
No solution tests/spider/tracking_grants_for_research/0024.yaml
Error while executing solution for spider/tracking_grants_for_research/0029
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT DISTINCT COUNT(*) OVER () AS `count___`
	FROM `project_staff`
	WHERE (`role_code` = 'leader'
	       OR `date_from` < parse_datetime('1989-04-24 23:51:54'))
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/tracking_grants_for_research/0033.yaml
Error while executing solution for spider/tracking_grants_for_research/0035
	(sqlite3.OperationalError) no such column: eg_agree_objectives
	[SQL: 
	SELECT n AS count___
	FROM
	  (SELECT eg_agree_objectives,
	          COUNT() AS n
	   FROM tasks
	   GROUP BY eg_agree_objectives)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/tracking_grants_for_research/0036
	(sqlite3.OperationalError) no such column: LHS.eg_agree_objectives
	[SQL: 
	SELECT n AS count___,
	       project_details
	FROM
	  (SELECT project_details,
	          task_details,
	          COUNT() AS n
	   FROM
	     (SELECT task_id,
	             project_id,
	             task_details,
	             eg_agree_objectives,
	             project_id_other,
	             project_details,
	             project_id AS organisation_id
	      FROM
	        (SELECT LHS.task_id AS task_id,
	                LHS.project_id AS project_id,
	                LHS.task_details AS task_details,
	                LHS.eg_agree_objectives AS eg_agree_objectives,
	                RHS.project_id AS project_id_other,
	                RHS.project_details AS project_details
	         FROM tasks AS LHS
	         INNER JOIN projects AS RHS ON (LHS.project_id = RHS.organisation_id)))
	   GROUP BY project_details,
	            task_details)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/tracking_grants_for_research/0037
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT DISTINCT `role_code`
	FROM `project_staff`
	WHERE (`date_from` >= parse_datetime('2003-04-19 15:06:20')
	       OR `date_to` != parse_datetime('2016-03-15 00:33:18'))
	ORDER BY role_code
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Wrong output for base solution in spider/tracking_orders/0003
	EXPECTED
		SELECT order_id
		FROM shipments
		WHERE shipment_tracking_number = "3452"
	   order_id
	0         5
	ACTUAL
		
		SELECT order_id
		FROM shipments
		WHERE (shipment_tracking_number = 3452.0)
		ORDER BY order_id
		
	Empty DataFrame
	Columns: [order_id]
	Index: []
Error while executing solution for spider/tracking_orders/0011
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `customer_name`
	FROM
	  (SELECT `LHS`.`customer_id` AS `customer_id`,
	          `LHS`.`customer_name` AS `customer_name`,
	          `LHS`.`customer_details` AS `customer_details`,
	          `RHS`.`order_id` AS `order_id`,
	          `RHS`.`order_status` AS `order_status`,
	          `RHS`.`date_order_placed` AS `date_order_placed`,
	          `RHS`.`order_details` AS `order_details`
	   FROM `customers` AS `LHS`
	   INNER JOIN
	     (SELECT *
	      FROM `orders`
	      WHERE (`date_order_placed` > parse_datetime('2009-01-01')
	             AND `date_order_placed` <= parse_datetime('2010-01-01'))) AS RHS ON (LHS.customer_id = RHS.customer_id))
	ORDER BY customer_name
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/tracking_orders/0012
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `product_id`
	FROM
	  (SELECT *
	   FROM `order_items` AS `LHS`
	   WHERE NOT EXISTS
	       (SELECT 1
	        FROM
	          (SELECT *
	           FROM `orders`
	           WHERE (`date_order_placed` <= parse_datetime('1975-01-01')
	                  OR `date_order_placed` > parse_datetime('1976-01-01'))) AS RHS
	        WHERE (LHS.order_id = RHS.order_id) ))
	ORDER BY product_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Wrong output for base solution in spider/tracking_orders/0013
	EXPECTED
		SELECT T1.customer_name
		FROM customers AS T1
		JOIN orders AS T2 ON T1.customer_id = T2.customer_id
		WHERE T2.order_status = "On Road" INTERSECT
		  SELECT T1.customer_name
		  FROM customers AS T1
		  JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
	  customer_name
	0        George
	ACTUAL
		
		SELECT `customer_name`
		FROM
		  (SELECT `LHS`.`customer_id` AS `customer_id`,
		          `LHS`.`customer_name` AS `customer_name`,
		          `LHS`.`customer_details` AS `customer_details`,
		          `LHS`.`order_id` AS `order_id`,
		          `LHS`.`order_status` AS `order_status`,
		          `LHS`.`date_order_placed` AS `date_order_placed`,
		          `LHS`.`order_details` AS `order_details`,
		          `LHS`.`customer_id_other` AS `customer_id_other`,
		          `LHS`.`date_order_placed_other` AS `date_order_placed_other`,
		          `LHS`.`order_details_other` AS `order_details_other`
		   FROM
		     (SELECT `LHS`.`customer_id` AS `customer_id`,
		             `LHS`.`customer_name` AS `customer_name`,
		             `LHS`.`customer_details` AS `customer_details`,
		             `RHS`.`order_id` AS `order_id`,
		             `RHS`.`order_status` AS `order_status`,
		             `RHS`.`date_order_placed` AS `date_order_placed`,
		             `RHS`.`order_details` AS `order_details`,
		             `RHS`.`customer_id_other` AS `customer_id_other`,
		             `RHS`.`date_order_placed_other` AS `date_order_placed_other`,
		             `RHS`.`order_details_other` AS `order_details_other`
		      FROM `customers` AS `LHS`
		      INNER JOIN
		        (SELECT `customer_id` AS `order_id`,
		                `customer_id`,
		                `order_status`,
		                `date_order_placed`,
		                `order_details`,
		                `customer_id_other`,
		                `date_order_placed_other`,
		                `order_details_other`
		         FROM
		           (SELECT `LHS`.`order_id` AS `order_id`,
		                   `LHS`.`customer_id` AS `customer_id`,
		                   `LHS`.`order_status` AS `order_status`,
		                   `LHS`.`date_order_placed` AS `date_order_placed`,
		                   `LHS`.`order_details` AS `order_details`,
		                   `RHS`.`customer_id` AS `customer_id_other`,
		                   `RHS`.`date_order_placed` AS `date_order_placed_other`,
		                   `RHS`.`order_details` AS `order_details_other`
		            FROM `orders` AS `LHS`
		            INNER JOIN `orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`order_id`
		                                                AND `LHS`.`order_status` = `RHS`.`order_status`))) AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
		   INNER JOIN
		     (SELECT *
		      FROM
		        (SELECT `customer_id` AS `order_id`,
		                `customer_id`,
		                `order_status`,
		                `date_order_placed`,
		                `order_details`,
		                `customer_id_other`,
		                `date_order_placed_other`,
		                `order_details_other`
		         FROM
		           (SELECT `LHS`.`order_id` AS `order_id`,
		                   `LHS`.`customer_id` AS `customer_id`,
		                   `LHS`.`order_status` AS `order_status`,
		                   `LHS`.`date_order_placed` AS `date_order_placed`,
		                   `LHS`.`order_details` AS `order_details`,
		                   `RHS`.`customer_id` AS `customer_id_other`,
		                   `RHS`.`date_order_placed` AS `date_order_placed_other`,
		                   `RHS`.`order_details` AS `order_details_other`
		            FROM `orders` AS `LHS`
		            INNER JOIN `orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`order_id`
		                                                AND `LHS`.`order_status` = `RHS`.`order_status`)))
		      WHERE (`order_status` != 'On Road'
		             AND `order_status` = 'Shipped')) AS RHS ON (LHS.customer_id = RHS.customer_id
		                                                         AND LHS.order_id = RHS.order_id
		                                                         AND LHS.order_status = RHS.order_status
		                                                         AND LHS.date_order_placed = RHS.date_order_placed
		                                                         AND LHS.order_details = RHS.order_details
		                                                         AND LHS.customer_id_other = RHS.customer_id_other
		                                                         AND LHS.date_order_placed_other = RHS.date_order_placed_other
		                                                         AND LHS.order_details_other = RHS.order_details_other))
		ORDER BY customer_name
		
	Empty DataFrame
	Columns: [customer_name]
	Index: []
Wrong output for base solution in spider/tracking_orders/0015
	EXPECTED
		SELECT T1.date_order_placed
		FROM orders AS T1
		JOIN shipments AS T2 ON T1.order_id = T2.order_id
		WHERE T2.shipment_tracking_number = 3452
	     date_order_placed
	0  2010-06-08 02:20:49
	ACTUAL
		
		SELECT date_order_placed
		FROM
		  (SELECT order_id,
		          customer_id,
		          order_status,
		          date_order_placed,
		          order_details,
		          shipment_id,
		          invoice_number,
		          shipment_tracking_number,
		          shipment_date,
		          order_details AS other_shipment_details
		   FROM
		     (SELECT LHS.order_id AS order_id,
		             LHS.customer_id AS customer_id,
		             LHS.order_status AS order_status,
		             LHS.date_order_placed AS date_order_placed,
		             LHS.order_details AS order_details,
		             RHS.shipment_id AS shipment_id,
		             RHS.invoice_number AS invoice_number,
		             RHS.shipment_tracking_number AS shipment_tracking_number,
		             RHS.shipment_date AS shipment_date
		      FROM orders AS LHS
		      INNER JOIN shipments AS RHS ON (LHS.order_id = RHS.order_id
		                                         AND LHS.order_details = RHS.other_shipment_details)))
		WHERE (shipment_tracking_number = 3452.0)
		ORDER BY date_order_placed
		
	Empty DataFrame
	Columns: [date_order_placed]
	Index: []
No ground truth tests/spider/tracking_orders/0017.yaml
No ground truth tests/spider/tracking_orders/0018.yaml
Error while executing solution for spider/tracking_orders/0019
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `order_id`
	FROM `shipments`
	WHERE (`shipment_date` >= parse_datetime('2000-01-01'))
	ORDER BY order_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/tracking_orders/0021.yaml
Error while executing solution for spider/tracking_orders/0025
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `invoice_number`
	FROM `invoices`
	WHERE (`invoice_date` <= parse_datetime('1989-09-03')
	       OR `invoice_date` > parse_datetime('2007-12-25'))
	ORDER BY invoice_number
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/tracking_orders/0026
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT DISTINCT `invoice_details`
	FROM `invoices`
	WHERE (`invoice_date` <= parse_datetime('1989-09-03')
	       OR `invoice_date` > parse_datetime('2007-12-25'))
	ORDER BY invoice_details
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No ground truth tests/spider/tracking_orders/0029.yaml
No ground truth tests/spider/tracking_orders/0030.yaml
No solution tests/spider/tracking_share_transactions/0005.yaml
No solution tests/spider/tracking_share_transactions/0012.yaml
Wrong output for base solution in spider/tracking_share_transactions/0013
	EXPECTED
		SELECT date_of_transaction
		FROM TRANSACTIONS
		WHERE share_count > 100
		  OR amount_of_transaction > 1000
	    date_of_transaction
	0   1977-08-13 02:18:47
	1   1977-08-17 13:13:30
	2   1979-04-27 06:03:59
	3   1981-01-28 08:07:03
	4   1982-06-06 17:19:00
	5   1983-11-01 17:57:27
	6   1985-10-08 13:13:39
	7   1988-09-16 19:02:51
	8   1990-12-02 09:03:38
	9   1997-12-30 05:05:40
	10  2000-04-03 20:55:43
	11  2001-11-28 15:06:25
	12  2002-09-13 03:04:56
	13  2004-01-18 20:37:50
	ACTUAL
		
		SELECT date_of_transaction
		FROM transactions
		WHERE (share_count != 100.0
		       OR amount_of_transaction >= 1000.0)
		ORDER BY date_of_transaction
		
	    date_of_transaction
	0   1977-08-13 02:18:47
	1   1977-08-17 13:13:30
	2   1979-04-27 06:03:59
	3   1981-01-28 08:07:03
	4   1982-06-06 17:19:00
	5   1983-11-01 17:57:27
	6   1985-10-08 13:13:39
	7   1988-09-16 19:02:51
	8   1990-12-02 09:03:38
	9   1997-12-30 05:05:40
	10  2000-04-03 20:55:43
	11  2001-11-28 15:06:25
	12  2002-04-07 20:28:37
	13  2002-09-13 03:04:56
	14  2004-01-18 20:37:50
Wrong output for base solution in spider/tracking_share_transactions/0014
	EXPECTED
		SELECT T1.transaction_type_description,
		       T2.date_of_transaction
		FROM Ref_Transaction_Types AS T1
		JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code
		WHERE T2.share_count < 10
	  transaction_type_description  date_of_transaction
	0                     Purchase  1977-08-13 02:18:47
	1                         Sale  2002-04-07 20:28:37
	ACTUAL
		
		SELECT transaction_type_description,
		       date_of_transaction
		FROM
		  (SELECT *
		   FROM
		     (SELECT LHS.transaction_id AS transaction_id,
		             LHS.investor_id AS investor_id,
		             LHS.transaction_type_code AS transaction_type_code,
		             LHS.date_of_transaction AS date_of_transaction,
		             LHS.amount_of_transaction AS amount_of_transaction,
		             LHS.share_count AS share_count,
		             LHS.other_details AS other_details,
		             RHS.transaction_type_description AS transaction_type_description
		      FROM transactions AS LHS
		      INNER JOIN ref_transaction_types AS RHS ON (LHS.transaction_type_code = RHS.transaction_type_code)) AS LHS
		   WHERE NOT EXISTS
		       (SELECT 1
		        FROM
		          (SELECT *
		           FROM
		             (SELECT LHS.transaction_id AS transaction_id,
		                     LHS.investor_id AS investor_id,
		                     LHS.transaction_type_code AS transaction_type_code,
		                     LHS.date_of_transaction AS date_of_transaction,
		                     LHS.amount_of_transaction AS amount_of_transaction,
		                     LHS.share_count AS share_count,
		                     LHS.other_details AS other_details,
		                     RHS.transaction_type_description AS transaction_type_description
		              FROM transactions AS LHS
		              INNER JOIN ref_transaction_types AS RHS ON (LHS.transaction_type_code = RHS.transaction_type_code))
		           WHERE (share_count != 10.0)) AS RHS
		        WHERE (LHS.share_count = RHS.share_count) ))
		ORDER BY transaction_type_description
		
	Empty DataFrame
	Columns: [transaction_type_description, date_of_transaction]
	Index: []
Wrong output for base solution in spider/tracking_share_transactions/0015
	EXPECTED
		SELECT T1.Investor_details
		FROM INVESTORS AS T1
		JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
		WHERE T2.share_count > 100
	   investor_details
	0                 d
	1                 d
	2                 k
	3                 k
	4                 l
	5                 l
	6                 l
	7                 t
	8                 w
	9                 w
	10                w
	11                z
	12                z
	ACTUAL
		
		SELECT investor_details
		FROM
		  (SELECT LHS.investor_id AS investor_id,
		          LHS.investor_details AS investor_details,
		          RHS.transaction_id AS transaction_id,
		          RHS.transaction_type_code AS transaction_type_code,
		          RHS.date_of_transaction AS date_of_transaction,
		          RHS.amount_of_transaction AS amount_of_transaction,
		          RHS.share_count AS share_count,
		          RHS.other_details AS other_details
		   FROM investors AS LHS
		   INNER JOIN
		     (SELECT *
		      FROM transactions
		      WHERE (share_count != 100.0)) AS RHS ON (LHS.investor_id = RHS.investor_id))
		ORDER BY investor_details
		
	   investor_details
	0                 d
	1                 d
	2                 d
	3                 j
	4                 k
	5                 k
	6                 l
	7                 l
	8                 l
	9                 t
	10                w
	11                w
	12                w
	13                z
	14                z
Error while executing solution for spider/tracking_share_transactions/0016
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT transaction_type_code) OVER () AS count_distinct_transaction_type_code_
	FROM transactions
	ORDER BY count_distinct_transaction_type_code_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/tracking_share_transactions/0021.yaml
No solution tests/spider/tracking_share_transactions/0024.yaml
No solution tests/spider/tracking_share_transactions/0025.yaml
No solution tests/spider/tracking_share_transactions/0026.yaml
No solution tests/spider/tracking_share_transactions/0028.yaml
No solution tests/spider/tracking_share_transactions/0029.yaml
No solution tests/spider/tracking_share_transactions/0036.yaml
No solution tests/spider/tracking_share_transactions/0040.yaml
Error while executing solution for spider/tracking_software_problems/0011
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `problem_id`
	FROM `problems`
	WHERE (`date_problem_reported` >= parse_datetime('1978-06-26'))
	ORDER BY problem_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/tracking_software_problems/0012
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `problem_id`
	FROM `problems`
	WHERE (`date_problem_reported` < parse_datetime('1978-06-26'))
	ORDER BY problem_id
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing solution for spider/tracking_software_problems/0014
	(sqlite3.OperationalError) no such function: parse_datetime
	[SQL: 
	SELECT `n_distinct` AS `count___`,
	       `product_id`
	FROM
	  (SELECT *
	   FROM
	     (SELECT `product_id`,
	             COUNT(DISTINCT `date_problem_reported`) AS `n_distinct`
	      FROM `problems`
	      WHERE (`date_problem_reported` >= parse_datetime('1986-11-13'))
	      GROUP BY product_id) AS LHS
	   WHERE EXISTS
	       (SELECT 1
	        FROM product AS RHS
	        WHERE (LHS.product_id = RHS.product_id) ))
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/tracking_software_problems/0019.yaml
No solution tests/spider/tracking_software_problems/0020.yaml
No ground truth tests/spider/tracking_software_problems/0024.yaml
No solution tests/spider/train_station/0002.yaml
No solution tests/spider/train_station/0003.yaml
No solution tests/spider/train_station/0005.yaml
No solution tests/spider/train_station/0006.yaml
No solution tests/spider/train_station/0007.yaml
No solution tests/spider/train_station/0011.yaml
Error while executing ground truth for spider/train_station/0015
	The column label 'Name' is not unique.
No solution tests/spider/train_station/0023.yaml
Error while executing solution for spider/twitter_1/0007
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT UID) OVER () AS count_distinct_uid_
	FROM tweets
	ORDER BY count_distinct_uid_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/twitter_1/0008.yaml
No solution tests/spider/twitter_1/0009.yaml
No solution tests/spider/twitter_1/0010.yaml
No solution tests/spider/twitter_1/0020.yaml
No solution tests/spider/twitter_1/0025.yaml
No solution tests/spider/twitter_1/0026.yaml
No solution tests/spider/university_basketball/0007.yaml
No solution tests/spider/university_basketball/0008.yaml
No solution tests/spider/university_basketball/0017.yaml
No solution tests/spider/university_basketball/0018.yaml
Error while executing solution for spider/university_basketball/0019
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT enrollment) OVER () AS count___,
	                                                affiliation
	FROM university
	WHERE (enrollment >= 20000.0)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/university_basketball/0022.yaml
Error while executing solution for spider/voter_2/0003
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT president_vote) OVER () AS count_distinct_president_vote_
	FROM voting_record
	ORDER BY count_distinct_president_vote_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/voter_2/0009.yaml
No solution tests/spider/voter_2/0012.yaml
No solution tests/spider/voter_2/0013.yaml
No solution tests/spider/voter_2/0022.yaml
No solution tests/spider/voter_2/0023.yaml
No solution tests/spider/voter_2/0025.yaml
No solution tests/spider/voter_2/0035.yaml
No solution tests/spider/wedding/0007.yaml
No solution tests/spider/wedding/0012.yaml
No solution tests/spider/wedding/0013.yaml
Error while executing solution for spider/wedding/0017
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT YEAR) OVER () AS count___
	FROM wedding
	WHERE (YEAR < 2016.0)
	ORDER BY count___
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/wedding/0018.yaml
Error while executing solution for spider/wedding/0020
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT church_id) OVER () AS count__distinct_church_id_
	FROM wedding
	WHERE (YEAR < 2016.0
	       AND YEAR >= church_id)
	ORDER BY count__distinct_church_id_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/spider/wine_1/0013.yaml
No solution tests/spider/wine_1/0015.yaml
No solution tests/spider/wine_1/0021.yaml
No solution tests/spider/wine_1/0022.yaml
No solution tests/spider/wine_1/0023.yaml
No solution tests/spider/wine_1/0028.yaml
No solution tests/spider/wine_1/0029.yaml
No solution tests/spider/wine_1/0030.yaml
No solution tests/spider/wine_1/0031.yaml
No solution tests/spider/wine_1/0035.yaml
No solution tests/spider/wine_1/0036.yaml
No solution tests/spider/wine_1/0039.yaml
No solution tests/spider/wine_1/0041.yaml
No solution tests/spider/workshop_paper/0002.yaml
No solution tests/spider/workshop_paper/0003.yaml
No solution tests/spider/workshop_paper/0008.yaml
No solution tests/spider/wrestler/0009.yaml
No solution tests/spider/wrestler/0010.yaml
Error while executing solution for spider/wrestler/0019
	(sqlite3.OperationalError) DISTINCT is not supported for window functions
	[SQL: 
	SELECT DISTINCT COUNT(DISTINCT team) OVER () AS count__distinct_team_
	FROM elimination
	ORDER BY count__distinct_team_
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for textbook/10
	(sqlite3.OperationalError) near "ALL": syntax error
	[SQL: SELECT DISTINCT S.sname
	FROM Student S
	WHERE S.snum IN (SELECT E.snum
	FROM Enrolled E
	GROUP BY E.snum
	HAVING COUNT (*) >= ALL (SELECT COUNT (*)
	FROM Enrolled E2
	GROUP BY E2.snum ))
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/textbook/12.yaml
No ground truth tests/textbook/13.yaml
No ground truth tests/textbook/14.yaml
No ground truth tests/textbook/15.yaml
No solution tests/textbook/16.yaml
No solution tests/textbook/17.yaml
No ground truth tests/textbook/18.yaml
No solution tests/textbook/19.yaml
No solution tests/textbook/20.yaml
No ground truth tests/textbook/21.yaml
No solution tests/textbook/22.yaml
No solution tests/textbook/23.yaml
No solution tests/textbook/25.yaml
No solution tests/textbook/26.yaml
No solution tests/textbook/27.yaml
No solution tests/textbook/28.yaml
No solution tests/textbook/29.yaml
Error while executing ground truth for textbook/3
	(sqlite3.OperationalError) no such table: Class
	[SQL: SELECT C.name
	FROM Class C
	WHERE C.room = 'R128'
	OR C.name IN (SELECT E.cname
	FROM Enrolled E
	GROUP BY E.cname
	HAVING COUNT (*) >= 5)
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/textbook/30.yaml
No solution tests/textbook/31.yaml
No solution tests/textbook/32.yaml
No solution tests/textbook/33.yaml
No solution tests/textbook/35.yaml
No solution tests/textbook/36.yaml
No solution tests/textbook/37.yaml
Error while executing ground truth for textbook/4
	(sqlite3.OperationalError) near "at": syntax error
	[SQL: SELECT DISTINCT S.sname
	FROM Student S
	WHERE S.snum IN (SELECT E1.snum
	FROM Enrolled E1, Enrolled E2, Class C1, Class C2
	WHERE E1.snum = E2.snum AND E1.cname <> E2.cname
	AND E1.cname = C1.name
	AND E2.cname = C2.name AND C1.meets at = C2.meets at)
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for textbook/5
	(sqlite3.OperationalError) near "(": syntax error
	[SQL: SELECT DISTINCT F.fname
	FROM Faculty F
	WHERE NOT EXISTS (( SELECT *
	FROM Class C )
	EXCEPT
	(SELECTC1.room
	FROM Class C1
	WHERE C1.fid = F.fid ))
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for textbook/6
	(sqlite3.OperationalError) no such table: Faculty
	[SQL: SELECT DISTINCT F.fname
	FROM Faculty F
	WHERE 5 > (SELECT COUNT (E.snum)
	FROM Class C, Enrolled E
	WHERE C.name = E.cname
	AND C.fid = F.fid)
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for textbook/7
	(sqlite3.OperationalError) no such table: Student
	[SQL: SELECT S.level, AVG(S.age)
	FROM Student S
	GROUP BY S.level
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
Error while executing ground truth for textbook/8
	(sqlite3.OperationalError) no such table: Student
	[SQL: SELECT S.level, AVG(S.age)
	FROM Student S
	WHERE S.level <> 'JR'
	GROUP BY S.level
	]
	(Background on this error at: http://sqlalche.me/e/13/e3q8)
No solution tests/textbook/9.yaml
