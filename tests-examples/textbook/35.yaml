db: tests-examples/textbook/tables/35.sqlite
inputs:
  - tests-examples/textbook/tables/aircraft.txt
  #  - tests-examples/textbook/tables/flights.txt
  - tests-examples/textbook/tables/certified.txt
  - tests-examples/textbook/tables/employees.txt
output: tests-examples/textbook/tables/35.out
constants:
  - 1000
columns:
  - crusingrange
loc: 3
solution:
  - natural_join3
  - filter
  - anti_join
sql: |
  SELECT E.ename
  FROM Employees E,
       Certified C,
       Aircraft A
  WHERE C.aid = A.aid
    AND E.eid = C.eid
  GROUP BY E.eid, E.ename
  HAVING EVERY(A.crusingrange > 1000)
comment: |
  5.3.12 optimal solution sql

  df4 <- inner_join(input3, input2) %>% inner_join(input1)
  df5 <- df4 %>% filter(crusingrange < 1000)
  df6 <- anti_join(df4, df5, by=c('eid', 'ename'))
  out <- df6 %>% select(ename) %>% distinct() %>% arrange(ename)
full_sketch: |
  T1 = natural_join(aircraft, certified, employees)
  T2 = filter(T1, crusingrange < 1000)
  T3 = anti_join(T1, T2, ('eid', 'ename'))
  out = select distinct(ename) order by(ename)