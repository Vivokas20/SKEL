inputs:
  - tests-examples/55-tests/tables/19-1.txt
  - tests-examples/55-tests/tables/19-2.txt
  - tests-examples/55-tests/tables/19-3.txt
output: tests-examples/55-tests/tables/19.out
constants:
  - red
columns:
  - color
bools:
  - ==
  - '!='
loc: 2
solution:
  - filter
  - natural_join3
sql: |
  SELECT LHS.S_key AS S_key,
            LHS.P_id AS P_id,
            LHS.color AS color,
            LHS.S_name AS S_name
     FROM
       (SELECT LHS.S_key AS S_key,
               LHS.P_id AS P_id,
               LHS.color AS color,
               RHS.S_name AS S_name
        FROM
          (SELECT LHS.S_key AS S_key,
                  LHS.P_id AS P_id,
                  RHS.color AS color
           FROM df_19_1 AS LHS
           INNER JOIN df_19_2 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
        INNER JOIN df_19_3 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
     INNER JOIN
       (SELECT *
        FROM df_19_2
        WHERE (color = 'red')) AS RHS ON (LHS.P_id = RHS.P_id
                                            AND LHS.color = RHS.color)
comment: |
  5.2.7 optimal solution

  df1=inner_join(catalog,suppliers) %>% inner_join(parts) %>%
    filter(color == "red")
  df2=inner_join(catalog,suppliers) %>% inner_join(parts) %>%
    filter(color != "red")
  anti_join(df1,df2)

  ALTERNATIVE SOLUTION?

  df1 <- input2 %>% filter(color == 'red')
  df2 <- inner_join(inner_join(inner_join(input1, df1), input2), input3)
  out <- df2 %>% select(S_key, P_id, S_name, color) %>% distinct()

full_sketch: |
  T1 = natural_join(19-1, 19-2, 19-3)
  T2 = filter(T1, color == "red")
  T3 = natural_join(19-1, 19-2, 19-3)
  T4 = filter(T3, color != "red")
  T5 = anti_join(T2, T4)
  out = select(T5, (S_key, P_id, S_name, color), S_key)